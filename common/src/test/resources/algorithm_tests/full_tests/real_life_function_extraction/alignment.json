{
  "matches": [{
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 11,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 16,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 46,
      "from": 23,
      "to": 29
    },
    "right": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 65,
      "from": 23,
      "to": 29
    }
  }, {
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "import svm",
      "lineIdx": 4,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import svm",
      "lineIdx": 4,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 45,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 64,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 40,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 59,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 11,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 16,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "    assert size > 1",
      "lineIdx": 16,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    assert size > 1",
      "lineIdx": 21,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 17,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 22,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 10,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 15,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 47,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 66,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 53,
      "from": 13,
      "to": 17
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 72,
      "from": 13,
      "to": 17
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 13,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 18,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 53,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 72,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 17,
      "from": 4,
      "to": 12
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 22,
      "from": 4,
      "to": 12
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 30,
      "to": 32
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 30,
      "to": 32
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 11,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 16,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "                f_sum_valid += f_valid",
      "lineIdx": 67,
      "from": 16,
      "to": 27
    },
    "right": {
      "line": "            f_sum_valid += f_valid",
      "lineIdx": 51,
      "from": 12,
      "to": 23
    }
  }, {
    "left": {
      "line": "    assert k > 1",
      "lineIdx": 12,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    assert k > 1",
      "lineIdx": 17,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "from utils import *",
      "lineIdx": 7,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "from utils import *",
      "lineIdx": 7,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 43,
      "from": 28,
      "to": 41
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 62,
      "from": 28,
      "to": 41
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 19,
      "to": 22
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 19,
      "to": 22
    }
  }, {
    "left": {
      "line": "from utils import *",
      "lineIdx": 7,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "from utils import *",
      "lineIdx": 7,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 34,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 39,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 49,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 68,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 52,
      "to": 57
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 52,
      "to": 57
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 15,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 20,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 31,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 36,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "from svmutil import *",
      "lineIdx": 5,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "from svmutil import *",
      "lineIdx": 5,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 40,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 59,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "def predict(model, x):",
      "lineIdx": 27,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "def predict(model, x):",
      "lineIdx": 32,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 53,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 72,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "            for i in range(k):",
      "lineIdx": 62,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 48,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 60,
      "to": 62
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 60,
      "to": 62
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 27,
      "to": 42
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 27,
      "to": 42
    }
  }, {
    "left": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 39,
      "from": 17,
      "to": 26
    },
    "right": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 58,
      "from": 17,
      "to": 26
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 57,
      "to": 60
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 57,
      "to": 60
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 40,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 59,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 46,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 65,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 31,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 36,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 45,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 64,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 73,
      "to": 77
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 73,
      "to": 77
    }
  }, {
    "left": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 14,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 19,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 35,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 40,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 47,
      "from": 8,
      "to": 19
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 66,
      "from": 8,
      "to": 19
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 18,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 23,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "            for i in range(k):",
      "lineIdx": 62,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 48,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "            for i in range(k):",
      "lineIdx": 62,
      "from": 21,
      "to": 26
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 48,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 31,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 36,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 23,
      "to": 29
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 23,
      "to": 29
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 40,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 59,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 53,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 72,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 70,
      "to": 72
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 70,
      "to": 72
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 62,
      "to": 67
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 62,
      "to": 67
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 15,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 20,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 15,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 20,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 25,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 30,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "import svm",
      "lineIdx": 4,
      "from": 7,
      "to": 10
    },
    "right": {
      "line": "import svm",
      "lineIdx": 4,
      "from": 7,
      "to": 10
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "            f_sum_train = 0",
      "lineIdx": 61,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "        f_sum_train = 0",
      "lineIdx": 47,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 39,
      "to": 44
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 39,
      "to": 44
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 11,
      "to": 28
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 11,
      "to": 28
    }
  }, {
    "left": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 20,
      "from": 11,
      "to": 19
    },
    "right": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 25,
      "from": 11,
      "to": 19
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 40,
      "from": 46,
      "to": 48
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 59,
      "from": 46,
      "to": 48
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 40,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 59,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 18,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 23,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 25,
      "from": 36,
      "to": 43
    },
    "right": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 30,
      "from": 36,
      "to": 43
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "        for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 59,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 45,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 38,
      "to": 41
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 38,
      "to": 41
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 56,
      "to": 64
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 56,
      "to": 64
    }
  }, {
    "left": {
      "line": "                f_sum_train += f_train",
      "lineIdx": 68,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "            f_sum_train += f_train",
      "lineIdx": 52,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 38,
      "to": 49
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 38,
      "to": 49
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 18,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 23,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 52,
      "to": 54
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 52,
      "to": 54
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 25,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 30,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 31,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 36,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 15,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 20,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 53,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 72,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 21,
      "to": 28
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 21,
      "to": 28
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "            for i in range(k):",
      "lineIdx": 62,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 48,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 11,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 16,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 39,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 58,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 39,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 58,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "def predict(model, x):",
      "lineIdx": 27,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "def predict(model, x):",
      "lineIdx": 32,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 17,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 22,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 53,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 72,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 90,
      "to": 97
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 86,
      "to": 93
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 29,
      "to": 45
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 29,
      "to": 45
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 13,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 18,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "        for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 59,
      "from": 51,
      "to": 61
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 45,
      "from": 47,
      "to": 57
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 18,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 23,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "main()",
      "lineIdx": 85,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "main()",
      "lineIdx": 95,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 30,
      "to": 43
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 30,
      "to": 43
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "from svmutil import *",
      "lineIdx": 5,
      "from": 13,
      "to": 19
    },
    "right": {
      "line": "from svmutil import *",
      "lineIdx": 5,
      "from": 13,
      "to": 19
    }
  }, {
    "left": {
      "line": "                f_sum_valid += f_valid",
      "lineIdx": 67,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "            f_sum_valid += f_valid",
      "lineIdx": 51,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "def predict(model, x):",
      "lineIdx": 27,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "def predict(model, x):",
      "lineIdx": 32,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 46,
      "from": 30,
      "to": 33
    },
    "right": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 65,
      "from": 30,
      "to": 33
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 81,
      "to": 88
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 81,
      "to": 88
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 47,
      "to": 52
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 47,
      "to": 52
    }
  }, {
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 40,
      "to": 43
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 40,
      "to": 43
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 25,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 30,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 46,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 65,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 63,
      "to": 67
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 63,
      "to": 67
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 58,
      "to": 61
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 58,
      "to": 61
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 35,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 40,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    assert size > 1",
      "lineIdx": 16,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    assert size > 1",
      "lineIdx": 21,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 33,
      "from": 23,
      "to": 30
    },
    "right": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 38,
      "from": 23,
      "to": 30
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 10,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 15,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 30,
      "to": 37
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 30,
      "to": 37
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 31,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 36,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 43,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 62,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "                f_sum_train += f_train",
      "lineIdx": 68,
      "from": 31,
      "to": 38
    },
    "right": {
      "line": "            f_sum_train += f_train",
      "lineIdx": 52,
      "from": 27,
      "to": 34
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 4,
      "to": 17
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 4,
      "to": 17
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "        for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 59,
      "from": 21,
      "to": 26
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 45,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 40,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 59,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 18,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 23,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 17,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 22,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 39,
      "from": 46,
      "to": 48
    },
    "right": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 58,
      "from": 46,
      "to": 48
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 31,
      "to": 37
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 31,
      "to": 37
    }
  }, {
    "left": {
      "line": "                train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 63,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 49,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 10,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 15,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "        for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 59,
      "from": 18,
      "to": 20
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 45,
      "from": 14,
      "to": 16
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 31,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 36,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 78,
      "to": 85
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 78,
      "to": 85
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 53,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 72,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "                f_sum_train += f_train",
      "lineIdx": 68,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "            f_sum_train += f_train",
      "lineIdx": 52,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 13,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 18,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 18,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 23,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 38,
      "to": 41
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 38,
      "to": 41
    }
  }, {
    "left": {
      "line": "def main():",
      "lineIdx": 38,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "def main():",
      "lineIdx": 56,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "            for i in range(k):",
      "lineIdx": 62,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 48,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 83,
      "to": 88
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 79,
      "to": 84
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 18,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 23,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 18,
      "to": 28
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 18,
      "to": 28
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 53,
      "to": 55
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 53,
      "to": 55
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 13,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 18,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 39,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 58,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 4,
      "to": 19
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 4,
      "to": 19
    }
  }, {
    "left": {
      "line": "    assert k > 1",
      "lineIdx": 12,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    assert k > 1",
      "lineIdx": 17,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 35,
      "to": 50
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 31,
      "to": 46
    }
  }, {
    "left": {
      "line": "def main():",
      "lineIdx": 38,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "def main():",
      "lineIdx": 56,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "        for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 59,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 45,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 33,
      "from": 38,
      "to": 45
    },
    "right": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 38,
      "from": 38,
      "to": 45
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 51,
      "to": 59
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 47,
      "to": 55
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 39,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 58,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 10,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 15,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 65,
      "to": 70
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 65,
      "to": 70
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 45,
      "to": 50
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 45,
      "to": 50
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "                train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 63,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 49,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 34,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 39,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 46,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 65,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 13,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 18,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "def main():",
      "lineIdx": 38,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "def main():",
      "lineIdx": 56,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 17,
      "from": 27,
      "to": 31
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 22,
      "from": 27,
      "to": 31
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 57,
      "to": 74
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 57,
      "to": 74
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 23,
      "to": 28
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 23,
      "to": 28
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 34,
      "from": 13,
      "to": 20
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 39,
      "from": 13,
      "to": 20
    }
  }, {
    "left": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 14,
      "from": 19,
      "to": 21
    },
    "right": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 19,
      "from": 19,
      "to": 21
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "main()",
      "lineIdx": 85,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "main()",
      "lineIdx": 95,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 53,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 72,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 39,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 58,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "                f_sum_valid += f_valid",
      "lineIdx": 67,
      "from": 31,
      "to": 38
    },
    "right": {
      "line": "            f_sum_valid += f_valid",
      "lineIdx": 51,
      "from": 27,
      "to": 34
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 45,
      "to": 55
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 45,
      "to": 55
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 46,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 65,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 18,
      "to": 20
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 18,
      "to": 20
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 34,
      "to": 51
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 34,
      "to": 51
    }
  }, {
    "left": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 20,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 25,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "def predict(model, x):",
      "lineIdx": 27,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def predict(model, x):",
      "lineIdx": 32,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 17,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 22,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 33,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 38,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "            f_sum_train = 0",
      "lineIdx": 61,
      "from": 12,
      "to": 23
    },
    "right": {
      "line": "        f_sum_train = 0",
      "lineIdx": 47,
      "from": 8,
      "to": 19
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 25,
      "to": 32
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 21,
      "to": 28
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 18,
      "from": 31,
      "to": 35
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 23,
      "from": 31,
      "to": 35
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 31,
      "from": 13,
      "to": 20
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 36,
      "from": 13,
      "to": 20
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 15,
      "to": 27
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 15,
      "to": 27
    }
  }, {
    "left": {
      "line": "            f_sum_valid = 0",
      "lineIdx": 60,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "        f_sum_valid = 0",
      "lineIdx": 46,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "            for i in range(k):",
      "lineIdx": 62,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 48,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 57,
      "to": 59
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 57,
      "to": 59
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 34,
      "from": 28,
      "to": 41
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 39,
      "from": 28,
      "to": 41
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 18,
      "from": 4,
      "to": 17
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 23,
      "from": 4,
      "to": 17
    }
  }, {
    "left": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 33,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 38,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "                train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 63,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 49,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 55,
      "to": 58
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 55,
      "to": 58
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "                f_sum_valid += f_valid",
      "lineIdx": 67,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "            f_sum_valid += f_valid",
      "lineIdx": 51,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 34,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 39,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 15,
      "to": 23
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 15,
      "to": 23
    }
  }, {
    "left": {
      "line": "        for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 59,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 45,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 20,
      "to": 28
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 20,
      "to": 28
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 17,
      "from": 23,
      "to": 25
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 22,
      "from": 23,
      "to": 25
    }
  }, {
    "left": {
      "line": "            f_sum_valid = 0",
      "lineIdx": 60,
      "from": 12,
      "to": 23
    },
    "right": {
      "line": "        f_sum_valid = 0",
      "lineIdx": 46,
      "from": 8,
      "to": 19
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "        for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 59,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 45,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 17,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 22,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 39,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 58,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 43,
      "from": 11,
      "to": 27
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 62,
      "from": 11,
      "to": 27
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 75,
      "to": 91
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 75,
      "to": 91
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "                train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 63,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 49,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "import random",
      "lineIdx": 6,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import random",
      "lineIdx": 6,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 39,
      "from": 28,
      "to": 38
    },
    "right": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 58,
      "from": 28,
      "to": 38
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 45,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 64,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 33,
      "to": 39
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 33,
      "to": 39
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "        for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 59,
      "from": 40,
      "to": 49
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 45,
      "from": 36,
      "to": 45
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 40,
      "from": 17,
      "to": 26
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 59,
      "from": 17,
      "to": 26
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 47,
      "from": 23,
      "to": 29
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 66,
      "from": 23,
      "to": 29
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 18,
      "to": 25
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 18,
      "to": 25
    }
  }, {
    "left": {
      "line": "        for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 59,
      "from": 27,
      "to": 38
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 45,
      "from": 23,
      "to": 34
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 33,
      "from": 4,
      "to": 20
    },
    "right": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 38,
      "from": 4,
      "to": 20
    }
  }, {
    "left": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 14,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 19,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 46,
      "from": 36,
      "to": 42
    },
    "right": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 65,
      "from": 36,
      "to": 42
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 15,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 20,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 15,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 20,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "import sys",
      "lineIdx": 2,
      "from": 7,
      "to": 10
    },
    "right": {
      "line": "import sys",
      "lineIdx": 2,
      "from": 7,
      "to": 10
    }
  }, {
    "left": {
      "line": "def predict(model, x):",
      "lineIdx": 27,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "def predict(model, x):",
      "lineIdx": 32,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "def main():",
      "lineIdx": 38,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "def main():",
      "lineIdx": 56,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "def predict(model, x):",
      "lineIdx": 27,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "def predict(model, x):",
      "lineIdx": 32,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 35,
      "from": 4,
      "to": 20
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 40,
      "from": 4,
      "to": 20
    }
  }, {
    "left": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 25,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 30,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 13,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 18,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 39,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 58,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 10,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 15,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 27,
      "to": 30
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 27,
      "to": 30
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 40,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 59,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 34,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 39,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 15,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 20,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 11,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 16,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 76,
      "to": 81
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 72,
      "to": 77
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 47,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 66,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 46,
      "from": 4,
      "to": 19
    },
    "right": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 65,
      "from": 4,
      "to": 19
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 11,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 16,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 86,
      "to": 89
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 86,
      "to": 89
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 31,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 36,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 34,
      "to": 37
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 34,
      "to": 37
    }
  }, {
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 43,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 62,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 47,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 66,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "            for i in range(k):",
      "lineIdx": 62,
      "from": 18,
      "to": 20
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 48,
      "from": 14,
      "to": 16
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "                train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 63,
      "from": 16,
      "to": 24
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 49,
      "from": 12,
      "to": 20
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "def predict(model, x):",
      "lineIdx": 27,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "def predict(model, x):",
      "lineIdx": 32,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 68,
      "to": 75
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 68,
      "to": 75
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 16,
      "to": 19
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 16,
      "to": 19
    }
  }, {
    "left": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 33,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 38,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 13,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 18,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "        for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 59,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 45,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 35,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 40,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 10,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 15,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 11,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 16,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 25,
      "from": 11,
      "to": 20
    },
    "right": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 30,
      "from": 11,
      "to": 20
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 17,
      "from": 15,
      "to": 17
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 22,
      "from": 15,
      "to": 17
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 43,
      "to": 48
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 43,
      "to": 48
    }
  }, {
    "left": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 45,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 64,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 49,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 68,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 16,
      "to": 21
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 16,
      "to": 21
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 47,
      "to": 54
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 47,
      "to": 54
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 34,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 39,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 31,
      "to": 44
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 31,
      "to": 44
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "                train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 63,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 49,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 13,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 18,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 25,
      "to": 28
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 25,
      "to": 28
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 35,
      "from": 38,
      "to": 45
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 40,
      "from": 38,
      "to": 45
    }
  }, {
    "left": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 25,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 30,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 13,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 18,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 1,
      "to": 5
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 1,
      "to": 5
    }
  }, {
    "left": {
      "line": "            for i in range(k):",
      "lineIdx": 62,
      "from": 12,
      "to": 15
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 48,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 18,
      "to": 26
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 18,
      "to": 26
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 20,
      "to": 26
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 20,
      "to": 26
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 43,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 62,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 64,
      "to": 69
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 64,
      "to": 69
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 40,
      "from": 28,
      "to": 38
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 59,
      "from": 28,
      "to": 38
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 14,
      "from": 11,
      "to": 18
    },
    "right": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 19,
      "from": 11,
      "to": 18
    }
  }, {
    "left": {
      "line": "                train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 63,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 49,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 28,
      "to": 38
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 28,
      "to": 38
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    assert k > 1",
      "lineIdx": 12,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    assert k > 1",
      "lineIdx": 17,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 25,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 30,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 49,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 68,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 39,
      "from": 4,
      "to": 15
    },
    "right": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 58,
      "from": 4,
      "to": 15
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 25,
      "from": 27,
      "to": 34
    },
    "right": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 30,
      "from": 27,
      "to": 34
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 16,
      "to": 23
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 12,
      "to": 19
    }
  }, {
    "left": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 14,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 19,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 49,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 68,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 46,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 65,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 18,
      "from": 20,
      "to": 22
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 23,
      "from": 20,
      "to": 22
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 40,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 59,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 15,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 20,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 20,
      "from": 21,
      "to": 34
    },
    "right": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 25,
      "from": 21,
      "to": 34
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 35,
      "from": 31,
      "to": 36
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 40,
      "from": 31,
      "to": 36
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 27,
      "to": 34
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 27,
      "to": 34
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 3,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 40,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 59,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 14,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 19,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 15,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 20,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 10,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 15,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 78,
      "to": 80
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 78,
      "to": 80
    }
  }, {
    "left": {
      "line": "            f_sum_train = 0",
      "lineIdx": 61,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "        f_sum_train = 0",
      "lineIdx": 47,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 45,
      "from": 13,
      "to": 25
    },
    "right": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 64,
      "from": 13,
      "to": 25
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 47,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 66,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 18,
      "from": 27,
      "to": 29
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 23,
      "from": 27,
      "to": 29
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 43,
      "to": 56
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 43,
      "to": 56
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 10,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 15,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 18,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 23,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "def main():",
      "lineIdx": 38,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def main():",
      "lineIdx": 56,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 34,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 39,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 35,
      "from": 23,
      "to": 30
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 40,
      "from": 23,
      "to": 30
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 11,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 16,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 46,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 65,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 17,
      "from": 19,
      "to": 22
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 22,
      "from": 19,
      "to": 22
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 31,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 36,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 52,
      "to": 59
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 52,
      "to": 59
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 40,
      "from": 4,
      "to": 15
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 59,
      "from": 4,
      "to": 15
    }
  }, {
    "left": {
      "line": "        for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 59,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 45,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "                f_sum_train += f_train",
      "lineIdx": 68,
      "from": 16,
      "to": 27
    },
    "right": {
      "line": "            f_sum_train += f_train",
      "lineIdx": 52,
      "from": 12,
      "to": 23
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 11,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 16,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 20,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 25,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 59,
      "to": 66
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 59,
      "to": 66
    }
  }, {
    "left": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 25,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 30,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 10,
      "from": 4,
      "to": 13
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 15,
      "from": 4,
      "to": 13
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "main()",
      "lineIdx": 85,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "main()",
      "lineIdx": 95,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 49,
      "from": 18,
      "to": 22
    },
    "right": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 68,
      "from": 18,
      "to": 22
    }
  }, {
    "left": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 39,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2",
      "lineIdx": 58,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 27,
      "to": 32
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 27,
      "to": 32
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 27,
      "to": 29
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 27,
      "to": 29
    }
  }, {
    "left": {
      "line": "    assert size > 1",
      "lineIdx": 16,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    assert size > 1",
      "lineIdx": 21,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "            f_sum_valid = 0",
      "lineIdx": 60,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "        f_sum_valid = 0",
      "lineIdx": 46,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 53,
      "from": 24,
      "to": 34
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 72,
      "from": 24,
      "to": 34
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 49,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 68,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 43,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 62,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 11,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 16,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 44,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 63,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 41,
      "to": 45
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 41,
      "to": 45
    }
  }, {
    "left": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 33,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 38,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 6,
      "to": 14
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 6,
      "to": 14
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 43,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 62,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    print(\"Best g: \" + str(2**g_exp))",
      "lineIdx": 80,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    print(\"Best g: \" + str(2**best[1]))",
      "lineIdx": 92,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    print(\"Best f validation score: \" + str(best_f_sum_valid/k))",
      "lineIdx": 77,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"Best f validation score: \" + str(best[3]))",
      "lineIdx": 89,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "from svmutil import *",
      "lineIdx": 5,
      "from": 5,
      "to": 12
    },
    "right": {
      "line": "from svmutil import *",
      "lineIdx": 5,
      "from": 5,
      "to": 12
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 19,
      "from": 49,
      "to": 52
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 24,
      "from": 49,
      "to": 52
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "                train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 63,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 49,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "def predict(model, x):",
      "lineIdx": 27,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "def predict(model, x):",
      "lineIdx": 32,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 45,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 64,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 25,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    return svm_train(y, x, options, max_idx)    ",
      "lineIdx": 30,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "                f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 64,
      "from": 61,
      "to": 74
    },
    "right": {
      "line": "            f_train, f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 50,
      "from": 57,
      "to": 70
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    assert size > 1",
      "lineIdx": 16,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "    assert size > 1",
      "lineIdx": 21,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "                train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 63,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 49,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 11,
      "from": 21,
      "to": 24
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 16,
      "from": 21,
      "to": 24
    }
  }, {
    "left": {
      "line": "        for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 59,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 45,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 50,
      "to": 55
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 50,
      "to": 55
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 36,
      "to": 41
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 36,
      "to": 41
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 47,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 66,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 35,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 40,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    assert k > 1",
      "lineIdx": 12,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    assert k > 1",
      "lineIdx": 17,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 28,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "    return list(map(lambda xi: libsvm.svm_predict(model, xi), x))",
      "lineIdx": 33,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "                train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 63,
      "from": 26,
      "to": 39
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 49,
      "from": 22,
      "to": 35
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 15,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 20,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "import random",
      "lineIdx": 6,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "import random",
      "lineIdx": 6,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "import sys",
      "lineIdx": 2,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import sys",
      "lineIdx": 2,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 40,
      "to": 43
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 40,
      "to": 43
    }
  }, {
    "left": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 46,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 65,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 46,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 65,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "    print(\"Best c: \" + str(2**c_exp))",
      "lineIdx": 79,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    print(\"Best c: \" + str(2**best[0]))",
      "lineIdx": 91,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 48,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "    x, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 67,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 46,
      "to": 51
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 46,
      "to": 51
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 36,
      "from": 93,
      "to": 100
    },
    "right": {
      "line": "    return f_score_from_data(train_prediction, y_train), f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 41,
      "from": 93,
      "to": 100
    }
  }, {
    "left": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 33,
      "from": 31,
      "to": 36
    },
    "right": {
      "line": "    train_prediction = predict(model, x_train)",
      "lineIdx": 38,
      "from": 31,
      "to": 36
    }
  }, {
    "left": {
      "line": "                train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 63,
      "from": 42,
      "to": 51
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 49,
      "from": 38,
      "to": 47
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 47,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 66,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 10,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 15,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 32,
      "from": 50,
      "to": 57
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 37,
      "from": 50,
      "to": 57
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 9,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 14,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "from svmutil import *",
      "lineIdx": 5,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "from svmutil import *",
      "lineIdx": 5,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 15,
      "from": 15,
      "to": 18
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 20,
      "from": 15,
      "to": 18
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 13,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 18,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "from utils import *",
      "lineIdx": 7,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "from utils import *",
      "lineIdx": 7,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 17,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 22,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 43,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file)",
      "lineIdx": 62,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 17,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 22,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 13,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 18,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    print(\"Best f training score: \" + str(best_f_sum_train/k))",
      "lineIdx": 78,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"Best f training score: \" + str(best[2]))",
      "lineIdx": 90,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "                train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 63,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 49,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 42,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    training_file = \"../../features_output/train_samples.txt\"",
      "lineIdx": 61,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "from utils import *",
      "lineIdx": 7,
      "from": 5,
      "to": 10
    },
    "right": {
      "line": "from utils import *",
      "lineIdx": 7,
      "from": 5,
      "to": 10
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 34,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 39,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 24,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "    options = '-g {0} -c {1} -q'.format(str(2**c_exp), str(2**g_exp))",
      "lineIdx": 29,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 30,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 35,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 22,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "def train(y, x, c_exp, g_exp, max_idx): #this whole max_idx is just because I am hacking",
      "lineIdx": 27,
      "from": 13,
      "to": 14
    }
  }]
}