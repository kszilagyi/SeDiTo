
final class MyStyledDocument(paragraphs: Vector[Par])
   extends StyledDoc {
  def length(): Int = paragraphs.map(_.length()).sum

  def getText: String = paragraphs.mkString

  def getParagraphs: util.List[Par] = paragraphs.asJava

  def concat(that: StyledDoc): StyledDoc = {
    new MyStyledDocument(paragraphs ++ that.getParagraphs.asScala)
  }

  def subSequence(start: Int, end: Int): StyledDoc = {
    ???
  }

  def position(major: Int, minor: Int): TwoDimensional.Position = ???

  def offsetToPosition(offset: Int, bias: Bias): TwoDimensional.Position = ???
}

final case class LineEdits(line: LineEditType, charEdits: Vector[CharEdit])

final class Editor(maybeOtherEditor: Option[Editor]) extends CodeArea {
  this.setUseInitialStyleForInsertion(true)

  private val lineNumberFactory = new CachedLineNumberFactory(this)
  setParagraphGraphicFactory(lineNumberFactory)

  @SuppressWarnings(Array(Warts.Var))
  private var editTypes = Map.empty[LineIdx, LineEdits]

  val otherEditor: Editor = maybeOtherEditor.getOrElse(new Editor(Some(this)))

  @SuppressWarnings(Array(Warts.Var))
  private var highlightedLines: Traversable[LineIdx] = Traversable.empty

  @SuppressWarnings(Array(Warts.Var))
  private var highlightedChars: Traversable[Selection] = Traversable.empty

  @SuppressWarnings(Array(Warts.Var))
  private var _selectedForMatch: Option[Selection] = None

  @SuppressWarnings(Array(Warts.Var))
  var wordAlignmentByLine: Map[LineIdx, Traversable[MatchInfo]] = Map.empty

  @SuppressWarnings(Array(Warts.Var))
  var newLineType: String = System.lineSeparator()

  def selectedForMatch(): Option[Selection] = _selectedForMatch

  private def reset(): Unit = {
    editTypes = Map.empty
    highlightedLines = Traversable.empty
    highlightedChars = Traversable.empty
    lineNumberFactory.reset()
    clear()
  }
  private val popup = new Popup
  private val popupMsg = new Label
  popupMsg.setStyle("-fx-background-color: black;" + "-fx-text-fill: white;" + "-fx-padding: 5;")
  discard(popup.getContent.add(popupMsg))

  private val popupDebug = new Popup
  private val popupDebugMsg = new Label
  popupDebugMsg.setStyle("-fx-background-color: black;" + "-fx-text-fill: white;" + "-fx-padding: 5;")
  discard(popupDebug.getContent.add(popupDebugMsg))

  setMouseOverTextDelay(Duration.ofMillis(1))
  addEventHandler(MouseOverTextEvent.MOUSE_OVER_TEXT_BEGIN, (e: MouseOverTextEvent) => {
    val chIdx = e.getCharacterIndex
    val posOnScreen = e.getScreenPosition
    val posInText = offsetToPosition(chIdx, Bias.Forward)
    val line = LineIdx(posInText.getMajor)
    val cursorPosInLine = CharIdxInLine(posInText.getMinor)
    editTypes.get(line).foreach { edit =>
      val moveUnderCursor = edit.charEdits.collect {
        case charEdit @ CharEdit(_, _, CharsMoved(fromTo, _)) if charEdit.contains(cursorPosInLine) =>
          fromTo
      }
      assert(moveUnderCursor.size <= 1, s"$moveUnderCursor")
      moveUnderCursor.headOption foreach { fromTo =>
        popupMsg.setText(s"Moved from/to line ${fromTo.lineIdx.i + 1}")
        popup.show(this, posOnScreen.getX, posOnScreen.getY + 10)
        otherEditor.highlightChar(fromTo)
      }
    }

    wordAlignmentByLine.get(line).foreach{ matches =>
      val maybeMatchUnderCursor = matches.find(m => m.selection.from <= cursorPosInLine && cursorPosInLine < m.selection.toExcl)
      val probability = maybeMatchUnderCursor.flatMap(_.probability).getOrElse(Double.NaN)
      popupDebugMsg.setText(f"$probability%.2f")
      popupDebug.show(this, posOnScreen.getX, posOnScreen.getY + 10)
    }
  })

  new MouseOverLineDetector(this, onEnter = { case (e, line) =>
    editTypes.get(line).foreach { edit =>
      edit.line match {
        case LineMoved(from) =>
          popupMsg.setText(s"Moved from/to line ${from.i + 1}")
          popup.show(this, e.getSceneX(), e.getScreenY() - 40)
          otherEditor.highlightLine(from)
          highlightLine(line)
        case LineInserted | LineDeleted | LineSame =>
      }
    }
  }, { () =>
    resetHighlighting()
    otherEditor.resetHighlighting()
    popup.hide()
  })

  addEventHandler(MouseOverTextEvent.MOUSE_OVER_TEXT_END, (_: MouseOverTextEvent) => {
    popup.hide()
    popupDebug.hide()
  })

  private def applyHighlight(highlight: Map[LineIdx, Traversable[CharEdit]]): Unit = {
    highlight.foreach { case (line, edits) =>
      edits.foreach { edit =>
        setCharEdit(line, edit.from, edit.to, edit.editType)
      }
    }
  }

  def setText(fullText: FullText, wordAlignment: Map[LineIdx, scala.Traversable[MatchInfo]], changed: IndexedSeq[LineIdx],
              changeType: LineEditType, moved: Set[BiasedLineMatch], notMoved: Set[LineIdx],
              highlight: Map[LineIdx, scala.Traversable[CharEdit]], firstChangeLine: LineIdx): Unit = {
    reset()
    wordAlignmentByLine = wordAlignment

    changed.foreach(l => setLineType(l, changeType))
    moved.foreach(m => setLineType(m.thisSide, LineMoved(m.otherSide)))
    notMoved.foreach(l => setLineType(l, LineSame))

    applyHighlight(highlight)
    applyLineEdits(fullText)
    applyCharEdits()
    moveTo(math.max(firstChangeLine.i - 4, 0), 0)
    requestFollowCaret()
    newLineType = LineEndingUtils.guessLineEnding(fullText)
  }

  private def applyLineTypeCssOnLineNumber(lineIdx: LineIdx, editType: Option[LineEdits]): Unit = {
    val lineCssClass = getLineCssClass(editType.map(_.line)).s
    val lineNoStyle = lineNumberFactory.apply(lineIdx.i).getStyleClass
    lineNoStyle.clear()
    discard(lineNoStyle.add(lineCssClass))
  }

  private def applyLineEdits(s: FullText): Unit = {
    val lines = s.s.lines.toVector
    if (lines.isEmpty) replaceText("")
    else {
      val paragraphs = lines.zip(editTypes.toSeq.sortBy(_._1)).map { case (line, (_, lineEdits)) =>
        val lineCssClass = getLineCssClass(Some(lineEdits.line)).s
        new Paragraph[util.Collection[String], String, util.Collection[String]](List(lineCssClass).asJava,
          SegmentOps.styledTextOps[util.Collection[String]](), line, List.empty[String].asJava)
      }
      replace(new MyStyledDocument(paragraphs)) //this is much faster than doing it incrementally
    }
  }

  private def setLineType(lineIdx: LineIdx, editType: LineEditType): Unit = {
    val current = editTypes.get(lineIdx)
    val newEdit = current match {
      case Some(edit) => edit.copy(line = editType)
      case None => LineEdits(editType, Vector.empty)
    }

    editTypes += lineIdx -> newEdit
    applyLineTypeCssOnLineNumber(lineIdx, Some(newEdit))
  }

  private def applyCharEdits(): Unit = {
    toStylesSpans(editTypes, this.getText().linesWithSeparators.toIndexedSeq).foreach{ spans =>
      setStyleSpans(0, spans)
    }
  }

  private def setCharEdit(lineIdx: LineIdx, from: CharIdxInLine, to: CharIdxInLine, editType: CharEditType): Unit = {
    val current = editTypes.get(lineIdx)
    val newEdit = current match {
      case Some(edit) => edit.copy(charEdits = edit.charEdits :+ CharEdit(from, to, editType))
      case None => fail(s"Bug in code: cannot have new char edits without line edit. $lineIdx")
    }
    editTypes += lineIdx -> newEdit
  }

  private def highlightLine(line: LineIdx): Unit = {
    highlightedLines ++= Traversable(line)
    setParagraphStyle(line.i, List("highlighted").asJava)
    setStyle(line.i, 0, getParagraph(line.i).length(), List(highlightedCharClass.s).asJava)

    val maybeLineEdits = editTypes.get(line)
    maybeLineEdits.foreach { lineEdits =>
      lineEdits.charEdits.foreach { charEdit =>
        charEdit.editType match {
          case _: CharsMoved | CharsSame =>
          case _ => setStyle (line.i, charEdit.from.i, charEdit.to.i, List (getCharCssClass(charEdit.editType, lineEdits.line).s).asJava)
        }
      }
    }
  }

  private def highlightChar(selection: Selection): Unit = {
    //todo this doesn't keep the color in the highlight (add/remove)
    highlightedChars ++= Traversable(selection)
    setStyle(selection.lineIdx.i, selection.from.i, selection.toExcl.i, List(highlightedCharClass.s).asJava)
  }

  private def resetHighlightingForLine(line: LineIdx): Unit = {
    val maybeLineEdits = editTypes.get(line)
    applyLineTypeCssOnLineNumber(line, maybeLineEdits)
    maybeLineEdits.foreach { lineEdits =>
      setParagraphStyle(line.i, List(getLineCssClass(Some(lineEdits.line)).s).asJava)
      setStyle(line.i, 0, getParagraph(line.i).length(), List(charClassForLineEdit(lineEdits.line).s).asJava)
      lineEdits.charEdits.foreach { charEdit =>
        setStyle(line.i, charEdit.from.i, charEdit.to.i, List(getCharCssClass(charEdit.editType, lineEdits.line).s).asJava)

        charEdit.editType match {
          case CharsMoved(_, edits) =>
            edits.foreach { moveEdit =>
              setStyle(line.i, moveEdit.from.i, moveEdit.to.i, List(getCharCssClass(moveEdit.editType, lineEdits.line).s).asJava)
            }
          case CharsInserted | CharsDeleted | CharsSame =>
        }
      }
    }
  }


}