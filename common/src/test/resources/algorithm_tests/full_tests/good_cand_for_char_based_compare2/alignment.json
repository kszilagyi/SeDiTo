{
  "matches": [{
    "left": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 23,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 23,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 29,
      "from": 11,
      "to": 19
    },
    "right": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 29,
      "from": 11,
      "to": 19
    }
  }, {
    "left": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 100,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 102,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 44,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 43,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 51,
      "to": 53
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 51,
      "to": 53
    }
  }, {
    "left": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 41,
      "from": 23,
      "to": 34
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 40,
      "from": 23,
      "to": 34
    }
  }, {
    "left": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 88,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 87,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 38,
      "to": 46
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 38,
      "to": 46
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "from svm_helper import *",
      "lineIdx": 11,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "from svm_helper import *",
      "lineIdx": 11,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "    except FileNotFoundError:",
      "lineIdx": 62,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    except FileNotFoundError:",
      "lineIdx": 61,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 41,
      "from": 47,
      "to": 57
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 40,
      "from": 47,
      "to": 57
    }
  }, {
    "left": {
      "line": "            c_exp = int(c_exp)",
      "lineIdx": 87,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "            c_exp = int(c_exp)",
      "lineIdx": 86,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 28,
      "to": 41
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 28,
      "to": 41
    }
  }, {
    "left": {
      "line": "except:",
      "lineIdx": 107,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "except:",
      "lineIdx": 110,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "        time.sleep(5)",
      "lineIdx": 104,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "        time.sleep(5)",
      "lineIdx": 107,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 23,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 23,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 27,
      "to": 30
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 27,
      "to": 30
    }
  }, {
    "left": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 44,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 43,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 61,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 60,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 75,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 74,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 53,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 52,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 61,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 60,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 49,
      "to": 55
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 49,
      "to": 55
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 51,
      "to": 55
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 51,
      "to": 55
    }
  }, {
    "left": {
      "line": "from svm_helper import *",
      "lineIdx": 11,
      "from": 5,
      "to": 15
    },
    "right": {
      "line": "from svm_helper import *",
      "lineIdx": 11,
      "from": 5,
      "to": 15
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "import math",
      "lineIdx": 10,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import math",
      "lineIdx": 10,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 66,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 65,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 90,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 92,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    return y, x, calculated_md5",
      "lineIdx": 76,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    return y, x, calculated_md5",
      "lineIdx": 75,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 36,
      "to": 38
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 36,
      "to": 38
    }
  }, {
    "left": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 44,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 43,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 50,
      "to": 60
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 50,
      "to": 60
    }
  }, {
    "left": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 44,
      "from": 12,
      "to": 20
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 43,
      "from": 12,
      "to": 20
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 74,
      "from": 23,
      "to": 29
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 73,
      "from": 23,
      "to": 29
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "try:",
      "lineIdx": 105,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "try:",
      "lineIdx": 108,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 91,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 93,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 61,
      "from": 39,
      "to": 44
    },
    "right": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 60,
      "from": 39,
      "to": 44
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    main()",
      "lineIdx": 106,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "    main()",
      "lineIdx": 109,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 80,
      "from": 13,
      "to": 17
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 79,
      "from": 13,
      "to": 17
    }
  }, {
    "left": {
      "line": "                print(\"calculating results\")",
      "lineIdx": 89,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "                print(start_msg)",
      "lineIdx": 89,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "from grid_common import *",
      "lineIdx": 13,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "from grid_common import *",
      "lineIdx": 13,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 44,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 43,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "import os",
      "lineIdx": 9,
      "from": 7,
      "to": 9
    },
    "right": {
      "line": "import os",
      "lineIdx": 9,
      "from": 7,
      "to": 9
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 54,
      "to": 58
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 54,
      "to": 58
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 93,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 95,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 57,
      "to": 66
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 57,
      "to": 66
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 84,
      "from": 35,
      "to": 51
    },
    "right": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 83,
      "from": 35,
      "to": 51
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 25,
      "to": 28
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 25,
      "to": 28
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 27,
      "to": 29
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 27,
      "to": 29
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 44,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 43,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 23,
      "to": 30
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 23,
      "to": 30
    }
  }, {
    "left": {
      "line": "                message.delete()",
      "lineIdx": 96,
      "from": 24,
      "to": 30
    },
    "right": {
      "line": "                message.delete()",
      "lineIdx": 98,
      "from": 24,
      "to": 30
    }
  }, {
    "left": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 58,
      "from": 46,
      "to": 48
    },
    "right": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 57,
      "from": 46,
      "to": 48
    }
  }, {
    "left": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 93,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 95,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 102,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 104,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "    return y, x, calculated_md5",
      "lineIdx": 76,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    return y, x, calculated_md5",
      "lineIdx": 75,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 53,
      "to": 55
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 53,
      "to": 55
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 72,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 71,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "        file.write(train_data)",
      "lineIdx": 68,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "        file.write(train_data)",
      "lineIdx": 67,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    assert size > 1",
      "lineIdx": 25,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "    assert size > 1",
      "lineIdx": 25,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "    assert k > 1",
      "lineIdx": 21,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    assert k > 1",
      "lineIdx": 21,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 50,
      "to": 59
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 50,
      "to": 59
    }
  }, {
    "left": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 100,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 102,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 29,
      "from": 21,
      "to": 34
    },
    "right": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 29,
      "from": 21,
      "to": 34
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 62,
      "to": 70
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 62,
      "to": 70
    }
  }, {
    "left": {
      "line": "            else:",
      "lineIdx": 97,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "            else:",
      "lineIdx": 99,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "def main():",
      "lineIdx": 78,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def main():",
      "lineIdx": 77,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 58,
      "from": 53,
      "to": 57
    },
    "right": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 57,
      "from": 53,
      "to": 57
    }
  }, {
    "left": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 83,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 82,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 70,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 69,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "                print(\"calculating results\")",
      "lineIdx": 89,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "                start_msg = \"calculating results for: \" + str(c_exp) + \" at \" + host_name",
      "lineIdx": 88,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 75,
      "from": 33,
      "to": 43
    },
    "right": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 74,
      "from": 33,
      "to": 43
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 108,
      "from": 17,
      "to": 22
    },
    "right": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 111,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 1,
      "to": 12
    },
    "right": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 1,
      "to": 12
    }
  }, {
    "left": {
      "line": "import hashlib",
      "lineIdx": 14,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import hashlib",
      "lineIdx": 14,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 64,
      "to": 66
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 64,
      "to": 66
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 70,
      "from": 11,
      "to": 27
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 69,
      "from": 11,
      "to": 27
    }
  }, {
    "left": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 102,
      "from": 42,
      "to": 59
    },
    "right": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 104,
      "from": 42,
      "to": 59
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 80,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 79,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 18,
      "to": 20
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 18,
      "to": 20
    }
  }, {
    "left": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 50,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 49,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 21,
      "to": 28
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 21,
      "to": 28
    }
  }, {
    "left": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 88,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 87,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 53,
      "from": 17,
      "to": 26
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 52,
      "from": 17,
      "to": 26
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 74,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 73,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 63,
      "to": 74
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 63,
      "to": 74
    }
  }, {
    "left": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 101,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 103,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "        file.write(train_data)",
      "lineIdx": 68,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "        file.write(train_data)",
      "lineIdx": 67,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 90,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 92,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 80,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 79,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    assert size > 1",
      "lineIdx": 25,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    assert size > 1",
      "lineIdx": 25,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 70,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 69,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 95,
      "from": 56,
      "to": 70
    },
    "right": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 97,
      "from": 56,
      "to": 70
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 80,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 79,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 73,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 72,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 52,
      "from": 18,
      "to": 22
    },
    "right": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 51,
      "from": 18,
      "to": 22
    }
  }, {
    "left": {
      "line": "def read_training_data(): ",
      "lineIdx": 56,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "def read_training_data(): ",
      "lineIdx": 55,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 41,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 40,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 52,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 51,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 85,
      "from": 19,
      "to": 27
    },
    "right": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 84,
      "from": 19,
      "to": 27
    }
  }, {
    "left": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 95,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 97,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 4,
      "to": 22
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 4,
      "to": 22
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 65,
      "to": 72
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 65,
      "to": 72
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 73,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 72,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 86,
      "to": 89
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 86,
      "to": 89
    }
  }, {
    "left": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 83,
      "from": 15,
      "to": 22
    },
    "right": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 82,
      "from": 15,
      "to": 22
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 74,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 73,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 90,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 92,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "        file.write(train_data)",
      "lineIdx": 68,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "        file.write(train_data)",
      "lineIdx": 67,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 102,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 104,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "try:",
      "lineIdx": 105,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "try:",
      "lineIdx": 108,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    return y, x, calculated_md5",
      "lineIdx": 76,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    return y, x, calculated_md5",
      "lineIdx": 75,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 36,
      "to": 40
    },
    "right": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 36,
      "to": 40
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 75,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 74,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 53,
      "from": 46,
      "to": 48
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 52,
      "from": 46,
      "to": 48
    }
  }, {
    "left": {
      "line": "            f_sum_valid += f_valid",
      "lineIdx": 46,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "            f_sum_valid += f_valid",
      "lineIdx": 45,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 50,
      "to": 61
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 50,
      "to": 61
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 74,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 73,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 83,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 82,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 22,
      "to": 37
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 22,
      "to": 37
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 20,
      "to": 25
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 20,
      "to": 25
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 41,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 40,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 93,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 95,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "from utils import *",
      "lineIdx": 8,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "from utils import *",
      "lineIdx": 8,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "import random",
      "lineIdx": 7,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "import random",
      "lineIdx": 7,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 94,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 96,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 12,
      "to": 19
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 12,
      "to": 19
    }
  }, {
    "left": {
      "line": "def main():",
      "lineIdx": 78,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "def main():",
      "lineIdx": 77,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 29,
      "to": 40
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 29,
      "to": 40
    }
  }, {
    "left": {
      "line": "        for i in range(k):",
      "lineIdx": 43,
      "from": 14,
      "to": 16
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 42,
      "from": 14,
      "to": 16
    }
  }, {
    "left": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 66,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 65,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 72,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 71,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 23,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 23,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 93,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 95,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 102,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 104,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 73,
      "from": 31,
      "to": 34
    },
    "right": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 72,
      "from": 31,
      "to": 34
    }
  }, {
    "left": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 101,
      "from": 39,
      "to": 57
    },
    "right": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 103,
      "from": 39,
      "to": 57
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 77,
      "to": 84
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 77,
      "to": 84
    }
  }, {
    "left": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 90,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 92,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 88,
      "from": 33,
      "to": 46
    },
    "right": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 87,
      "from": 33,
      "to": 46
    }
  }, {
    "left": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 85,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 84,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "            f_sum_valid += f_valid",
      "lineIdx": 46,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "            f_sum_valid += f_valid",
      "lineIdx": 45,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 108,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 111,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 20,
      "to": 28
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 20,
      "to": 28
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 90,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 92,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "        f_sum_valid = 0",
      "lineIdx": 42,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "        f_sum_valid = 0",
      "lineIdx": 41,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    assert k > 1",
      "lineIdx": 21,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    assert k > 1",
      "lineIdx": 21,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 65,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 64,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 70,
      "to": 75
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 70,
      "to": 75
    }
  }, {
    "left": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 88,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 87,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 42,
      "to": 50
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 42,
      "to": 50
    }
  }, {
    "left": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 50,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 49,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 70,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 69,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 61,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 60,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 41,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 40,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "            f_sum_valid += f_valid",
      "lineIdx": 46,
      "from": 12,
      "to": 23
    },
    "right": {
      "line": "            f_sum_valid += f_valid",
      "lineIdx": 45,
      "from": 12,
      "to": 23
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "import math",
      "lineIdx": 10,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "import math",
      "lineIdx": 10,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 53,
      "from": 28,
      "to": 38
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 52,
      "from": 28,
      "to": 38
    }
  }, {
    "left": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 58,
      "from": 13,
      "to": 19
    },
    "right": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 57,
      "from": 13,
      "to": 19
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 4,
      "to": 17
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 4,
      "to": 17
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 44,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 43,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 53,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 52,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 47,
      "to": 54
    },
    "right": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 47,
      "to": 54
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 83,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 82,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "        for i in range(k):",
      "lineIdx": 43,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 42,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "        file.write(train_data)",
      "lineIdx": 68,
      "from": 19,
      "to": 29
    },
    "right": {
      "line": "        file.write(train_data)",
      "lineIdx": 67,
      "from": 19,
      "to": 29
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 45,
      "to": 50
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 45,
      "to": 50
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 85,
      "from": 41,
      "to": 48
    },
    "right": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 84,
      "from": 41,
      "to": 48
    }
  }, {
    "left": {
      "line": "    assert size > 1",
      "lineIdx": 25,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    assert size > 1",
      "lineIdx": 25,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "                                json_response_msg_id: msg_id}",
      "lineIdx": 92,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "                                json_response_msg_id: msg_id}",
      "lineIdx": 94,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 70,
      "to": 72
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 70,
      "to": 72
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 26,
      "to": 37
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 26,
      "to": 37
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "                print(\"calculating results\")",
      "lineIdx": 89,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "                print(start_msg)",
      "lineIdx": 89,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 21,
      "to": 24
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 21,
      "to": 24
    }
  }, {
    "left": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 50,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 49,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 34,
      "to": 37
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 34,
      "to": 37
    }
  }, {
    "left": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 91,
      "from": 55,
      "to": 62
    },
    "right": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 93,
      "from": 55,
      "to": 62
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "        time.sleep(5)",
      "lineIdx": 104,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "        time.sleep(5)",
      "lineIdx": 107,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 66,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 65,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "from grid_common import *",
      "lineIdx": 13,
      "from": 5,
      "to": 16
    },
    "right": {
      "line": "from grid_common import *",
      "lineIdx": 13,
      "from": 5,
      "to": 16
    }
  }, {
    "left": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 65,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 64,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    except FileNotFoundError:",
      "lineIdx": 62,
      "from": 11,
      "to": 28
    },
    "right": {
      "line": "    except FileNotFoundError:",
      "lineIdx": 61,
      "from": 11,
      "to": 28
    }
  }, {
    "left": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 50,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 49,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "import os",
      "lineIdx": 9,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import os",
      "lineIdx": 9,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "from grid_common import *",
      "lineIdx": 13,
      "from": 17,
      "to": 23
    },
    "right": {
      "line": "from grid_common import *",
      "lineIdx": 13,
      "from": 17,
      "to": 23
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "                                json_response_msg_id: msg_id}",
      "lineIdx": 92,
      "from": 54,
      "to": 60
    },
    "right": {
      "line": "                                json_response_msg_id: msg_id}",
      "lineIdx": 94,
      "from": 54,
      "to": 60
    }
  }, {
    "left": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 61,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 60,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 80,
      "from": 24,
      "to": 34
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 79,
      "from": 24,
      "to": 34
    }
  }, {
    "left": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 66,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 65,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "from svm_helper import *",
      "lineIdx": 11,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "from svm_helper import *",
      "lineIdx": 11,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 66,
      "to": 71
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 66,
      "to": 71
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 79,
      "from": 10,
      "to": 24
    },
    "right": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 78,
      "from": 10,
      "to": 24
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 73,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 72,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 53,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 52,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 44,
      "from": 22,
      "to": 35
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 43,
      "from": 22,
      "to": 35
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 37,
      "to": 42
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 37,
      "to": 42
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 93,
      "to": 102
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 93,
      "to": 102
    }
  }, {
    "left": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 93,
      "from": 16,
      "to": 30
    },
    "right": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 95,
      "from": 16,
      "to": 30
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "import time",
      "lineIdx": 12,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "import time",
      "lineIdx": 12,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 56,
      "to": 61
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 56,
      "to": 61
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "import svm",
      "lineIdx": 5,
      "from": 7,
      "to": 10
    },
    "right": {
      "line": "import svm",
      "lineIdx": 5,
      "from": 7,
      "to": 10
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "import time",
      "lineIdx": 12,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import time",
      "lineIdx": 12,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "from utils import *",
      "lineIdx": 8,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "from utils import *",
      "lineIdx": 8,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 58,
      "from": 20,
      "to": 22
    },
    "right": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 57,
      "from": 20,
      "to": 22
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 58,
      "from": 32,
      "to": 37
    },
    "right": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 57,
      "from": 32,
      "to": 37
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 93,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 95,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 88,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 87,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 84,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 83,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 75,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 74,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 90,
      "from": 26,
      "to": 38
    },
    "right": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 92,
      "from": 26,
      "to": 38
    }
  }, {
    "left": {
      "line": "from grid_common import *",
      "lineIdx": 13,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "from grid_common import *",
      "lineIdx": 13,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 84,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 83,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 100,
      "from": 28,
      "to": 40
    },
    "right": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 102,
      "from": 28,
      "to": 40
    }
  }, {
    "left": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 50,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 49,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 85,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 84,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "    while(True):",
      "lineIdx": 82,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    while(True):",
      "lineIdx": 81,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "                print(\"calculating results\")",
      "lineIdx": 89,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "                start_msg = \"calculating results for: \" + str(c_exp) + \" at \" + host_name",
      "lineIdx": 88,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 66,
      "from": 34,
      "to": 38
    },
    "right": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 65,
      "from": 34,
      "to": 38
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 58,
      "from": 10,
      "to": 12
    },
    "right": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 57,
      "from": 10,
      "to": 12
    }
  }, {
    "left": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 66,
      "from": 4,
      "to": 14
    },
    "right": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 65,
      "from": 4,
      "to": 14
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 40,
      "to": 42
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 40,
      "to": 42
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 58,
      "to": 60
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 58,
      "to": 60
    }
  }, {
    "left": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 94,
      "from": 38,
      "to": 42
    },
    "right": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 96,
      "from": 38,
      "to": 42
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 84,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 83,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 65,
      "from": 15,
      "to": 35
    },
    "right": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 64,
      "from": 15,
      "to": 35
    }
  }, {
    "left": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 65,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 64,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 95,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 97,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 53,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 52,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 41,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 40,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "import random",
      "lineIdx": 15,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "import random",
      "lineIdx": 15,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 94,
      "from": 48,
      "to": 62
    },
    "right": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 96,
      "from": 48,
      "to": 62
    }
  }, {
    "left": {
      "line": "    #todo remove file after finished",
      "lineIdx": 57,
      "from": 17,
      "to": 21
    },
    "right": {
      "line": "    #todo remove file after finished",
      "lineIdx": 56,
      "from": 17,
      "to": 21
    }
  }, {
    "left": {
      "line": "            c_exp = int(c_exp)",
      "lineIdx": 87,
      "from": 20,
      "to": 23
    },
    "right": {
      "line": "            c_exp = int(c_exp)",
      "lineIdx": 86,
      "from": 20,
      "to": 23
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 27,
      "to": 34
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 27,
      "to": 34
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "        f_sum_valid = 0",
      "lineIdx": 42,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "        f_sum_valid = 0",
      "lineIdx": 41,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 44,
      "from": 38,
      "to": 47
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 43,
      "from": 38,
      "to": 47
    }
  }, {
    "left": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 75,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 74,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 84,
      "from": 23,
      "to": 34
    },
    "right": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 83,
      "from": 23,
      "to": 34
    }
  }, {
    "left": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 108,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 111,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "                print(err_msg)",
      "lineIdx": 99,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "                print(err_msg)",
      "lineIdx": 101,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "from utils import *",
      "lineIdx": 8,
      "from": 5,
      "to": 10
    },
    "right": {
      "line": "from utils import *",
      "lineIdx": 8,
      "from": 5,
      "to": 10
    }
  }, {
    "left": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 95,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 97,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 50,
      "from": 17,
      "to": 22
    },
    "right": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 49,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 39,
      "to": 44
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 39,
      "to": 44
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 93,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 95,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 43,
      "to": 48
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 43,
      "to": 48
    }
  }, {
    "left": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 108,
      "from": 11,
      "to": 16
    },
    "right": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 111,
      "from": 11,
      "to": 16
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 90,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 92,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 53,
      "from": 4,
      "to": 15
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 52,
      "from": 4,
      "to": 15
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 95,
      "from": 42,
      "to": 53
    },
    "right": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 97,
      "from": 42,
      "to": 53
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 59,
      "to": 63
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 59,
      "to": 63
    }
  }, {
    "left": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 73,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 72,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 67,
      "to": 86
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 67,
      "to": 86
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 70,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 69,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 72,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 71,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "            f_sum_valid += f_valid",
      "lineIdx": 46,
      "from": 27,
      "to": 34
    },
    "right": {
      "line": "            f_sum_valid += f_valid",
      "lineIdx": 45,
      "from": 27,
      "to": 34
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 72,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 71,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "    try:",
      "lineIdx": 60,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    try:",
      "lineIdx": 59,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 102,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 104,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 59,
      "to": 66
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 59,
      "to": 66
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 79,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 78,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 13,
      "to": 20
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 13,
      "to": 20
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 48,
      "to": 61
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 48,
      "to": 61
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 44,
      "to": 49
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 44,
      "to": 49
    }
  }, {
    "left": {
      "line": "                print(\"calculating results\")",
      "lineIdx": 89,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "                start_msg = \"calculating results for: \" + str(c_exp) + \" at \" + host_name",
      "lineIdx": 88,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 79,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 78,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 78,
      "to": 85
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 78,
      "to": 85
    }
  }, {
    "left": {
      "line": "def main():",
      "lineIdx": 78,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "def main():",
      "lineIdx": 77,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 70,
      "from": 28,
      "to": 46
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 69,
      "from": 28,
      "to": 46
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 50,
      "to": 55
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 50,
      "to": 55
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 85,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 84,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 14,
      "to": 32
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 14,
      "to": 32
    }
  }, {
    "left": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 66,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 65,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 94,
      "from": 23,
      "to": 30
    },
    "right": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 96,
      "from": 23,
      "to": 30
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 75,
      "from": 21,
      "to": 28
    },
    "right": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 74,
      "from": 21,
      "to": 28
    }
  }, {
    "left": {
      "line": "    #todo remove file after finished",
      "lineIdx": 57,
      "from": 5,
      "to": 9
    },
    "right": {
      "line": "    #todo remove file after finished",
      "lineIdx": 56,
      "from": 5,
      "to": 9
    }
  }, {
    "left": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 73,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 72,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 50,
      "to": 57
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 50,
      "to": 57
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 91,
      "from": 16,
      "to": 28
    },
    "right": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 93,
      "from": 16,
      "to": 28
    }
  }, {
    "left": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 108,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 111,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 58,
      "from": 42,
      "to": 45
    },
    "right": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 57,
      "from": 42,
      "to": 45
    }
  }, {
    "left": {
      "line": "import hashlib",
      "lineIdx": 14,
      "from": 7,
      "to": 14
    },
    "right": {
      "line": "import hashlib",
      "lineIdx": 14,
      "from": 7,
      "to": 14
    }
  }, {
    "left": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 65,
      "from": 4,
      "to": 12
    },
    "right": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 64,
      "from": 4,
      "to": 12
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 67,
      "to": 76
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 67,
      "to": 76
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 52,
      "to": 57
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 52,
      "to": 57
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 100,
      "from": 55,
      "to": 62
    },
    "right": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 102,
      "from": 55,
      "to": 62
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "def main():",
      "lineIdx": 78,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "def main():",
      "lineIdx": 77,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 73,
      "from": 24,
      "to": 30
    },
    "right": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 72,
      "from": 24,
      "to": 30
    }
  }, {
    "left": {
      "line": "    raise",
      "lineIdx": 110,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    raise",
      "lineIdx": 113,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 90,
      "from": 16,
      "to": 23
    },
    "right": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 92,
      "from": 16,
      "to": 23
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 50,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 49,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "                print(err_msg)",
      "lineIdx": 99,
      "from": 16,
      "to": 21
    },
    "right": {
      "line": "                print(err_msg)",
      "lineIdx": 101,
      "from": 16,
      "to": 21
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 4,
      "to": 13
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 4,
      "to": 13
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 103,
      "to": 106
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 103,
      "to": 106
    }
  }, {
    "left": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 85,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 84,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "                print(\"calculating results\")",
      "lineIdx": 89,
      "from": 35,
      "to": 42
    },
    "right": {
      "line": "                start_msg = \"calculating results for: \" + str(c_exp) + \" at \" + host_name",
      "lineIdx": 88,
      "from": 41,
      "to": 48
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 108,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 111,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 4,
      "to": 20
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 4,
      "to": 20
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 84,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 83,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 25,
      "to": 28
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 25,
      "to": 28
    }
  }, {
    "left": {
      "line": "def read_training_data(): ",
      "lineIdx": 56,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "def read_training_data(): ",
      "lineIdx": 55,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 13,
      "to": 20
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 13,
      "to": 20
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 19,
      "to": 21
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 19,
      "to": 21
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 49,
      "to": 52
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 49,
      "to": 52
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 37,
      "to": 43
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 37,
      "to": 43
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    main()",
      "lineIdx": 106,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    main()",
      "lineIdx": 109,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 16,
      "to": 23
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 16,
      "to": 23
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    main()",
      "lineIdx": 106,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    main()",
      "lineIdx": 109,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 83,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 82,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "    while(True):",
      "lineIdx": 82,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    while(True):",
      "lineIdx": 81,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 45,
      "to": 48
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 45,
      "to": 48
    }
  }, {
    "left": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 72,
      "from": 13,
      "to": 25
    },
    "right": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 71,
      "from": 13,
      "to": 25
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "                print(\"calculating results\")",
      "lineIdx": 89,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "                start_msg = \"calculating results for: \" + str(c_exp) + \" at \" + host_name",
      "lineIdx": 88,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 23,
      "to": 25
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 23,
      "to": 25
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 31,
      "to": 36
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 31,
      "to": 36
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    assert k > 1",
      "lineIdx": 21,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    assert k > 1",
      "lineIdx": 21,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "        time.sleep(5)",
      "lineIdx": 104,
      "from": 13,
      "to": 18
    },
    "right": {
      "line": "        time.sleep(5)",
      "lineIdx": 107,
      "from": 13,
      "to": 18
    }
  }, {
    "left": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 41,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 40,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 79,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 78,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "            c_exp = int(c_exp)",
      "lineIdx": 87,
      "from": 24,
      "to": 29
    },
    "right": {
      "line": "            c_exp = int(c_exp)",
      "lineIdx": 86,
      "from": 24,
      "to": 29
    }
  }, {
    "left": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 93,
      "from": 33,
      "to": 37
    },
    "right": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 95,
      "from": 33,
      "to": 37
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 31,
      "to": 36
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 31,
      "to": 36
    }
  }, {
    "left": {
      "line": "                print(\"calculating results\")",
      "lineIdx": 89,
      "from": 16,
      "to": 21
    },
    "right": {
      "line": "                print(start_msg)",
      "lineIdx": 89,
      "from": 16,
      "to": 21
    }
  }, {
    "left": {
      "line": "        file.write(train_data)",
      "lineIdx": 68,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "        file.write(train_data)",
      "lineIdx": 67,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 53,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 52,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 101,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 103,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 1,
      "to": 5
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 1,
      "to": 5
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 31,
      "to": 35
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 31,
      "to": 35
    }
  }, {
    "left": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 94,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 96,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 13,
      "to": 19
    },
    "right": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 13,
      "to": 19
    }
  }, {
    "left": {
      "line": "                                json_response_msg_id: msg_id}",
      "lineIdx": 92,
      "from": 32,
      "to": 52
    },
    "right": {
      "line": "                                json_response_msg_id: msg_id}",
      "lineIdx": 94,
      "from": 32,
      "to": 52
    }
  }, {
    "left": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 91,
      "from": 32,
      "to": 53
    },
    "right": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 93,
      "from": 32,
      "to": 53
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 39,
      "to": 48
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 39,
      "to": 48
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 27,
      "to": 31
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 27,
      "to": 31
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 12,
      "to": 18
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 12,
      "to": 18
    }
  }, {
    "left": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 58,
      "from": 38,
      "to": 41
    },
    "right": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 57,
      "from": 38,
      "to": 41
    }
  }, {
    "left": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 73,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 72,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 66,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 65,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 73,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 72,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 28,
      "to": 41
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 28,
      "to": 41
    }
  }, {
    "left": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 58,
      "from": 23,
      "to": 31
    },
    "right": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 57,
      "from": 23,
      "to": 31
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 84,
      "from": 12,
      "to": 19
    },
    "right": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 83,
      "from": 12,
      "to": 19
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 28,
      "to": 35
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 28,
      "to": 35
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 35,
      "to": 37
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 35,
      "to": 37
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 108,
      "to": 114
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 108,
      "to": 114
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 88,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 87,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 101,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 103,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 44,
      "to": 46
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 44,
      "to": 46
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 93,
      "from": 59,
      "to": 71
    },
    "right": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 95,
      "from": 59,
      "to": 71
    }
  }, {
    "left": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 90,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 92,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 70,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 69,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 72,
      "to": 77
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 72,
      "to": 77
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 18,
      "to": 26
    },
    "right": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 18,
      "to": 26
    }
  }, {
    "left": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 94,
      "from": 16,
      "to": 21
    },
    "right": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 96,
      "from": 16,
      "to": 21
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 38,
      "to": 41
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 38,
      "to": 41
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 50,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 49,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    return y, x, calculated_md5",
      "lineIdx": 76,
      "from": 17,
      "to": 31
    },
    "right": {
      "line": "    return y, x, calculated_md5",
      "lineIdx": 75,
      "from": 17,
      "to": 31
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 73,
      "from": 5,
      "to": 20
    },
    "right": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 72,
      "from": 5,
      "to": 20
    }
  }, {
    "left": {
      "line": "from utils import *",
      "lineIdx": 8,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "from utils import *",
      "lineIdx": 8,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "import svm",
      "lineIdx": 5,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import svm",
      "lineIdx": 5,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 85,
      "from": 49,
      "to": 53
    },
    "right": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 84,
      "from": 49,
      "to": 53
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 16,
      "to": 28
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 16,
      "to": 28
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 15,
      "to": 18
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 15,
      "to": 18
    }
  }, {
    "left": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 94,
      "from": 31,
      "to": 37
    },
    "right": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 96,
      "from": 31,
      "to": 37
    }
  }, {
    "left": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 61,
      "from": 18,
      "to": 36
    },
    "right": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 60,
      "from": 18,
      "to": 36
    }
  }, {
    "left": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 23,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 23,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 101,
      "from": 22,
      "to": 36
    },
    "right": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 103,
      "from": 22,
      "to": 36
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 15,
      "to": 17
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 15,
      "to": 17
    }
  }, {
    "left": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 79,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 78,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 50,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 49,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "                print(err_msg)",
      "lineIdx": 99,
      "from": 22,
      "to": 29
    },
    "right": {
      "line": "                print(err_msg)",
      "lineIdx": 101,
      "from": 22,
      "to": 29
    }
  }, {
    "left": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 102,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 104,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 20,
      "to": 22
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 20,
      "to": 22
    }
  }, {
    "left": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 23,
      "from": 11,
      "to": 18
    },
    "right": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 23,
      "from": 11,
      "to": 18
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 73,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 72,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "        for i in range(k):",
      "lineIdx": 43,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 42,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 33,
      "to": 42
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 33,
      "to": 42
    }
  }, {
    "left": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 44,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 43,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    while(True):",
      "lineIdx": 82,
      "from": 10,
      "to": 14
    },
    "right": {
      "line": "    while(True):",
      "lineIdx": 81,
      "from": 10,
      "to": 14
    }
  }, {
    "left": {
      "line": "            c_exp = int(c_exp)",
      "lineIdx": 87,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            c_exp = int(c_exp)",
      "lineIdx": 86,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 60,
      "to": 62
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 60,
      "to": 62
    }
  }, {
    "left": {
      "line": "def read_training_data(): ",
      "lineIdx": 56,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "def read_training_data(): ",
      "lineIdx": 55,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 101,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 103,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 84,
      "from": 20,
      "to": 22
    },
    "right": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 83,
      "from": 20,
      "to": 22
    }
  }, {
    "left": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 73,
      "from": 37,
      "to": 43
    },
    "right": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 72,
      "from": 37,
      "to": 43
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 16,
      "to": 24
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 16,
      "to": 24
    }
  }, {
    "left": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 91,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 93,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 29,
      "to": 45
    },
    "right": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 29,
      "to": 45
    }
  }, {
    "left": {
      "line": "    #todo remove file after finished",
      "lineIdx": 57,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "    #todo remove file after finished",
      "lineIdx": 56,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 79,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 78,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 66,
      "from": 27,
      "to": 31
    },
    "right": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 65,
      "from": 27,
      "to": 31
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "        time.sleep(5)",
      "lineIdx": 104,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "        time.sleep(5)",
      "lineIdx": 107,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 101,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 103,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 90,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 92,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 83,
      "to": 90
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 83,
      "to": 90
    }
  }, {
    "left": {
      "line": "        for i in range(k):",
      "lineIdx": 43,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 42,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 94,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 96,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "def read_training_data(): ",
      "lineIdx": 56,
      "from": 4,
      "to": 22
    },
    "right": {
      "line": "def read_training_data(): ",
      "lineIdx": 55,
      "from": 4,
      "to": 22
    }
  }, {
    "left": {
      "line": "        file.write(train_data)",
      "lineIdx": 68,
      "from": 13,
      "to": 18
    },
    "right": {
      "line": "        file.write(train_data)",
      "lineIdx": 67,
      "from": 13,
      "to": 18
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 64,
      "to": 69
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 64,
      "to": 69
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    #todo remove file after finished",
      "lineIdx": 57,
      "from": 22,
      "to": 27
    },
    "right": {
      "line": "    #todo remove file after finished",
      "lineIdx": 56,
      "from": 22,
      "to": 27
    }
  }, {
    "left": {
      "line": "        for i in range(k):",
      "lineIdx": 43,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 42,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 66,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 65,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 100,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 102,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 61,
      "from": 8,
      "to": 10
    },
    "right": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 60,
      "from": 8,
      "to": 10
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 58,
      "to": 61
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 58,
      "to": 61
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 23,
      "from": 19,
      "to": 21
    },
    "right": {
      "line": "    random.shuffle(yx)",
      "lineIdx": 23,
      "from": 19,
      "to": 21
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 4,
      "to": 12
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 4,
      "to": 12
    }
  }, {
    "left": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 44,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 43,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "                message.delete()",
      "lineIdx": 96,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "                message.delete()",
      "lineIdx": 98,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 61,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 60,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 41,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 40,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 102,
      "from": 24,
      "to": 41
    },
    "right": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 104,
      "from": 24,
      "to": 41
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 29,
      "to": 35
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 29,
      "to": 35
    }
  }, {
    "left": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 94,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 96,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 94,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 96,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 85,
      "to": 92
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 85,
      "to": 92
    }
  }, {
    "left": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 91,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 93,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 95,
      "from": 29,
      "to": 41
    },
    "right": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 97,
      "from": 29,
      "to": 41
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "        for i in range(k):",
      "lineIdx": 43,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 42,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 83,
      "from": 27,
      "to": 35
    },
    "right": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 82,
      "from": 27,
      "to": 35
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 30,
      "to": 43
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 30,
      "to": 43
    }
  }, {
    "left": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 58,
      "from": 5,
      "to": 9
    },
    "right": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 57,
      "from": 5,
      "to": 9
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 52,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 51,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "        for i in range(k):",
      "lineIdx": 43,
      "from": 17,
      "to": 22
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 42,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 61,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 60,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 41,
      "from": 36,
      "to": 45
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 40,
      "from": 36,
      "to": 45
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 83,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 82,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 73,
      "to": 77
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 73,
      "to": 77
    }
  }, {
    "left": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 50,
      "from": 4,
      "to": 16
    },
    "right": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 49,
      "from": 4,
      "to": 16
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 43,
      "to": 47
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 43,
      "to": 47
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 93,
      "to": 96
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 93,
      "to": 96
    }
  }, {
    "left": {
      "line": "import random",
      "lineIdx": 7,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import random",
      "lineIdx": 7,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 20,
      "to": 23
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 20,
      "to": 23
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 27,
      "to": 40
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 27,
      "to": 40
    }
  }, {
    "left": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 65,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 64,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 93,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 95,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 80,
      "to": 84
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 80,
      "to": 84
    }
  }, {
    "left": {
      "line": "                print(err_msg)",
      "lineIdx": 99,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "                print(err_msg)",
      "lineIdx": 101,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "    try:",
      "lineIdx": 60,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    try:",
      "lineIdx": 59,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 27,
      "to": 34
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 27,
      "to": 34
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 53,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 52,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 36,
      "to": 41
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 36,
      "to": 41
    }
  }, {
    "left": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 75,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 74,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 31,
      "to": 44
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 31,
      "to": 44
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 27,
      "to": 30
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 27,
      "to": 30
    }
  }, {
    "left": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 65,
      "from": 36,
      "to": 39
    },
    "right": {
      "line": "    response = traing_file_resource.get()",
      "lineIdx": 64,
      "from": 36,
      "to": 39
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 52,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 51,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 68,
      "to": 78
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 68,
      "to": 78
    }
  }, {
    "left": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 66,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 65,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    assert len(y) == len(x)",
      "lineIdx": 20,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 13,
      "to": 17
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 13,
      "to": 17
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 1,
      "to": 5
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 1,
      "to": 5
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 93,
      "from": 52,
      "to": 58
    },
    "right": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 95,
      "from": 52,
      "to": 58
    }
  }, {
    "left": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 58,
      "from": 58,
      "to": 67
    },
    "right": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 57,
      "from": 58,
      "to": 67
    }
  }, {
    "left": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 100,
      "from": 41,
      "to": 52
    },
    "right": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 102,
      "from": 41,
      "to": 52
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 94,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "                print(\"Sending result back: \" + result_message)",
      "lineIdx": 96,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 100,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 102,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 43,
      "to": 48
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 43,
      "to": 48
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 74,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 73,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 28,
      "to": 38
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 28,
      "to": 38
    }
  }, {
    "left": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 41,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 40,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "except:",
      "lineIdx": 107,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "except:",
      "lineIdx": 110,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 75,
      "from": 29,
      "to": 32
    },
    "right": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 74,
      "from": 29,
      "to": 32
    }
  }, {
    "left": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 88,
      "from": 15,
      "to": 29
    },
    "right": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 87,
      "from": 15,
      "to": 29
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 88,
      "from": 12,
      "to": 14
    },
    "right": {
      "line": "            if(calculated_md5 == reference_md5):",
      "lineIdx": 87,
      "from": 12,
      "to": 14
    }
  }, {
    "left": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 33,
      "to": 35
    },
    "right": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 33,
      "to": 35
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 73,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    #save_range_file(\"./ranges.txt\", ranges)",
      "lineIdx": 72,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "import json",
      "lineIdx": 16,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "import json",
      "lineIdx": 16,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "                                json_response_msg_id: msg_id}",
      "lineIdx": 92,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "                                json_response_msg_id: msg_id}",
      "lineIdx": 94,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 27,
      "to": 32
    },
    "right": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 27,
      "to": 32
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 53,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 52,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "    return y, x, calculated_md5",
      "lineIdx": 76,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    return y, x, calculated_md5",
      "lineIdx": 75,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 19,
      "to": 22
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 19,
      "to": 22
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 6,
      "to": 14
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 6,
      "to": 14
    }
  }, {
    "left": {
      "line": "import sys",
      "lineIdx": 3,
      "from": 7,
      "to": 10
    },
    "right": {
      "line": "import sys",
      "lineIdx": 3,
      "from": 7,
      "to": 10
    }
  }, {
    "left": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 4,
      "to": 12
    },
    "right": {
      "line": "    train_yx = yx[:len(yx)-size]",
      "lineIdx": 26,
      "from": 4,
      "to": 12
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 93,
      "from": 38,
      "to": 49
    },
    "right": {
      "line": "                result_message = json.JSONEncoder().encode(message_dict)",
      "lineIdx": 95,
      "from": 38,
      "to": 49
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 80,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 79,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 83,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "        print(\"Waiting for messages\")",
      "lineIdx": 82,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 53,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 52,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 26,
      "to": 31
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 26,
      "to": 31
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "import random",
      "lineIdx": 15,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import random",
      "lineIdx": 15,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "def partition(y, x, k): ",
      "lineIdx": 19,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 58,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 57,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    while(True):",
      "lineIdx": 82,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    while(True):",
      "lineIdx": 81,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 101,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 103,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 84,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "        for message in input_queue.receive_messages():",
      "lineIdx": 83,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 29,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 29,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "        time.sleep(5)",
      "lineIdx": 104,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "        time.sleep(5)",
      "lineIdx": 107,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    while(True):",
      "lineIdx": 82,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    while(True):",
      "lineIdx": 81,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 100,
      "from": 16,
      "to": 27
    },
    "right": {
      "line": "                error_queue.send_message(MessageBody = err_msg)  ",
      "lineIdx": 102,
      "from": 16,
      "to": 27
    }
  }, {
    "left": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 66,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    train_data = response['Body'].read()",
      "lineIdx": 65,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 56,
      "to": 63
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 56,
      "to": 63
    }
  }, {
    "left": {
      "line": "            c_exp = int(c_exp)",
      "lineIdx": 87,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "            c_exp = int(c_exp)",
      "lineIdx": 86,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 53,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    g_exp_begin, g_exp_end, g_exp_step =  3, -15, -2",
      "lineIdx": 52,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 79,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 78,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 61,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "        os.remove(training_file_path) #hacky :(",
      "lineIdx": 60,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 41,
      "from": 14,
      "to": 16
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 40,
      "from": 14,
      "to": 16
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 63,
      "to": 68
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 63,
      "to": 68
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 85,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 84,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 85,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 84,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 18,
      "to": 25
    },
    "right": {
      "line": "    model = train(y_train, x_train, c_exp, g_exp, max_idx)",
      "lineIdx": 34,
      "from": 18,
      "to": 25
    }
  }, {
    "left": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "sys.path.insert(0, './../lib')",
      "lineIdx": 4,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 67,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "    with open(training_file_path, 'wb') as file: #hacky",
      "lineIdx": 66,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "            c_exp = int(c_exp)",
      "lineIdx": 87,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "            c_exp = int(c_exp)",
      "lineIdx": 86,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 90,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 92,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 52,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 51,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    assert size > 1",
      "lineIdx": 25,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    assert size > 1",
      "lineIdx": 25,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 5,
      "to": 12
    },
    "right": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 5,
      "to": 12
    }
  }, {
    "left": {
      "line": "    except FileNotFoundError:",
      "lineIdx": 62,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    except FileNotFoundError:",
      "lineIdx": 61,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 39,
      "to": 41
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 39,
      "to": 41
    }
  }, {
    "left": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 75,
      "from": 45,
      "to": 54
    },
    "right": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 74,
      "from": 45,
      "to": 54
    }
  }, {
    "left": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 75,
      "from": 4,
      "to": 18
    },
    "right": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 74,
      "from": 4,
      "to": 18
    }
  }, {
    "left": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 29,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return train_yx, validation_yx",
      "lineIdx": 29,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "def main():",
      "lineIdx": 78,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "def main():",
      "lineIdx": 77,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    size = int(len(y)/k)",
      "lineIdx": 24,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "import sys",
      "lineIdx": 3,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import sys",
      "lineIdx": 3,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 52,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    max_idx = max(idxs)",
      "lineIdx": 51,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "        f_sum_valid = 0",
      "lineIdx": 42,
      "from": 8,
      "to": 19
    },
    "right": {
      "line": "        f_sum_valid = 0",
      "lineIdx": 41,
      "from": 8,
      "to": 19
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 22,
      "to": 26
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 22,
      "to": 26
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    yx = list(zip(y, x))",
      "lineIdx": 22,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 74,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 73,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 45,
      "to": 55
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 45,
      "to": 55
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 71,
      "to": 76
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 71,
      "to": 76
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "    y_valid, x_valid = zip(*validation_yx)",
      "lineIdx": 35,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 4,
      "to": 19
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 4,
      "to": 19
    }
  }, {
    "left": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 38,
      "to": 45
    },
    "right": {
      "line": "    valid_prediction = predict(model, x_valid)",
      "lineIdx": 36,
      "from": 38,
      "to": 45
    }
  }, {
    "left": {
      "line": "        for i in range(k):",
      "lineIdx": 43,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "        for i in range(k):",
      "lineIdx": 42,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 85,
      "from": 28,
      "to": 35
    },
    "right": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 84,
      "from": 28,
      "to": 35
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 70,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    y, x = svm_read_problem(training_file_path)",
      "lineIdx": 69,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 41,
      "to": 47
    },
    "right": {
      "line": "#interesting: the learning curve is much faster",
      "lineIdx": 2,
      "from": 41,
      "to": 47
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 95,
      "from": 16,
      "to": 28
    },
    "right": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 97,
      "from": 16,
      "to": 28
    }
  }, {
    "left": {
      "line": "        time.sleep(5)",
      "lineIdx": 104,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "        time.sleep(5)",
      "lineIdx": 107,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 74,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 73,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "                message.delete()",
      "lineIdx": 96,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "                message.delete()",
      "lineIdx": 98,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 15,
      "to": 27
    },
    "right": {
      "line": "#todo consider implementing stratified cross validation - but i think it will avarage out",
      "lineIdx": 18,
      "from": 15,
      "to": 27
    }
  }, {
    "left": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 79,
      "from": 27,
      "to": 45
    },
    "right": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 78,
      "from": 27,
      "to": 45
    }
  }, {
    "left": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 102,
      "from": 16,
      "to": 23
    },
    "right": {
      "line": "                message.change_visibility(VisibilityTimeout=0)",
      "lineIdx": 104,
      "from": 16,
      "to": 23
    }
  }, {
    "left": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 11,
      "to": 28
    },
    "right": {
      "line": "    return f_score_from_data(valid_prediction, y_valid)",
      "lineIdx": 37,
      "from": 11,
      "to": 28
    }
  }, {
    "left": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 41,
      "from": 17,
      "to": 22
    },
    "right": {
      "line": "    for g_exp in range(g_exp_begin, g_exp_end, g_exp_step):",
      "lineIdx": 40,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 75,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 74,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "                message.delete()",
      "lineIdx": 96,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "                message.delete()",
      "lineIdx": 98,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "def evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx):",
      "lineIdx": 32,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 85,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 84,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "def evalForC(y, x, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx):",
      "lineIdx": 39,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "                message.delete()",
      "lineIdx": 96,
      "from": 16,
      "to": 23
    },
    "right": {
      "line": "                message.delete()",
      "lineIdx": 98,
      "from": 16,
      "to": 23
    }
  }, {
    "left": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 79,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    y, x, calculated_md5 = read_training_data()",
      "lineIdx": 78,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 101,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "                y, x, calculated_md5 = read_training_data()",
      "lineIdx": 103,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 80,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 79,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "    assert k > 1",
      "lineIdx": 21,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    assert k > 1",
      "lineIdx": 21,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    validation_yx = yx[len(yx)-size:]",
      "lineIdx": 27,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 58,
      "from": 49,
      "to": 52
    },
    "right": {
      "line": "    #this is needed so multiple stuff can run in the same directory",
      "lineIdx": 57,
      "from": 49,
      "to": 52
    }
  }, {
    "left": {
      "line": "                print(\"calculating results\")",
      "lineIdx": 89,
      "from": 23,
      "to": 34
    },
    "right": {
      "line": "                start_msg = \"calculating results for: \" + str(c_exp) + \" at \" + host_name",
      "lineIdx": 88,
      "from": 29,
      "to": 40
    }
  }, {
    "left": {
      "line": "    #todo remove file after finished",
      "lineIdx": 57,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "    #todo remove file after finished",
      "lineIdx": 56,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "            else:",
      "lineIdx": 97,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "            else:",
      "lineIdx": 99,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "# -*- coding: utf-8 -*-",
      "lineIdx": 0,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 91,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "                message_dict = {json_response_results: results, ",
      "lineIdx": 93,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "#todo: either make it fast through C++ or optimize or user easy.py  + f score",
      "lineIdx": 1,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 71,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"Number of samples: \" + str(len(y)))",
      "lineIdx": 70,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 90,
      "from": 39,
      "to": 44
    },
    "right": {
      "line": "                results = evalForCBind(c_exp, y, x, k)",
      "lineIdx": 92,
      "from": 39,
      "to": 44
    }
  }, {
    "left": {
      "line": "    return y, x, calculated_md5",
      "lineIdx": 76,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return y, x, calculated_md5",
      "lineIdx": 75,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 109,
      "from": 4,
      "to": 15
    },
    "right": {
      "line": "    error_queue.send_message(MessageBody = \"Fatal exception at \" + host_name)    ",
      "lineIdx": 112,
      "from": 4,
      "to": 15
    }
  }, {
    "left": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 75,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "    calculated_md5 = hashlib.md5(train_data).hexdigest()",
      "lineIdx": 74,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 98,
      "from": 51,
      "to": 60
    },
    "right": {
      "line": "                err_msg = \"Md5 check failed at \" + host_name + \". Retry.\"",
      "lineIdx": 100,
      "from": 51,
      "to": 60
    }
  }, {
    "left": {
      "line": "import json",
      "lineIdx": 16,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import json",
      "lineIdx": 16,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    y_train, x_train = zip(*train_yx)",
      "lineIdx": 33,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 85,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "            print(\"received message: \" + message.body)",
      "lineIdx": 84,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 95,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "                result_queue.send_message(MessageBody = result_message)",
      "lineIdx": 97,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 108,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"Fatal error\")",
      "lineIdx": 111,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 48,
      "from": 15,
      "to": 24
    },
    "right": {
      "line": "        yield {c_exp_key: c_exp, g_exp_key:g_exp, f_score_key: f_sum_valid/k} ##todo collect precision and  recall",
      "lineIdx": 47,
      "from": 15,
      "to": 24
    }
  }, {
    "left": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 51,
      "from": 40,
      "to": 57
    },
    "right": {
      "line": "    x_nodes, idxs = zip(*map(lambda xi: gen_svm_nodearray(xi, isKernel=False), x))",
      "lineIdx": 50,
      "from": 40,
      "to": 57
    }
  }, {
    "left": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 54,
      "from": 44,
      "to": 55
    },
    "right": {
      "line": "    return list(evalForC(y, x_nodes, c_exp, g_exp_begin, g_exp_end, g_exp_step, k, max_idx))",
      "lineIdx": 53,
      "from": 44,
      "to": 55
    }
  }, {
    "left": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 59,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    training_file_path = \"./train_samples\" + str(random.randint(0, 1000000000000000000)) + \".txt\"",
      "lineIdx": 58,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 45,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "            f_valid = evaluate_params(train_yx, validation_yx, c_exp, g_exp, max_idx)",
      "lineIdx": 44,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 86,
      "from": 43,
      "to": 50
    },
    "right": {
      "line": "            msg_id, c_exp, reference_md5 = message.body.split(\",\")",
      "lineIdx": 85,
      "from": 43,
      "to": 50
    }
  }, {
    "left": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 44,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "            train_yx, validation_yx = partition(y, x, k)",
      "lineIdx": 43,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 80,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 79,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 80,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "    k = 5 #k-fold cross validation",
      "lineIdx": 79,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 74,
      "from": 8,
      "to": 19
    },
    "right": {
      "line": "    x = scale_input(x, ranges)",
      "lineIdx": 73,
      "from": 8,
      "to": 19
    }
  }, {
    "left": {
      "line": "def read_training_data(): ",
      "lineIdx": 56,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def read_training_data(): ",
      "lineIdx": 55,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 72,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    ranges = find_min_max(x)",
      "lineIdx": 71,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 15,
      "to": 23
    },
    "right": {
      "line": "    assert len(train_yx) + len(validation_yx) == len(yx)",
      "lineIdx": 28,
      "from": 15,
      "to": 23
    }
  }, {
    "left": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 50,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 49,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    #todo remove file after finished",
      "lineIdx": 57,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    #todo remove file after finished",
      "lineIdx": 56,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "from svm_helper import *",
      "lineIdx": 11,
      "from": 16,
      "to": 22
    },
    "right": {
      "line": "from svm_helper import *",
      "lineIdx": 11,
      "from": 16,
      "to": 22
    }
  }, {
    "left": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 50,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "def evalForCBind(c_exp, y, x, k):",
      "lineIdx": 49,
      "from": 32,
      "to": 33
    }
  }]
}