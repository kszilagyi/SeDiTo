{
  "matches": [{
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 79,
      "to": 82
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 79,
      "to": 82
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 24,
      "to": 30
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 24,
      "to": 30
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 134,
      "to": 135
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 134,
      "to": 135
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "      return false;",
      "lineIdx": 151,
      "from": 13,
      "to": 18
    },
    "right": {
      "line": "      return false;",
      "lineIdx": 151,
      "from": 13,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include <algorithm>",
      "lineIdx": 3,
      "from": 10,
      "to": 19
    },
    "right": {
      "line": "#include <algorithm>",
      "lineIdx": 3,
      "from": 10,
      "to": 19
    }
  }, {
    "left": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 92,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 92,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 78,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 78,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 37,
      "to": 40
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 37,
      "to": 40
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 36,
      "to": 41
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 36,
      "to": 41
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 9,
      "to": 18
    },
    "right": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 9,
      "to": 18
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 87,
      "to": 89
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 87,
      "to": 89
    }
  }, {
    "left": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 74,
      "to": 78
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 74,
      "to": 78
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 8,
      "to": 19
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 8,
      "to": 19
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 25,
      "to": 29
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 25,
      "to": 29
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 101,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 101,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 30,
      "to": 32
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 30,
      "to": 32
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "struct FlatmapResult {",
      "lineIdx": 33,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "struct FlatmapResult {",
      "lineIdx": 33,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 10,
      "to": 23
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 10,
      "to": 23
    }
  }, {
    "left": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 27,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 27,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 28,
      "to": 34
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 28,
      "to": 34
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 44,
      "to": 50
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 44,
      "to": 50
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 49,
      "to": 53
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 49,
      "to": 53
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 185,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  });",
      "lineIdx": 185,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 14,
      "to": 19
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 14,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 90,
      "to": 97
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 90,
      "to": 97
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 29,
      "to": 36
    },
    "right": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 29,
      "to": 36
    }
  }, {
    "left": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 32,
      "to": 36
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 32,
      "to": 36
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 17,
      "to": 21
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 17,
      "to": 21
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 76,
      "to": 78
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 76,
      "to": 78
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 83,
      "to": 86
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 83,
      "to": 86
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 90,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 90,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 34,
      "to": 40
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 34,
      "to": 40
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 59,
      "to": 69
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 59,
      "to": 69
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 44,
      "to": 52
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 44,
      "to": 52
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 21,
      "to": 23
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 21,
      "to": 23
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 66,
      "to": 70
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 66,
      "to": 70
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 22,
      "to": 33
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 22,
      "to": 33
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 45,
      "to": 48
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 45,
      "to": 48
    }
  }, {
    "left": {
      "line": "#include <map>",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <map>",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 47,
      "to": 52
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 47,
      "to": 52
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 50,
      "to": 58
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 50,
      "to": 58
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 2,
      "to": 17
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 2,
      "to": 17
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 13,
      "to": 18
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 13,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 17,
      "to": 21
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 17,
      "to": 21
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 47,
      "to": 50
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 47,
      "to": 50
    }
  }, {
    "left": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 21,
      "to": 23
    },
    "right": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 21,
      "to": 23
    }
  }, {
    "left": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 33,
      "to": 39
    },
    "right": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 33,
      "to": 39
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 103,
      "to": 109
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 103,
      "to": 109
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 20,
      "to": 28
    },
    "right": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 20,
      "to": 28
    }
  }, {
    "left": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 18,
      "to": 22
    },
    "right": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 18,
      "to": 22
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "struct Inserter {",
      "lineIdx": 105,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "struct Inserter {",
      "lineIdx": 105,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 35,
      "to": 38
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 35,
      "to": 38
    }
  }, {
    "left": {
      "line": "using std::unique_ptr;",
      "lineIdx": 14,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "using std::unique_ptr;",
      "lineIdx": 14,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 44,
      "to": 53
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 44,
      "to": 53
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 30,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "};",
      "lineIdx": 30,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 91,
      "to": 93
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 91,
      "to": 93
    }
  }, {
    "left": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 36,
      "to": 40
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 36,
      "to": 40
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 48,
      "to": 54
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 48,
      "to": 54
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "struct Inserter<",
      "lineIdx": 113,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "struct Inserter<",
      "lineIdx": 113,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "#include <functional>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <functional>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 5,
      "to": 16
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 5,
      "to": 16
    }
  }, {
    "left": {
      "line": "        T,",
      "lineIdx": 115,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "        T,",
      "lineIdx": 115,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 24,
      "to": 30
    },
    "right": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 24,
      "to": 30
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 32,
      "to": 35
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 32,
      "to": 35
    }
  }, {
    "left": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 19,
      "to": 23
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 19,
      "to": 23
    }
  }, {
    "left": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "struct MapResult {",
      "lineIdx": 40,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "struct MapResult {",
      "lineIdx": 40,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 39,
      "to": 45
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 39,
      "to": 45
    }
  }, {
    "left": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 21,
      "to": 29
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 21,
      "to": 29
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 56,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 56,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 30,
      "to": 35
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 30,
      "to": 35
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 16,
      "to": 20
    },
    "right": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 16,
      "to": 20
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 35,
      "to": 43
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 35,
      "to": 43
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 20,
      "to": 25
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 20,
      "to": 25
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 157,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 157,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 31,
      "to": 35
    },
    "right": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 31,
      "to": 35
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 40,
      "to": 42
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 40,
      "to": 42
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 77,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 77,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 42,
      "to": 46
    },
    "right": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 42,
      "to": 46
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 43,
      "to": 53
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 43,
      "to": 53
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 36,
      "to": 49
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 36,
      "to": 49
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable {",
      "lineIdx": 18,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "struct VectorIfNotPushBackable {",
      "lineIdx": 18,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "#include <functional>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <functional>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 18,
      "to": 21
    },
    "right": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 18,
      "to": 21
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 35,
      "to": 42
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 35,
      "to": 42
    }
  }, {
    "left": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 43,
      "to": 53
    },
    "right": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 43,
      "to": 53
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 110,
      "to": 111
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 110,
      "to": 111
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 13,
      "to": 18
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 13,
      "to": 18
    }
  }, {
    "left": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 17,
      "to": 21
    },
    "right": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 17,
      "to": 21
    }
  }, {
    "left": {
      "line": "template<class C>",
      "lineIdx": 135,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "template<class C>",
      "lineIdx": 135,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 31,
      "to": 34
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 31,
      "to": 34
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 53,
      "to": 67
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 53,
      "to": 67
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 77,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 77,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 37,
      "to": 41
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 37,
      "to": 41
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 62,
      "to": 75
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 62,
      "to": 75
    }
  }, {
    "left": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "      return false;",
      "lineIdx": 151,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "      return false;",
      "lineIdx": 151,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 91,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 91,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "  C result;",
      "lineIdx": 125,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "  C result;",
      "lineIdx": 125,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 16,
      "to": 20
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 16,
      "to": 20
    }
  }, {
    "left": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 109,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "};",
      "lineIdx": 109,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 52,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "};",
      "lineIdx": 52,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 46,
      "to": 48
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 46,
      "to": 48
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 48,
      "to": 52
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 48,
      "to": 52
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 27,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 27,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 50,
      "to": 54
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 50,
      "to": 54
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 39,
      "to": 41
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 39,
      "to": 41
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 49,
      "to": 57
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 49,
      "to": 57
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 157,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 157,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable {",
      "lineIdx": 18,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "struct VectorIfNotPushBackable {",
      "lineIdx": 18,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 21,
      "to": 24
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 21,
      "to": 24
    }
  }, {
    "left": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 47,
      "to": 52
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 47,
      "to": 52
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 26,
      "to": 31
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 26,
      "to": 31
    }
  }, {
    "left": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 31,
      "to": 37
    },
    "right": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 31,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "struct Inserter<",
      "lineIdx": 113,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "struct Inserter<",
      "lineIdx": 113,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 62,
      "to": 68
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 62,
      "to": 68
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "  C result;",
      "lineIdx": 125,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  C result;",
      "lineIdx": 125,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 22,
      "to": 25
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 22,
      "to": 25
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 47,
      "to": 52
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 47,
      "to": 52
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 152,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 152,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 4,
      "to": 14
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 4,
      "to": 14
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 101,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 101,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 7,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 7,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include <algorithm>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <algorithm>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 24,
      "to": 28
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 24,
      "to": 28
    }
  }, {
    "left": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 44,
      "to": 50
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 44,
      "to": 50
    }
  }, {
    "left": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 6,
      "to": 14
    },
    "right": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 6,
      "to": 14
    }
  }, {
    "left": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 27,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 27,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 110,
      "to": 111
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 110,
      "to": 111
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 56,
      "to": 62
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 56,
      "to": 62
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 47,
      "to": 52
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 47,
      "to": 52
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 23,
      "to": 29
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 23,
      "to": 29
    }
  }, {
    "left": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 33,
      "to": 43
    },
    "right": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 33,
      "to": 43
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 144,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 144,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 46,
      "to": 56
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 46,
      "to": 56
    }
  }, {
    "left": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 58,
      "to": 61
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 58,
      "to": 61
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 72,
      "to": 78
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 72,
      "to": 78
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 82,
      "to": 90
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 82,
      "to": 90
    }
  }, {
    "left": {
      "line": "  return true;",
      "lineIdx": 154,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return true;",
      "lineIdx": 154,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include <algorithm>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <algorithm>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 10,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 10,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 54,
      "to": 60
    },
    "right": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 54,
      "to": 60
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 5,
      "to": 8
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 5,
      "to": 8
    }
  }, {
    "left": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 16,
      "to": 20
    },
    "right": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 16,
      "to": 20
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 10,
      "to": 15
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 10,
      "to": 15
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 19,
      "to": 33
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 19,
      "to": 33
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 44,
      "to": 50
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 44,
      "to": 50
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 42,
      "to": 47
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 42,
      "to": 47
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 20,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "};",
      "lineIdx": 20,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 97,
      "to": 110
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 97,
      "to": 110
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 37,
      "to": 39
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 37,
      "to": 39
    }
  }, {
    "left": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 25,
      "to": 28
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 25,
      "to": 28
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 13,
      "to": 23
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 13,
      "to": 23
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 80,
      "to": 85
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 80,
      "to": 85
    }
  }, {
    "left": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 67,
      "to": 71
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 67,
      "to": 71
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 37,
      "to": 40
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 37,
      "to": 40
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 9,
      "to": 16
    },
    "right": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 9,
      "to": 16
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 19,
      "to": 33
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 19,
      "to": 33
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 47,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 47,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 121,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "};",
      "lineIdx": 121,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 21,
      "to": 25
    },
    "right": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 21,
      "to": 25
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 21,
      "to": 23
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 21,
      "to": 23
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 54,
      "to": 62
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 54,
      "to": 62
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 2,
      "to": 4
    },
    "right": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 2,
      "to": 4
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 153,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 153,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 50,
      "to": 60
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 50,
      "to": 60
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "struct Reserver {",
      "lineIdx": 48,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "struct Reserver {",
      "lineIdx": 48,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 88,
      "to": 92
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 88,
      "to": 92
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 45,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "};",
      "lineIdx": 45,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 121,
      "to": 122
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 121,
      "to": 122
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 35,
      "to": 42
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 35,
      "to": 42
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 40,
      "to": 43
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 40,
      "to": 43
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 5,
      "to": 7
    },
    "right": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 5,
      "to": 7
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 167,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 167,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return ptr_flatten(lifted);",
      "lineIdx": 186,
      "from": 9,
      "to": 20
    },
    "right": {
      "line": "  return ptr_flatten(lifted);",
      "lineIdx": 186,
      "from": 9,
      "to": 20
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 56,
      "to": 60
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 56,
      "to": 60
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 54,
      "to": 57
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 54,
      "to": 57
    }
  }, {
    "left": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 20,
      "to": 25
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 20,
      "to": 25
    }
  }, {
    "left": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 77,
      "to": 85
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 77,
      "to": 85
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 62,
      "to": 67
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 62,
      "to": 67
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 37,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "};",
      "lineIdx": 37,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 86,
      "to": 96
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 86,
      "to": 96
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 33,
      "to": 43
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 33,
      "to": 43
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 129,
      "to": 134
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 129,
      "to": 134
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 17,
      "to": 22
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 47,
      "to": 52
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 47,
      "to": 52
    }
  }, {
    "left": {
      "line": "#include <functional>",
      "lineIdx": 2,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include <functional>",
      "lineIdx": 2,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "using std::unique_ptr;",
      "lineIdx": 14,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "using std::unique_ptr;",
      "lineIdx": 14,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 23,
      "to": 29
    },
    "right": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 23,
      "to": 29
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 40,
      "to": 52
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 40,
      "to": 52
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 176,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 176,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 7,
      "to": 19
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 7,
      "to": 19
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 132,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 132,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 77,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 77,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 17,
      "to": 21
    },
    "right": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 17,
      "to": 21
    }
  }, {
    "left": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 70,
      "to": 73
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 70,
      "to": 73
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 31,
      "to": 39
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 31,
      "to": 39
    }
  }, {
    "left": {
      "line": "struct Reserver {",
      "lineIdx": 48,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "struct Reserver {",
      "lineIdx": 48,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 19,
      "to": 23
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 19,
      "to": 23
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "template<class C>",
      "lineIdx": 135,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "template<class C>",
      "lineIdx": 135,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable {",
      "lineIdx": 18,
      "from": 7,
      "to": 30
    },
    "right": {
      "line": "struct VectorIfNotPushBackable {",
      "lineIdx": 18,
      "from": 7,
      "to": 30
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 7,
      "from": 10,
      "to": 23
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 7,
      "from": 10,
      "to": 23
    }
  }, {
    "left": {
      "line": "using boost::optional;",
      "lineIdx": 15,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "using boost::optional;",
      "lineIdx": 15,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 66,
      "to": 70
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 66,
      "to": 70
    }
  }, {
    "left": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "       > {",
      "lineIdx": 117,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "       > {",
      "lineIdx": 117,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "using std::unique_ptr;",
      "lineIdx": 14,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "using std::unique_ptr;",
      "lineIdx": 14,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 37,
      "to": 41
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 37,
      "to": 41
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "struct Reserver {",
      "lineIdx": 48,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "struct Reserver {",
      "lineIdx": 48,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 24,
      "to": 34
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 24,
      "to": 34
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 100,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 100,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 30,
      "to": 35
    },
    "right": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 30,
      "to": 35
    }
  }, {
    "left": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 56,
      "to": 60
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 56,
      "to": 60
    }
  }, {
    "left": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 33,
      "to": 35
    },
    "right": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 33,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "using boost::optional;",
      "lineIdx": 15,
      "from": 13,
      "to": 21
    },
    "right": {
      "line": "using boost::optional;",
      "lineIdx": 15,
      "from": 13,
      "to": 21
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "struct FlatmapResult {",
      "lineIdx": 33,
      "from": 7,
      "to": 20
    },
    "right": {
      "line": "struct FlatmapResult {",
      "lineIdx": 33,
      "from": 7,
      "to": 20
    }
  }, {
    "left": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "  C result;",
      "lineIdx": 125,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  C result;",
      "lineIdx": 125,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 31,
      "to": 34
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 31,
      "to": 34
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 162,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 162,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 128,
      "to": 129
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 128,
      "to": 129
    }
  }, {
    "left": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 77,
      "to": 87
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 77,
      "to": 87
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 46,
      "to": 54
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 46,
      "to": 54
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 27,
      "to": 31
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 27,
      "to": 31
    }
  }, {
    "left": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 23,
      "to": 28
    },
    "right": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 23,
      "to": 28
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 27,
      "to": 30
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 27,
      "to": 30
    }
  }, {
    "left": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 8,
      "to": 15
    },
    "right": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 8,
      "to": 15
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 111,
      "to": 112
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 111,
      "to": 112
    }
  }, {
    "left": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 47,
      "to": 55
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 47,
      "to": 55
    }
  }, {
    "left": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 60,
      "to": 65
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 60,
      "to": 65
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 11,
      "to": 20
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 11,
      "to": 20
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  return true;",
      "lineIdx": 143,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return true;",
      "lineIdx": 143,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 35,
      "to": 39
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 35,
      "to": 39
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 7,
      "to": 30
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 7,
      "to": 30
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 61,
      "to": 69
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 61,
      "to": 69
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 5,
      "to": 20
    },
    "right": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 5,
      "to": 20
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 157,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 157,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 13,
      "to": 23
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 13,
      "to": 23
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 101,
      "to": 106
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 101,
      "to": 106
    }
  }, {
    "left": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 13,
      "to": 26
    },
    "right": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 13,
      "to": 26
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 36,
      "to": 39
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 36,
      "to": 39
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 42,
      "to": 46
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 42,
      "to": 46
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 65,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 65,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "using boost::optional;",
      "lineIdx": 15,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "using boost::optional;",
      "lineIdx": 15,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 19,
      "to": 22
    },
    "right": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 19,
      "to": 22
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 83,
      "to": 88
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 83,
      "to": 88
    }
  }, {
    "left": {
      "line": "#include <map>",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <map>",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 121,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "};",
      "lineIdx": 121,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 66,
      "to": 76
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 66,
      "to": 76
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 75,
      "to": 80
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 75,
      "to": 80
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 5,
      "to": 11
    },
    "right": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 5,
      "to": 11
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "template<class C>",
      "lineIdx": 135,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<class C>",
      "lineIdx": 135,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 89,
      "to": 93
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 89,
      "to": 93
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 106,
      "to": 110
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 106,
      "to": 110
    }
  }, {
    "left": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 44,
      "to": 50
    },
    "right": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 44,
      "to": 50
    }
  }, {
    "left": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include <map>",
      "lineIdx": 6,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include <map>",
      "lineIdx": 6,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 10,
      "to": 23
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 10,
      "to": 23
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 18,
      "to": 32
    },
    "right": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 18,
      "to": 32
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 12,
      "to": 18
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 12,
      "to": 18
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 53,
      "to": 58
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 53,
      "to": 58
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 11,
      "to": 20
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 11,
      "to": 20
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include <map>",
      "lineIdx": 6,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include <map>",
      "lineIdx": 6,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 44,
      "to": 47
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 44,
      "to": 47
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 130,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 130,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 64,
      "to": 69
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 64,
      "to": 69
    }
  }, {
    "left": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 15,
      "to": 21
    },
    "right": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 15,
      "to": 21
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 112,
      "to": 117
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 112,
      "to": 117
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 187,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 187,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 68,
      "to": 76
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 68,
      "to": 76
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 32,
      "to": 37
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 32,
      "to": 37
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "using boost::optional;",
      "lineIdx": 15,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "using boost::optional;",
      "lineIdx": 15,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 20,
      "to": 29
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 20,
      "to": 29
    }
  }, {
    "left": {
      "line": "  return true;",
      "lineIdx": 154,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  return true;",
      "lineIdx": 154,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 131,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 131,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "using std::unique_ptr;",
      "lineIdx": 14,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "using std::unique_ptr;",
      "lineIdx": 14,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 43,
      "to": 51
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 43,
      "to": 51
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 41,
      "to": 44
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 41,
      "to": 44
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 65,
      "to": 73
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 65,
      "to": 73
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "      return false;",
      "lineIdx": 151,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      return false;",
      "lineIdx": 151,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 60,
      "to": 64
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 60,
      "to": 64
    }
  }, {
    "left": {
      "line": "template<class C>",
      "lineIdx": 135,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<class C>",
      "lineIdx": 135,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 132,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 132,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 120,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 120,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 43,
      "to": 53
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 43,
      "to": 53
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 38,
      "to": 46
    },
    "right": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 38,
      "to": 46
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 68,
      "to": 74
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 68,
      "to": 74
    }
  }, {
    "left": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 30,
      "to": 32
    },
    "right": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 30,
      "to": 32
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 118,
      "to": 121
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 118,
      "to": 121
    }
  }, {
    "left": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 83,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 83,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "#pragma once",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#pragma once",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 24,
      "to": 30
    },
    "right": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 24,
      "to": 30
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "public:",
      "lineIdx": 43,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "public:",
      "lineIdx": 43,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 7,
      "to": 20
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 7,
      "to": 20
    }
  }, {
    "left": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 17,
      "to": 29
    },
    "right": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 17,
      "to": 29
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 30,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "};",
      "lineIdx": 30,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "  return o2;",
      "lineIdx": 161,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  return o2;",
      "lineIdx": 161,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 21,
      "to": 26
    },
    "right": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 21,
      "to": 26
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 50,
      "to": 54
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 50,
      "to": 54
    }
  }, {
    "left": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 25,
      "to": 29
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 25,
      "to": 29
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "struct MapResult {",
      "lineIdx": 40,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "struct MapResult {",
      "lineIdx": 40,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include <algorithm>",
      "lineIdx": 3,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "#include <algorithm>",
      "lineIdx": 3,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 20,
      "to": 25
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 20,
      "to": 25
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 32,
      "to": 35
    },
    "right": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 32,
      "to": 35
    }
  }, {
    "left": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 26,
      "to": 32
    },
    "right": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 26,
      "to": 32
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 28,
      "to": 33
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 28,
      "to": 33
    }
  }, {
    "left": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "struct Inserter<",
      "lineIdx": 113,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "struct Inserter<",
      "lineIdx": 113,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "using std::unique_ptr;",
      "lineIdx": 14,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using std::unique_ptr;",
      "lineIdx": 14,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 22,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 22,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 13,
      "to": 22
    },
    "right": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 13,
      "to": 22
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  return true;",
      "lineIdx": 154,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  return true;",
      "lineIdx": 154,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 66,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 66,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 24,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 24,
      "to": 30
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 24,
      "to": 30
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 19,
      "to": 42
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 19,
      "to": 42
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 76,
      "to": 80
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 76,
      "to": 80
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 109,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "};",
      "lineIdx": 109,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include <functional>",
      "lineIdx": 2,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include <functional>",
      "lineIdx": 2,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 64,
      "to": 67
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 64,
      "to": 67
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 22,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 22,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "#include <algorithm>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <algorithm>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 133,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 133,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 91,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 91,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  return o2;",
      "lineIdx": 161,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return o2;",
      "lineIdx": 161,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 64,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 64,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 8,
      "to": 22
    },
    "right": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 8,
      "to": 22
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 25,
      "to": 33
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 25,
      "to": 33
    }
  }, {
    "left": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 11,
      "to": 20
    },
    "right": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 11,
      "to": 20
    }
  }, {
    "left": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 169,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 169,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 141,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 141,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 0,
      "to": 7
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 0,
      "to": 7
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 11,
      "to": 24
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 11,
      "to": 24
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 24,
      "to": 30
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 24,
      "to": 30
    }
  }, {
    "left": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 185,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  });",
      "lineIdx": 185,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 21,
      "to": 26
    },
    "right": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 21,
      "to": 26
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 50,
      "to": 54
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 50,
      "to": 54
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 62,
      "to": 67
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 62,
      "to": 67
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 104,
      "to": 105
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 104,
      "to": 105
    }
  }, {
    "left": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "using std::unique_ptr;",
      "lineIdx": 14,
      "from": 11,
      "to": 21
    },
    "right": {
      "line": "using std::unique_ptr;",
      "lineIdx": 14,
      "from": 11,
      "to": 21
    }
  }, {
    "left": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 97,
      "to": 102
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 97,
      "to": 102
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 12,
      "to": 18
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 12,
      "to": 18
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 37,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "};",
      "lineIdx": 37,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 65,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 65,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 25,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "};",
      "lineIdx": 25,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 5,
      "to": 8
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 5,
      "to": 8
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 5,
      "to": 12
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 5,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 42,
      "to": 52
    },
    "right": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 42,
      "to": 52
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 28,
      "to": 33
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 28,
      "to": 33
    }
  }, {
    "left": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 96,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 96,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 26,
      "to": 34
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 26,
      "to": 34
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 52,
      "to": 57
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 52,
      "to": 57
    }
  }, {
    "left": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 23,
      "to": 29
    },
    "right": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 23,
      "to": 29
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 32,
      "to": 39
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 32,
      "to": 39
    }
  }, {
    "left": {
      "line": "struct MapResult {",
      "lineIdx": 40,
      "from": 7,
      "to": 16
    },
    "right": {
      "line": "struct MapResult {",
      "lineIdx": 40,
      "from": 7,
      "to": 16
    }
  }, {
    "left": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 43,
      "to": 48
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 43,
      "to": 48
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 41,
      "to": 46
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 41,
      "to": 46
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 33,
      "to": 39
    },
    "right": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 33,
      "to": 39
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 91,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 91,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return true;",
      "lineIdx": 143,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  return true;",
      "lineIdx": 143,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 8,
      "to": 10
    },
    "right": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 8,
      "to": 10
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 15,
      "to": 20
    },
    "right": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 15,
      "to": 20
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 22,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 22,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 181,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 181,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "public:",
      "lineIdx": 43,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "public:",
      "lineIdx": 43,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 60,
      "to": 66
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 60,
      "to": 66
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 55,
      "to": 64
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 55,
      "to": 64
    }
  }, {
    "left": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 23,
      "to": 31
    },
    "right": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 23,
      "to": 31
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "struct Inserter {",
      "lineIdx": 105,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "struct Inserter {",
      "lineIdx": 105,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "private:",
      "lineIdx": 41,
      "from": 0,
      "to": 7
    },
    "right": {
      "line": "private:",
      "lineIdx": 41,
      "from": 0,
      "to": 7
    }
  }, {
    "left": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 15,
      "to": 20
    },
    "right": {
      "line": "//return value doesn't has args because the allocator has the wrong template argument",
      "lineIdx": 80,
      "from": 15,
      "to": 20
    }
  }, {
    "left": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "bool isUniqueOrEmpty(const C& c) {",
      "lineIdx": 136,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 59,
      "to": 64
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 59,
      "to": 64
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 34,
      "to": 37
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 34,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include <functional>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <functional>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 27,
      "to": 32
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 27,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 21,
      "to": 24
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 21,
      "to": 24
    }
  }, {
    "left": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  result.reserve(unsignedSize);",
      "lineIdx": 61,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 42,
      "to": 46
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 42,
      "to": 46
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 45,
      "to": 48
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 45,
      "to": 48
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 20,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "};",
      "lineIdx": 20,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "private:",
      "lineIdx": 41,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "private:",
      "lineIdx": 41,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 85,
      "to": 90
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 85,
      "to": 90
    }
  }, {
    "left": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 91,
      "to": 95
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 91,
      "to": 95
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 22,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 22,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 30,
      "to": 37
    },
    "right": {
      "line": "    for(const auto& tempElem: tempRes) {",
      "lineIdx": 87,
      "from": 30,
      "to": 37
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 18,
      "to": 25
    },
    "right": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 18,
      "to": 25
    }
  }, {
    "left": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return true;",
      "lineIdx": 143,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  return true;",
      "lineIdx": 143,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 185,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  });",
      "lineIdx": 185,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 157,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 157,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 56,
      "to": 61
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 56,
      "to": 61
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 22,
      "to": 28
    },
    "right": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 22,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return ptr_flatten(lifted);",
      "lineIdx": 186,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return ptr_flatten(lifted);",
      "lineIdx": 186,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<class C>",
      "lineIdx": 135,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "template<class C>",
      "lineIdx": 135,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return o2;",
      "lineIdx": 161,
      "from": 9,
      "to": 11
    },
    "right": {
      "line": "  return o2;",
      "lineIdx": 161,
      "from": 9,
      "to": 11
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 89,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 89,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include \"asserts.h\"",
      "lineIdx": 8,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 77,
      "to": 87
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 77,
      "to": 87
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 70,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 70,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 16,
      "to": 23
    },
    "right": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 16,
      "to": 23
    }
  }, {
    "left": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 12,
      "to": 15
    },
    "right": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 12,
      "to": 15
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 35,
      "to": 38
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 35,
      "to": 38
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  VERIFY(size >= 0);",
      "lineIdx": 59,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 18,
      "to": 21
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 18,
      "to": 21
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 108,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 108,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 76,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 76,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 10,
      "to": 14
    },
    "right": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 10,
      "to": 14
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 36,
      "to": 40
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 36,
      "to": 40
    }
  }, {
    "left": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 56,
      "to": 60
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 56,
      "to": 60
    }
  }, {
    "left": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 38,
      "to": 47
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 38,
      "to": 47
    }
  }, {
    "left": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 59,
      "to": 63
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 59,
      "to": 63
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    if(freq[elem] > 1) return false;",
      "lineIdx": 140,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 49,
      "to": 55
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 49,
      "to": 55
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "using boost::optional;",
      "lineIdx": 15,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "using boost::optional;",
      "lineIdx": 15,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 27,
      "to": 32
    },
    "right": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 27,
      "to": 32
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 22,
      "to": 25
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 22,
      "to": 25
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "#pragma once",
      "lineIdx": 0,
      "from": 1,
      "to": 7
    },
    "right": {
      "line": "#pragma once",
      "lineIdx": 0,
      "from": 1,
      "to": 7
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 83,
      "to": 86
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 83,
      "to": 86
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  vector<typename FunctionTraits<OpType>::ReturnType> result;",
      "lineIdx": 57,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 52,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "};",
      "lineIdx": 52,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 70,
      "to": 83
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 70,
      "to": 83
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 54,
      "to": 59
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 54,
      "to": 59
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 43,
      "to": 47
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 43,
      "to": 47
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 27,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 27,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 68,
      "to": 74
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 68,
      "to": 74
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 10,
      "from": 10,
      "to": 21
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 10,
      "from": 10,
      "to": 21
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 20,
      "to": 25
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 20,
      "to": 25
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 50,
      "to": 63
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 50,
      "to": 63
    }
  }, {
    "left": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 34,
      "to": 40
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 34,
      "to": 40
    }
  }, {
    "left": {
      "line": "  return ptr_flatten(lifted);",
      "lineIdx": 186,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  return ptr_flatten(lifted);",
      "lineIdx": 186,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 25,
      "to": 35
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 25,
      "to": 35
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 2,
      "to": 12
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 2,
      "to": 12
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 79,
      "to": 85
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 79,
      "to": 85
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 27,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 27,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 94,
      "to": 102
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 94,
      "to": 102
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 19,
      "to": 42
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 19,
      "to": 42
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include <map>",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <map>",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 19,
      "to": 41
    },
    "right": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 19,
      "to": 41
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "#pragma once",
      "lineIdx": 0,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "#pragma once",
      "lineIdx": 0,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 6,
      "to": 10
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 6,
      "to": 10
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 7,
      "to": 30
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 7,
      "to": 30
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 12,
      "to": 15
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 12,
      "to": 15
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 113,
      "to": 128
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 113,
      "to": 128
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 157,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 157,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 106,
      "to": 107
    },
    "right": {
      "line": "  std::sort(lifted.begin(), lifted.end(), [lessThan](const unique_ptr<T>& left, const unique_ptr<T>& right) {",
      "lineIdx": 183,
      "from": 106,
      "to": 107
    }
  }, {
    "left": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 14,
      "to": 22
    },
    "right": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 14,
      "to": 22
    }
  }, {
    "left": {
      "line": "struct Inserter {",
      "lineIdx": 105,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "struct Inserter {",
      "lineIdx": 105,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 53,
      "to": 61
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 53,
      "to": 61
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 24,
      "to": 30
    },
    "right": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 24,
      "to": 30
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 32,
      "to": 36
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 32,
      "to": 36
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 54,
      "to": 65
    },
    "right": {
      "line": "  typedef typename IntermediaryResultType::value_type EndElemType;",
      "lineIdx": 35,
      "from": 54,
      "to": 65
    }
  }, {
    "left": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 5,
      "to": 13
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 5,
      "to": 13
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 65,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 65,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 25,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "};",
      "lineIdx": 25,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 34,
      "to": 49
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 34,
      "to": 49
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 27,
      "to": 30
    },
    "right": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 27,
      "to": 30
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 155,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 155,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "       > {",
      "lineIdx": 117,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "       > {",
      "lineIdx": 117,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "        enable_if_t<HasInsert<C<Args...>>::value, void>",
      "lineIdx": 116,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "struct FlatmapResult {",
      "lineIdx": 33,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "struct FlatmapResult {",
      "lineIdx": 33,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 101,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 101,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 34,
      "to": 44
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 34,
      "to": 44
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "using boost::optional;",
      "lineIdx": 15,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using boost::optional;",
      "lineIdx": 15,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "  return ptr_flatten(lifted);",
      "lineIdx": 186,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  return ptr_flatten(lifted);",
      "lineIdx": 186,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "  return map(collection, [](const unique_ptr<T>& elem){ return T(*elem); });",
      "lineIdx": 175,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 30,
      "to": 35
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 30,
      "to": 35
    }
  }, {
    "left": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    result.insert(srcItem);",
      "lineIdx": 99,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 52,
      "to": 57
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 52,
      "to": 57
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  for(const std::pair<Key, Value>& srcItem: src) {",
      "lineIdx": 98,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 75,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 54,
      "to": 76
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType IntermediaryResultType;",
      "lineIdx": 34,
      "from": 54,
      "to": 76
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 61,
      "to": 65
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 61,
      "to": 65
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 26,
      "to": 36
    },
    "right": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 26,
      "to": 36
    }
  }, {
    "left": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 10,
      "to": 14
    },
    "right": {
      "line": "        C<Args...>,",
      "lineIdx": 114,
      "from": 10,
      "to": 14
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CSrc, ElemType>::Value ResultType;",
      "lineIdx": 44,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "  auto size = src.size();",
      "lineIdx": 58,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "bool forall(const C& c, OpType cond) {",
      "lineIdx": 148,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 56,
      "to": 60
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 56,
      "to": 60
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 112,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 21,
      "to": 24
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 127,
      "from": 21,
      "to": 24
    }
  }, {
    "left": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "      inserter.insert(result, s);",
      "lineIdx": 129,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 47,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 47,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<template <class...> class CSrc, class... Args, class OpType>",
      "lineIdx": 81,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 102,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 102,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::unordered_map, T> {",
      "lineIdx": 28,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 47,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 47,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 62,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 16,
      "to": 19
    },
    "right": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 16,
      "to": 19
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 68,
      "to": 80
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 68,
      "to": 80
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  Inserter<C, typename C::value_type> inserter;",
      "lineIdx": 126,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "template<class C, class T, class Enable = void>",
      "lineIdx": 104,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 53,
      "to": 61
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 53,
      "to": 61
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 51,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 51,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 21
    },
    "right": {
      "line": "#include \"make_unique.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  auto unsignedSize = static_cast<make_unsigned_t<decltype(size)>>(size); //to get rid of warning",
      "lineIdx": 60,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 59,
      "to": 61
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 59,
      "to": 61
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 123,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 32,
      "to": 38
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 32,
      "to": 38
    }
  }, {
    "left": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  for(const auto& s: src) {",
      "lineIdx": 74,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "auto flatMap(const CSrc<Args...>& src, OpType op) -> typename FlatmapResult<CSrc, decltype(op)>::EndResultType",
      "lineIdx": 82,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 16,
      "to": 24
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 16,
      "to": 24
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  OptionalReserve::call(result, src.size());",
      "lineIdx": 73,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 18,
      "to": 25
    },
    "right": {
      "line": "  for(const auto& srcItem: src) {",
      "lineIdx": 85,
      "from": 18,
      "to": 25
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 174,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 174,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    result.push_back(op(s));",
      "lineIdx": 63,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 50,
      "to": 61
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 50,
      "to": 61
    }
  }, {
    "left": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 46,
      "to": 59
    },
    "right": {
      "line": "  typename FlatmapResult<CSrc, decltype(op)>::EndResultType result;",
      "lineIdx": 84,
      "from": 46,
      "to": 59
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 45,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "};",
      "lineIdx": 45,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "template <template <class...> class CSrc, class OpType>",
      "lineIdx": 39,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "        T,",
      "lineIdx": 115,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "        T,",
      "lineIdx": 115,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 24
    },
    "right": {
      "line": "#include \"template_utils.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 24
    }
  }, {
    "left": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 11,
      "to": 19
    },
    "right": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 11,
      "to": 19
    }
  }, {
    "left": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"c++14type_traits.h\"",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  if(o1.is_initialized()) return o1;",
      "lineIdx": 159,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  typedef conditional_t<HasPushback<C<T>, void(const T&)>::value, C<T>, vector<T>> Value;",
      "lineIdx": 19,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  return ptr_flatten(lifted);",
      "lineIdx": 186,
      "from": 21,
      "to": 27
    },
    "right": {
      "line": "  return ptr_flatten(lifted);",
      "lineIdx": 186,
      "from": 21,
      "to": 27
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args, class LessThanType = std::less<T>>",
      "lineIdx": 179,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  typedef typename FunctionTraits<OpType>::ReturnType ElemType;",
      "lineIdx": 42,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 6,
      "to": 10
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 6,
      "to": 10
    }
  }, {
    "left": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "C filter(const C& src, OpType op) {",
      "lineIdx": 124,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 41,
      "to": 46
    },
    "right": {
      "line": "optional<T> orElse(const optional<T> o1, const optional<T> o2) {",
      "lineIdx": 158,
      "from": 41,
      "to": 46
    }
  }, {
    "left": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    if (op(s) == true) {",
      "lineIdx": 128,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    if(cond(elem) == false) {",
      "lineIdx": 150,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  typedef vector<T> Value;",
      "lineIdx": 29,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 22,
      "to": 28
    },
    "right": {
      "line": "  MapType<Key, Value> result;",
      "lineIdx": 97,
      "from": 22,
      "to": 28
    }
  }, {
    "left": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  E<unique_ptr<T>> lifted = ptr_lift(col);",
      "lineIdx": 182,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "//for those who have an insert method",
      "lineIdx": 111,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 22,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 22,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  typename MapResult<C, OpType>::ResultType result;",
      "lineIdx": 71,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  std::unordered_map<typename C::value_type, int> freq;",
      "lineIdx": 137,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "template<template <class...> class C, class T>",
      "lineIdx": 17,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template<template <class...> class C, class T, class... Args>",
      "lineIdx": 172,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 70,
      "to": 78
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 70,
      "to": 78
    }
  }, {
    "left": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 37,
      "to": 43
    },
    "right": {
      "line": "auto map(const C& src, OpType op) -> vector<typename FunctionTraits<OpType>::ReturnType>",
      "lineIdx": 55,
      "from": 37,
      "to": 43
    }
  }, {
    "left": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 26,
      "to": 28
    },
    "right": {
      "line": "    const auto& tempRes = op(srcItem);",
      "lineIdx": 86,
      "from": 26,
      "to": 28
    }
  }, {
    "left": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    coll.insert(obj);",
      "lineIdx": 119,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "struct VectorIfNotPushBackable<std::map, T> {",
      "lineIdx": 23,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "MapType<Key, Value> toMap(const CSrc<std::pair<Key, Value>, Args...>& src)",
      "lineIdx": 95,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 43,
      "to": 48
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 43,
      "to": 48
    }
  }, {
    "left": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 20,
      "to": 25
    },
    "right": {
      "line": "template <template <class...> class CDest, class OpType>",
      "lineIdx": 32,
      "from": 20,
      "to": 25
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 24,
      "to": 30
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 24,
      "to": 30
    }
  }, {
    "left": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 6,
      "to": 10
    },
    "right": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 6,
      "to": 10
    }
  }, {
    "left": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "auto map(const C<Args...>& src, OpType op) -> typename MapResult<C, OpType>::ResultType",
      "lineIdx": 69,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  return ptr_flatten(lifted);",
      "lineIdx": 186,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  return ptr_flatten(lifted);",
      "lineIdx": 186,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 69,
      "to": 73
    },
    "right": {
      "line": "E<T> ptr_sort(const E<T, Args...>& col, LessThanType lessThan = std::less<T>())",
      "lineIdx": 180,
      "from": 69,
      "to": 73
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 149,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 147,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    coll.push_back(obj);",
      "lineIdx": 107,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 47,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 47,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "  for(auto elem: c) {",
      "lineIdx": 138,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 132,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 132,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 26,
      "to": 31
    },
    "right": {
      "line": "E<unique_ptr<T>> ptr_lift(const E<T, Args...> collection)",
      "lineIdx": 166,
      "from": 26,
      "to": 31
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 11,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    ++freq[elem];",
      "lineIdx": 139,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 28,
      "to": 33
    },
    "right": {
      "line": "    return lessThan(*left, *right);",
      "lineIdx": 184,
      "from": 28,
      "to": 33
    }
  }, {
    "left": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    obj.reserve(size);",
      "lineIdx": 50,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 123,
      "to": 128
    },
    "right": {
      "line": "template<template <class...> class MapType = std::unordered_map, template <class...> class CSrc, class... Args, class Key, class Value>",
      "lineIdx": 94,
      "from": 123,
      "to": 128
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 26,
      "to": 30
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 26,
      "to": 30
    }
  }, {
    "left": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<template <class...> class C, class OpType, class... Args>",
      "lineIdx": 68,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<class C, class OpType>",
      "lineIdx": 54,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  static void call(T& obj,typename T::size_type size) {",
      "lineIdx": 49,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 47,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 47,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 40,
      "to": 44
    },
    "right": {
      "line": "C<T> ptr_flatten(const C<unique_ptr<T>, Args...>& collection)",
      "lineIdx": 173,
      "from": 40,
      "to": 44
    }
  }, {
    "left": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  void insert(C<Args...>& coll, const T& obj) {",
      "lineIdx": 118,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "      result.push_back(tempElem);",
      "lineIdx": 88,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "template<template <class...> class E, class T, class... Args>",
      "lineIdx": 165,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 43,
      "to": 48
    },
    "right": {
      "line": "  typedef typename VectorIfNotPushBackable<CDest, EndElemType>::Value EndResultType;",
      "lineIdx": 36,
      "from": 43,
      "to": 48
    }
  }, {
    "left": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  void insert(C& coll, const T& obj) {",
      "lineIdx": 106,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 51,
      "to": 62
    },
    "right": {
      "line": "  return map(collection, [](const T& elem){ return make_unique<T>(elem); });",
      "lineIdx": 168,
      "from": 51,
      "to": 62
    }
  }, {
    "left": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  typedef conditional_t<HasReserve<decltype(result)>::value, Reserver<decltype(result)>, NoOp<decltype(result)>> OptionalReserve;",
      "lineIdx": 72,
      "from": 53,
      "to": 54
    }
  }]
}