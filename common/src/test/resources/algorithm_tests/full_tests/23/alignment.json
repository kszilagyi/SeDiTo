{
  "matches": [{
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 56,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 75,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 20,
      "to": 28
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 20,
      "to": 28
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 24,
      "to": 33
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 24,
      "to": 33
    }
  }, {
    "left": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 29,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 36,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 79,
      "from": 38,
      "to": 48
    },
    "right": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 98,
      "from": 38,
      "to": 48
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 59,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 78,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 56,
      "from": 30,
      "to": 38
    },
    "right": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 75,
      "from": 30,
      "to": 38
    }
  }, {
    "left": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 75,
      "from": 13,
      "to": 22
    },
    "right": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 94,
      "from": 13,
      "to": 22
    }
  }, {
    "left": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 79,
      "from": 50,
      "to": 55
    },
    "right": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 98,
      "from": 50,
      "to": 55
    }
  }, {
    "left": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 76,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 95,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 48,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 67,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 28,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 35,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 47,
      "to": 49
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 47,
      "to": 49
    }
  }, {
    "left": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 56,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 75,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 21,
      "from": 19,
      "to": 47
    },
    "right": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 27,
      "from": 19,
      "to": 47
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 74,
      "to": 76
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 74,
      "to": 76
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 22,
      "from": 11,
      "to": 16
    },
    "right": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 28,
      "from": 11,
      "to": 16
    }
  }, {
    "left": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 76,
      "from": 34,
      "to": 42
    },
    "right": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 95,
      "from": 34,
      "to": 42
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 20,
      "to": 29
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 20,
      "to": 29
    }
  }, {
    "left": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 28,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 35,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 76,
      "to": 80
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 76,
      "to": 80
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 61,
      "to": 63
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 61,
      "to": 63
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 111,
      "to": 112
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 111,
      "to": 112
    }
  }, {
    "left": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 79,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 98,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 52,
      "from": 50,
      "to": 55
    },
    "right": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 71,
      "from": 50,
      "to": 55
    }
  }, {
    "left": {
      "line": "      }",
      "lineIdx": 37,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "      } /*else {",
      "lineIdx": 48,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 16,
      "to": 26
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 16,
      "to": 26
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 50,
      "to": 54
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 50,
      "to": 54
    }
  }, {
    "left": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 17,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 23,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 59,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 78,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 69,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 88,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 21,
      "from": 49,
      "to": 54
    },
    "right": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 27,
      "from": 49,
      "to": 54
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 52,
      "to": 60
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 52,
      "to": 60
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 78,
      "from": 24,
      "to": 27
    },
    "right": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 97,
      "from": 24,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 10,
      "to": 38
    },
    "right": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 10,
      "to": 38
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 39,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  });",
      "lineIdx": 58,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 84,
      "to": 87
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 84,
      "to": 87
    }
  }, {
    "left": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 26,
      "from": 16,
      "to": 29
    },
    "right": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 33,
      "from": 16,
      "to": 29
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "TwoSidedDiffWidget::TwoSidedDiffWidget()",
      "lineIdx": 12,
      "from": 20,
      "to": 38
    },
    "right": {
      "line": "TwoSidedDiffWidget::TwoSidedDiffWidget()",
      "lineIdx": 18,
      "from": 20,
      "to": 38
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 68,
      "to": 77
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 68,
      "to": 77
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 69,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 88,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 123,
      "to": 125
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 123,
      "to": 125
    }
  }, {
    "left": {
      "line": "  vector<OneToOneMatch> matches;",
      "lineIdx": 54,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<OneToOneMatch> matches;",
      "lineIdx": 73,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 44,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 63,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 61,
      "to": 64
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 61,
      "to": 64
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 47,
      "to": 56
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 47,
      "to": 56
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 78,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 97,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "      if(matchInfo) {",
      "lineIdx": 61,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "      if(matchInfo) {",
      "lineIdx": 80,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 63,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 82,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 21,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 27,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 56,
      "from": 10,
      "to": 19
    },
    "right": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 75,
      "from": 10,
      "to": 19
    }
  }, {
    "left": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 17,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 23,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 59,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 78,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 63,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 82,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 75,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 94,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 35,
      "to": 41
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 35,
      "to": 41
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 44,
      "to": 46
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 44,
      "to": 46
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 56,
      "to": 64
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 56,
      "to": 64
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 78,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 97,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 41,
      "to": 49
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 41,
      "to": 49
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 18,
      "to": 26
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 18,
      "to": 26
    }
  }, {
    "left": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 16,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 22,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 16,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 22,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 47,
      "to": 56
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 47,
      "to": 56
    }
  }, {
    "left": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 28,
      "to": 37
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 28,
      "to": 37
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 43,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 62,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 48,
      "from": 36,
      "to": 41
    },
    "right": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 67,
      "from": 36,
      "to": 41
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 58,
      "to": 60
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 58,
      "to": 60
    }
  }, {
    "left": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 48,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 67,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 56,
      "from": 40,
      "to": 45
    },
    "right": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 75,
      "from": 40,
      "to": 45
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 12,
      "to": 19
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 12,
      "to": 19
    }
  }, {
    "left": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 55,
      "from": 21,
      "to": 28
    },
    "right": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 74,
      "from": 21,
      "to": 28
    }
  }, {
    "left": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 79,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 98,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 17,
      "from": 29,
      "to": 36
    },
    "right": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 23,
      "from": 29,
      "to": 36
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 65,
      "to": 72
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 65,
      "to": 72
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 69,
      "from": 28,
      "to": 39
    },
    "right": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 88,
      "from": 28,
      "to": 39
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 30,
      "to": 38
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 30,
      "to": 38
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 76,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 95,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 43,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 62,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 71,
      "to": 73
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 71,
      "to": 73
    }
  }, {
    "left": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 63,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 82,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 22,
      "to": 31
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 22,
      "to": 31
    }
  }, {
    "left": {
      "line": "  vector<OneToOneMatch> matches;",
      "lineIdx": 54,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<OneToOneMatch> matches;",
      "lineIdx": 73,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 70,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 89,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 59,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 78,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 51,
      "to": 63
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 51,
      "to": 63
    }
  }, {
    "left": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 75,
      "from": 2,
      "to": 12
    },
    "right": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 94,
      "from": 2,
      "to": 12
    }
  }, {
    "left": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 17,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 23,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 27,
      "from": 37,
      "to": 39
    },
    "right": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 34,
      "from": 37,
      "to": 39
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 17,
      "from": 19,
      "to": 27
    },
    "right": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 23,
      "from": 19,
      "to": 27
    }
  }, {
    "left": {
      "line": "  vector<OneToOneMatch> matches;",
      "lineIdx": 54,
      "from": 24,
      "to": 31
    },
    "right": {
      "line": "  vector<OneToOneMatch> matches;",
      "lineIdx": 73,
      "from": 24,
      "to": 31
    }
  }, {
    "left": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 17,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 23,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 18,
      "to": 35
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 18,
      "to": 35
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 47,
      "to": 50
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 47,
      "to": 50
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 91,
      "to": 93
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 91,
      "to": 93
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 25,
      "to": 29
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 25,
      "to": 29
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 50,
      "to": 52
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 50,
      "to": 52
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 97,
      "to": 107
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 97,
      "to": 107
    }
  }, {
    "left": {
      "line": "TwoSidedDiffWidget::TwoSidedDiffWidget()",
      "lineIdx": 12,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "TwoSidedDiffWidget::TwoSidedDiffWidget()",
      "lineIdx": 18,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 69,
      "from": 9,
      "to": 26
    },
    "right": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 88,
      "from": 9,
      "to": 26
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 31,
      "to": 35
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 31,
      "to": 35
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 63,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 82,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 20,
      "to": 24
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 20,
      "to": 24
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 72,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 91,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "          }",
      "lineIdx": 33,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "          }",
      "lineIdx": 44,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 43,
      "to": 52
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 43,
      "to": 52
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 39,
      "to": 47
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 39,
      "to": 47
    }
  }, {
    "left": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 59,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 78,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 20,
      "to": 25
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 20,
      "to": 25
    }
  }, {
    "left": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 27,
      "from": 18,
      "to": 21
    },
    "right": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 34,
      "from": 18,
      "to": 21
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 8,
      "to": 18
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 8,
      "to": 18
    }
  }, {
    "left": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 19,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 25,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 75,
      "from": 43,
      "to": 47
    },
    "right": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 94,
      "from": 43,
      "to": 47
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 55,
      "to": 63
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 55,
      "to": 63
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 40,
      "to": 46
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 40,
      "to": 46
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 13,
      "to": 21
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 13,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 55,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 74,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 21,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 27,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 65,
      "to": 70
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 65,
      "to": 70
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 43,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 62,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 22,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 28,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 110,
      "to": 111
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 110,
      "to": 111
    }
  }, {
    "left": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 78,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 97,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 14,
      "to": 16
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 14,
      "to": 16
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 6,
      "to": 16
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 6,
      "to": 16
    }
  }, {
    "left": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 59,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 78,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 77,
      "to": 83
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 77,
      "to": 83
    }
  }, {
    "left": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 29,
      "from": 71,
      "to": 76
    },
    "right": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 36,
      "from": 71,
      "to": 76
    }
  }, {
    "left": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 79,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 98,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 55,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 74,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 12,
      "to": 15
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 12,
      "to": 15
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 50,
      "to": 56
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 50,
      "to": 56
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 28,
      "from": 59,
      "to": 67
    },
    "right": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 35,
      "from": 59,
      "to": 67
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 28,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 35,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 21,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 27,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 24,
      "to": 31
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 24,
      "to": 31
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 49,
      "to": 77
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 49,
      "to": 77
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 66,
      "to": 71
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 66,
      "to": 71
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 17,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 23,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 55,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 74,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 18,
      "to": 26
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 18,
      "to": 26
    }
  }, {
    "left": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 26,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 33,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 78,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 97,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 27,
      "from": 53,
      "to": 59
    },
    "right": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 34,
      "from": 53,
      "to": 59
    }
  }, {
    "left": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 75,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 94,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 16,
      "to": 21
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 16,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 72,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 91,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 29,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 36,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 26,
      "to": 51
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 26,
      "to": 51
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 69,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 88,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 40,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 59,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 55,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 74,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 78,
      "from": 37,
      "to": 46
    },
    "right": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 97,
      "from": 37,
      "to": 46
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 47,
      "to": 56
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 47,
      "to": 56
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 28,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 35,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 49,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 68,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 82,
      "to": 91
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 82,
      "to": 91
    }
  }, {
    "left": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 79,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 98,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 48,
      "from": 42,
      "to": 48
    },
    "right": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 67,
      "from": 42,
      "to": 48
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 17,
      "to": 21
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 17,
      "to": 21
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 102,
      "to": 108
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 102,
      "to": 108
    }
  }, {
    "left": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 79,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 98,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 19,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 25,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 78,
      "from": 12,
      "to": 23
    },
    "right": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 97,
      "from": 12,
      "to": 23
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 51,
      "to": 55
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 51,
      "to": 55
    }
  }, {
    "left": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 16,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 22,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 26,
      "from": 12,
      "to": 15
    },
    "right": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 33,
      "from": 12,
      "to": 15
    }
  }, {
    "left": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 16,
      "from": 27,
      "to": 31
    },
    "right": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 22,
      "from": 27,
      "to": 31
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 29,
      "from": 30,
      "to": 49
    },
    "right": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 36,
      "from": 30,
      "to": 49
    }
  }, {
    "left": {
      "line": "TwoSidedDiffWidget::TwoSidedDiffWidget()",
      "lineIdx": 12,
      "from": 0,
      "to": 18
    },
    "right": {
      "line": "TwoSidedDiffWidget::TwoSidedDiffWidget()",
      "lineIdx": 18,
      "from": 0,
      "to": 18
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 69,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 88,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 129,
      "to": 134
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 129,
      "to": 134
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 27,
      "from": 43,
      "to": 47
    },
    "right": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 34,
      "from": 43,
      "to": 47
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 24,
      "to": 37
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 24,
      "to": 37
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 61,
      "to": 65
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 61,
      "to": 65
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 43,
      "from": 5,
      "to": 23
    },
    "right": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 62,
      "from": 5,
      "to": 23
    }
  }, {
    "left": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 19,
      "from": 6,
      "to": 8
    },
    "right": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 25,
      "from": 6,
      "to": 8
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 106,
      "to": 117
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 106,
      "to": 117
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 80,
      "to": 83
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 80,
      "to": 83
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 26,
      "to": 39
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 26,
      "to": 39
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 43,
      "from": 79,
      "to": 104
    },
    "right": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 62,
      "from": 79,
      "to": 104
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 40,
      "to": 42
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 40,
      "to": 42
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 116,
      "to": 122
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 116,
      "to": 122
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 19,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 25,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 50,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 69,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 19,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 25,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 23,
      "to": 32
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 23,
      "to": 32
    }
  }, {
    "left": {
      "line": "  vector<OneToOneMatch> matches;",
      "lineIdx": 54,
      "from": 9,
      "to": 22
    },
    "right": {
      "line": "  vector<OneToOneMatch> matches;",
      "lineIdx": 73,
      "from": 9,
      "to": 22
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 72,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 91,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 72,
      "from": 25,
      "to": 43
    },
    "right": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 91,
      "from": 25,
      "to": 43
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 52,
      "to": 56
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 52,
      "to": 56
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 38,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 51,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 52,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 71,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "      if(matchInfo) {",
      "lineIdx": 61,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "      if(matchInfo) {",
      "lineIdx": 80,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 72,
      "to": 85
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 72,
      "to": 85
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 22,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 28,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 83,
      "to": 87
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 83,
      "to": 87
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 48,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 67,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 10,
      "to": 15
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 10,
      "to": 15
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 43,
      "to": 49
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 43,
      "to": 49
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 67,
      "to": 72
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 67,
      "to": 72
    }
  }, {
    "left": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 76,
      "from": 2,
      "to": 12
    },
    "right": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 95,
      "from": 2,
      "to": 12
    }
  }, {
    "left": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 75,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 94,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "      if(matchInfo) {",
      "lineIdx": 61,
      "from": 6,
      "to": 8
    },
    "right": {
      "line": "      if(matchInfo) {",
      "lineIdx": 80,
      "from": 6,
      "to": 8
    }
  }, {
    "left": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 55,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 74,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 75,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 94,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 75,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 94,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 0,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 0,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "        } else {",
      "lineIdx": 34,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "        } else {",
      "lineIdx": 45,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 27,
      "to": 52
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 27,
      "to": 52
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "      }",
      "lineIdx": 66,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "      }",
      "lineIdx": 85,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 10,
      "to": 15
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 10,
      "to": 15
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 72,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 91,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 68,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 87,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 17,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 23,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 92,
      "to": 100
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 92,
      "to": 100
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 41,
      "to": 49
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 41,
      "to": 49
    }
  }, {
    "left": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 22,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 28,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 55,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 74,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 16,
      "from": 22,
      "to": 26
    },
    "right": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 22,
      "from": 22,
      "to": 26
    }
  }, {
    "left": {
      "line": "        } else {",
      "lineIdx": 34,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "        } else {",
      "lineIdx": 45,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 43,
      "from": 104,
      "to": 105
    },
    "right": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 62,
      "from": 104,
      "to": 105
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 72,
      "from": 63,
      "to": 73
    },
    "right": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 91,
      "from": 63,
      "to": 73
    }
  }, {
    "left": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 26,
      "from": 32,
      "to": 48
    },
    "right": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 33,
      "from": 32,
      "to": 48
    }
  }, {
    "left": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 21,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 27,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 21,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 27,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 55,
      "from": 29,
      "to": 37
    },
    "right": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 74,
      "from": 29,
      "to": 37
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 34,
      "to": 59
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 34,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 10,
      "to": 28
    },
    "right": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 10,
      "to": 28
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 50,
      "to": 53
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 50,
      "to": 53
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 69,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 88,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 19,
      "from": 15,
      "to": 23
    },
    "right": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 25,
      "from": 15,
      "to": 23
    }
  }, {
    "left": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 52,
      "from": 0,
      "to": 17
    },
    "right": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 71,
      "from": 0,
      "to": 17
    }
  }, {
    "left": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 16,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 22,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 16,
      "to": 26
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 16,
      "to": 26
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 76,
      "from": 26,
      "to": 33
    },
    "right": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 95,
      "from": 26,
      "to": 33
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 66,
      "to": 70
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 66,
      "to": 70
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 16,
      "to": 22
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 16,
      "to": 22
    }
  }, {
    "left": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 28,
      "from": 49,
      "to": 57
    },
    "right": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 35,
      "from": 49,
      "to": 57
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 52,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 71,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 28,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 35,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 69,
      "from": 59,
      "to": 68
    },
    "right": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 88,
      "from": 59,
      "to": 68
    }
  }, {
    "left": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 48,
      "from": 4,
      "to": 22
    },
    "right": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 67,
      "from": 4,
      "to": 22
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 16,
      "to": 19
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 16,
      "to": 19
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 19,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 25,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 76,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 95,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 86,
      "to": 95
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 86,
      "to": 95
    }
  }, {
    "left": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 27,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 34,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 54,
      "to": 60
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 54,
      "to": 60
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 88,
      "to": 94
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 88,
      "to": 94
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 8,
      "to": 16
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 8,
      "to": 16
    }
  }, {
    "left": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 76,
      "from": 44,
      "to": 49
    },
    "right": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 95,
      "from": 44,
      "to": 49
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 39,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  });",
      "lineIdx": 58,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 33,
      "to": 36
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 33,
      "to": 36
    }
  }, {
    "left": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 17,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 23,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 79,
      "to": 85
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 79,
      "to": 85
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 48,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 67,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 19,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 25,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 59,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 78,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 76,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 95,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 40,
      "to": 45
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 40,
      "to": 45
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 76,
      "to": 78
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 76,
      "to": 78
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 33,
      "to": 36
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 33,
      "to": 36
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 13,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 19,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 19,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 25,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 63,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 82,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 40,
      "to": 48
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 40,
      "to": 48
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 33,
      "to": 39
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 33,
      "to": 39
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 64,
      "to": 67
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 64,
      "to": 67
    }
  }, {
    "left": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 22,
      "from": 8,
      "to": 10
    },
    "right": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 28,
      "from": 8,
      "to": 10
    }
  }, {
    "left": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 59,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 78,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 17,
      "from": 13,
      "to": 17
    },
    "right": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 23,
      "from": 13,
      "to": 17
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 72,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 91,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 63,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 82,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "        } else {",
      "lineIdx": 34,
      "from": 10,
      "to": 14
    },
    "right": {
      "line": "        } else {",
      "lineIdx": 45,
      "from": 10,
      "to": 14
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 110,
      "to": 111
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 110,
      "to": 111
    }
  }, {
    "left": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 48,
      "from": 23,
      "to": 28
    },
    "right": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 67,
      "from": 23,
      "to": 28
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 72,
      "from": 44,
      "to": 47
    },
    "right": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 91,
      "from": 44,
      "to": 47
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 78,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 97,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 40,
      "to": 48
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 40,
      "to": 48
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 69,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 88,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 29,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 36,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 76,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 95,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 14,
      "to": 25
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 14,
      "to": 25
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 72,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 91,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 79,
      "from": 25,
      "to": 28
    },
    "right": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 98,
      "from": 25,
      "to": 28
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 50,
      "to": 55
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 50,
      "to": 55
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 14,
      "to": 16
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 14,
      "to": 16
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 8,
      "to": 15
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 8,
      "to": 15
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 59,
      "from": 7,
      "to": 16
    },
    "right": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 78,
      "from": 7,
      "to": 16
    }
  }, {
    "left": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 76,
      "from": 51,
      "to": 61
    },
    "right": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 95,
      "from": 51,
      "to": 61
    }
  }, {
    "left": {
      "line": "  vector<OneToOneMatch> matches;",
      "lineIdx": 54,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  vector<OneToOneMatch> matches;",
      "lineIdx": 73,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 10,
      "to": 15
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 10,
      "to": 15
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 55,
      "to": 66
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 55,
      "to": 66
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 73,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 92,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 10,
      "to": 12
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 10,
      "to": 12
    }
  }, {
    "left": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 27,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 34,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 85,
      "to": 88
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 85,
      "to": 88
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 14,
      "to": 21
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 14,
      "to": 21
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 93,
      "to": 100
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 93,
      "to": 100
    }
  }, {
    "left": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 19,
      "from": 29,
      "to": 36
    },
    "right": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 25,
      "from": 29,
      "to": 36
    }
  }, {
    "left": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 26,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 33,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 22,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 28,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 48,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 67,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 19,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 25,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 57,
      "to": 68
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 57,
      "to": 68
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 7,
      "to": 9
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 7,
      "to": 9
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 12,
      "to": 25
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 12,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 72,
      "from": 5,
      "to": 23
    },
    "right": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 91,
      "from": 5,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 52,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 71,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 76,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 95,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 24,
      "to": 32
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 24,
      "to": 32
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 84,
      "to": 90
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 84,
      "to": 90
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 27,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 34,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 27,
      "to": 32
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 27,
      "to": 32
    }
  }, {
    "left": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 78,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 97,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 79,
      "from": 2,
      "to": 12
    },
    "right": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 98,
      "from": 2,
      "to": 12
    }
  }, {
    "left": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 63,
      "from": 23,
      "to": 32
    },
    "right": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 82,
      "from": 23,
      "to": 32
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 88,
      "to": 100
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 88,
      "to": 100
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 55,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 74,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "      if(matchInfo) {",
      "lineIdx": 61,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "      if(matchInfo) {",
      "lineIdx": 80,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 78,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 97,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 50,
      "to": 59
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 50,
      "to": 59
    }
  }, {
    "left": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 59,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 78,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 42,
      "to": 50
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 42,
      "to": 50
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 37,
      "to": 43
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 37,
      "to": 43
    }
  }, {
    "left": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 16,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 22,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 78,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 97,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 53,
      "to": 57
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 53,
      "to": 57
    }
  }, {
    "left": {
      "line": "TwoSidedDiffWidget::TwoSidedDiffWidget()",
      "lineIdx": 12,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "TwoSidedDiffWidget::TwoSidedDiffWidget()",
      "lineIdx": 18,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 105,
      "to": 110
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 105,
      "to": 110
    }
  }, {
    "left": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 29,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 36,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 63,
      "from": 15,
      "to": 19
    },
    "right": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 82,
      "from": 15,
      "to": 19
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 69,
      "from": 49,
      "to": 57
    },
    "right": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 88,
      "from": 49,
      "to": 57
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 69,
      "from": 40,
      "to": 47
    },
    "right": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 88,
      "from": 40,
      "to": 47
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 17,
      "to": 45
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 17,
      "to": 45
    }
  }, {
    "left": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 79,
      "from": 13,
      "to": 24
    },
    "right": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 98,
      "from": 13,
      "to": 24
    }
  }, {
    "left": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 75,
      "from": 33,
      "to": 41
    },
    "right": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 94,
      "from": 33,
      "to": 41
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 26,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 33,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 16,
      "to": 23
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 16,
      "to": 23
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 104,
      "to": 105
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 104,
      "to": 105
    }
  }, {
    "left": {
      "line": "        }",
      "lineIdx": 36,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "        }",
      "lineIdx": 47,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 52,
      "from": 18,
      "to": 36
    },
    "right": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 71,
      "from": 18,
      "to": 36
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 60,
      "to": 67
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 60,
      "to": 67
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 36,
      "to": 41
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 36,
      "to": 41
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 104,
      "to": 105
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 104,
      "to": 105
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 52,
      "to": 57
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 52,
      "to": 57
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 66,
      "to": 74
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 66,
      "to": 74
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 63,
      "from": 8,
      "to": 14
    },
    "right": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 82,
      "from": 8,
      "to": 14
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 41,
      "to": 46
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 41,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 58,
      "to": 66
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 58,
      "to": 66
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 42,
      "to": 46
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 42,
      "to": 46
    }
  }, {
    "left": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 78,
      "from": 48,
      "to": 53
    },
    "right": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 97,
      "from": 48,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 1,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 1,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 75,
      "from": 25,
      "to": 32
    },
    "right": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 94,
      "from": 25,
      "to": 32
    }
  }, {
    "left": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 75,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 94,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 63,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 82,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 28,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 35,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 48,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 67,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 21,
      "from": 57,
      "to": 65
    },
    "right": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 27,
      "from": 57,
      "to": 65
    }
  }, {
    "left": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 27,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 34,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "TwoSidedDiffWidget::TwoSidedDiffWidget()",
      "lineIdx": 12,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "TwoSidedDiffWidget::TwoSidedDiffWidget()",
      "lineIdx": 18,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 79,
      "to": 89
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 79,
      "to": 89
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 19,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "      if(block.userData() != nullptr) {",
      "lineIdx": 25,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 126,
      "to": 128
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 126,
      "to": 128
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 43,
      "from": 60,
      "to": 77
    },
    "right": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 62,
      "from": 60,
      "to": 77
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 61,
      "to": 65
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 61,
      "to": 65
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 72,
      "from": 48,
      "to": 57
    },
    "right": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 91,
      "from": 48,
      "to": 57
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 17,
      "to": 22
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 28,
      "from": 69,
      "to": 73
    },
    "right": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 35,
      "from": 69,
      "to": 73
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 46,
      "to": 54
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 46,
      "to": 54
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 18,
      "to": 36
    },
    "right": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 18,
      "to": 36
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 79,
      "to": 82
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 79,
      "to": 82
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 12,
      "to": 15
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 12,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 11,
      "to": 39
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 11,
      "to": 39
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 89,
      "to": 98
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 89,
      "to": 98
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 35,
      "to": 48
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 35,
      "to": 48
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 39,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  });",
      "lineIdx": 58,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 52,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 71,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 22,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 28,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 28,
      "from": 18,
      "to": 26
    },
    "right": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 35,
      "from": 18,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 16,
      "from": 32,
      "to": 37
    },
    "right": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 22,
      "from": 32,
      "to": 37
    }
  }, {
    "left": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 21,
      "from": 8,
      "to": 18
    },
    "right": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 27,
      "from": 8,
      "to": 18
    }
  }, {
    "left": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 27,
      "from": 63,
      "to": 71
    },
    "right": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 34,
      "from": 63,
      "to": 71
    }
  }, {
    "left": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 29,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 36,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 61,
      "to": 65
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 61,
      "to": 65
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 69,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 88,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 80,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 99,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 59,
      "to": 70
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 59,
      "to": 70
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 67,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 86,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 35,
      "to": 38
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 35,
      "to": 38
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 107,
      "to": 108
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 107,
      "to": 108
    }
  }, {
    "left": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 26,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "            int splitterPosLC = getSplitterPosLC();",
      "lineIdx": 33,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 53,
      "to": 62
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 53,
      "to": 62
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 27,
      "from": 60,
      "to": 62
    },
    "right": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 34,
      "from": 60,
      "to": 62
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 1,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 1,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 69,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  return OneToOneAlignment::fromTrusted(matches, leftText, rightText);",
      "lineIdx": 88,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 56,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 75,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 56,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 75,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 56,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 75,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 26,
      "to": 39
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 26,
      "to": 39
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 43,
      "from": 25,
      "to": 53
    },
    "right": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 62,
      "from": 25,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 28,
      "to": 35
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 28,
      "to": 35
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 29,
      "from": 50,
      "to": 59
    },
    "right": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 36,
      "from": 50,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "#include \"textblocklinkedonetoonematch.h\"",
      "lineIdx": 9,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 65,
      "to": 69
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 65,
      "to": 69
    }
  }, {
    "left": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 56,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 75,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 53,
      "to": 59
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 53,
      "to": 59
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 21,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 27,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 21,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 27,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 27,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 34,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 40,
      "to": 48
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 40,
      "to": 48
    }
  }, {
    "left": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 52,
      "from": 38,
      "to": 47
    },
    "right": {
      "line": "OneToOneAlignment TwoSidedDiffWidget::alignment() const",
      "lineIdx": 71,
      "from": 38,
      "to": 47
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 48,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "    addManualAlignment(match.mLeft, match.mRight);",
      "lineIdx": 67,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 32,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "            painter.drawLine(QLine(splitterPosLC - MARGIN_WIDTH, leftY, splitterPosLC + MARGIN_WIDTH, rightY));",
      "lineIdx": 39,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 16,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 22,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 73,
      "to": 75
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 73,
      "to": 75
    }
  }, {
    "left": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 79,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 98,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 29,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 36,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 29,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 36,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 59,
      "from": 31,
      "to": 38
    },
    "right": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 78,
      "from": 31,
      "to": 38
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 27,
      "from": 22,
      "to": 34
    },
    "right": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 34,
      "from": 22,
      "to": 34
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 16,
      "from": 14,
      "to": 19
    },
    "right": {
      "line": "  //TODO this doesn't show half lines",
      "lineIdx": 22,
      "from": 14,
      "to": 19
    }
  }, {
    "left": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"../../aligner/onetoonematch.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 79,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 98,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 69,
      "to": 75
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 69,
      "to": 75
    }
  }, {
    "left": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 63,
      "from": 33,
      "to": 44
    },
    "right": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 82,
      "from": 33,
      "to": 44
    }
  }, {
    "left": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 65,
      "from": 16,
      "to": 25
    },
    "right": {
      "line": "        matches.push_back(OneToOneMatch(leftText, rightText, left, right));",
      "lineIdx": 84,
      "from": 16,
      "to": 25
    }
  }, {
    "left": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 59,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    if(leftBlock.userData() != nullptr) {",
      "lineIdx": 78,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 74,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  logger.info(QString().sprintf(\"Adding manual alignment: %d - %d\", aLeftLine, aRightLine));",
      "lineIdx": 93,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 77,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "  weak_ptr<TextBlockLinkedOneToOneMatch> match = TextBlockLinkedOneToOneMatch::create(leftBlock, rightBlock);",
      "lineIdx": 96,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 49,
      "to": 53
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 49,
      "to": 53
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 94,
      "to": 103
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 94,
      "to": 103
    }
  }, {
    "left": {
      "line": "TwoSidedDiffWidget::TwoSidedDiffWidget()",
      "lineIdx": 12,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "TwoSidedDiffWidget::TwoSidedDiffWidget()",
      "lineIdx": 18,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 39,
      "to": 44
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 39,
      "to": 44
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 75,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 94,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 25,
      "to": 34
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 25,
      "to": 34
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 88,
      "to": 92
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 88,
      "to": 92
    }
  }, {
    "left": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 20,
      "from": 29,
      "to": 40
    },
    "right": {
      "line": "        MatchPtr* matchPtr = static_cast<MatchPtr*>(block.userData());",
      "lineIdx": 26,
      "from": 29,
      "to": 40
    }
  }, {
    "left": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 28,
      "from": 29,
      "to": 48
    },
    "right": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 35,
      "from": 29,
      "to": 48
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 56,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 75,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 55,
      "from": 39,
      "to": 43
    },
    "right": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 74,
      "from": 39,
      "to": 43
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 19,
      "to": 28
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 19,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 75,
      "from": 49,
      "to": 58
    },
    "right": {
      "line": "  QTextBlock leftBlock = getLine(DiffSide::LEFT, aLeftLine);",
      "lineIdx": 94,
      "from": 49,
      "to": 58
    }
  }, {
    "left": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 14,
      "from": 56,
      "to": 60
    },
    "right": {
      "line": "  //TODO this is quite dangerous and relies on the fact that the painter is in the same object",
      "lineIdx": 20,
      "from": 56,
      "to": 60
    }
  }, {
    "left": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 78,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  leftBlock.setUserData(new MatchPtr(leftBlock, match));",
      "lineIdx": 97,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 79,
      "from": 29,
      "to": 37
    },
    "right": {
      "line": "  rightBlock.setUserData(new MatchPtr(rightBlock, match));",
      "lineIdx": 98,
      "from": 29,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 21,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 27,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "#include \"twosideddiffwidget.h\"",
      "lineIdx": 3,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 47,
      "to": 55
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 47,
      "to": 55
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 31,
      "to": 39
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 31,
      "to": 39
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 105,
      "to": 109
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 105,
      "to": 109
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 72,
      "from": 59,
      "to": 62
    },
    "right": {
      "line": "void TwoSidedDiffWidget::addManualAlignment(int aLeftLine, int aRightLine)",
      "lineIdx": 91,
      "from": 59,
      "to": 62
    }
  }, {
    "left": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 22,
      "from": 20,
      "to": 27
    },
    "right": {
      "line": "        if(match != nullptr) {",
      "lineIdx": 28,
      "from": 20,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 0,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 0,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  vector<OneToOneMatch> matches;",
      "lineIdx": 54,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  vector<OneToOneMatch> matches;",
      "lineIdx": 73,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 12,
      "to": 22
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 12,
      "to": 22
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 101,
      "to": 103
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 101,
      "to": 103
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 21,
      "from": 67,
      "to": 71
    },
    "right": {
      "line": "        shared_ptr<TextBlockLinkedOneToOneMatch> match = matchPtr->lock();",
      "lineIdx": 27,
      "from": 67,
      "to": 71
    }
  }, {
    "left": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 29,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 36,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 64,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "        int right = matchInfo->getBlock(DiffSide::RIGHT).blockNumber();",
      "lineIdx": 83,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 76,
      "from": 13,
      "to": 23
    },
    "right": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 95,
      "from": 13,
      "to": 23
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 111,
      "to": 115
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 111,
      "to": 115
    }
  }, {
    "left": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 28,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 35,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 29,
      "from": 18,
      "to": 27
    },
    "right": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 36,
      "from": 18,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 29,
      "from": 61,
      "to": 69
    },
    "right": {
      "line": "            QRect rightRect = getLinePositionInLC(rightLine, DiffSide::RIGHT);",
      "lineIdx": 36,
      "from": 61,
      "to": 69
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 43,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 62,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "      if(matchInfo) {",
      "lineIdx": 61,
      "from": 9,
      "to": 18
    },
    "right": {
      "line": "      if(matchInfo) {",
      "lineIdx": 80,
      "from": 9,
      "to": 18
    }
  }, {
    "left": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 30,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "            int leftY = leftRect.top() + leftRect.height()/2;",
      "lineIdx": 37,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 16,
      "to": 27
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 16,
      "to": 27
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 53,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 72,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 43,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 62,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 24,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "          const QTextBlock& rightLine = match->getBlock(DiffSide::RIGHT);",
      "lineIdx": 30,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 75,
      "to": 79
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 75,
      "to": 79
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 8,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 63,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "        VERIFY(left == leftBlock.blockNumber());",
      "lineIdx": 82,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 45,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  setText(DiffSide::LEFT, computedOrLoadedAlignment.leftText());",
      "lineIdx": 64,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 56,
      "from": 22,
      "to": 29
    },
    "right": {
      "line": "  QString rightText = getText(DiffSide::RIGHT);",
      "lineIdx": 75,
      "from": 22,
      "to": 29
    }
  }, {
    "left": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 23,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "          const QTextBlock& leftLine = match->getBlock(DiffSide::LEFT);",
      "lineIdx": 29,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 62,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "        int left = matchInfo->getBlock(DiffSide::LEFT).blockNumber();",
      "lineIdx": 81,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 55,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  QString leftText = getText(DiffSide::LEFT);",
      "lineIdx": 74,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 28,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "            QRect leftRect = getLinePositionInLC(leftLine, DiffSide::LEFT);",
      "lineIdx": 35,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 7,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 60,
      "from": 71,
      "to": 79
    },
    "right": {
      "line": "      shared_ptr<TextBlockLinkedOneToOneMatch> matchInfo = static_cast<MatchPtr*>(leftBlock.userData())->lock();",
      "lineIdx": 79,
      "from": 71,
      "to": 79
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 20,
      "to": 27
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 20,
      "to": 27
    }
  }, {
    "left": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 76,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  QTextBlock rightBlock = getLine(DiffSide::RIGHT, aRightLine);",
      "lineIdx": 95,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 27,
      "from": 48,
      "to": 52
    },
    "right": {
      "line": "            const int MARGIN_WIDTH = 20; //TODO make config or whatever",
      "lineIdx": 34,
      "from": 48,
      "to": 52
    }
  }, {
    "left": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 35,
      "from": 99,
      "to": 102
    },
    "right": {
      "line": "          block.setUserData(nullptr); //to lessen the effect of the \"memory leak\" -> the weak_ptrs won't allow that memory to be freed",
      "lineIdx": 46,
      "from": 99,
      "to": 102
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 58,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(const QTextBlock& leftBlock: blocks(DiffSide::LEFT)) {",
      "lineIdx": 77,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 47,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(const OneToOneMatch& match: computedOrLoadedAlignment.matches()) {",
      "lineIdx": 66,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 31,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "            int rightY = rightRect.top() + rightRect.height()/2;",
      "lineIdx": 38,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 15,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "  //so we can be sure (I hope) that there will be no call of this function when the object is destroyed",
      "lineIdx": 21,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 17,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  setDrawer([this](QPainter& painter) {",
      "lineIdx": 23,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 46,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  setText(DiffSide::RIGHT, computedOrLoadedAlignment.rightText());",
      "lineIdx": 65,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 25,
      "from": 37,
      "to": 46
    },
    "right": {
      "line": "          if(leftLine.isVisible() && rightLine.isVisible()) {",
      "lineIdx": 31,
      "from": 37,
      "to": 46
    }
  }, {
    "left": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical",
      "lineIdx": 18,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "    for(QTextBlock block: visibleBlocks(DiffSide::LEFT)) { //only need to go trough one side because it's symmetrical (for matching arrows)",
      "lineIdx": 24,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 43,
      "from": 54,
      "to": 59
    },
    "right": {
      "line": "void TwoSidedDiffWidget::setComputedOrLoadedAlignment(const OneToOneAlignment& computedOrLoadedAlignment)",
      "lineIdx": 62,
      "from": 54,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include \"gui/mix/textblockmatchdata.h\"",
      "lineIdx": 6,
      "from": 17,
      "to": 18
    }
  }]
}