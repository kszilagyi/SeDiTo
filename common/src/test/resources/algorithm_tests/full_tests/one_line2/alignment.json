{
  "matches": [{
    "left": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 127,
      "to": 128
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 127,
      "to": 128
    }
  }, {
    "left": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 34,
      "to": 39
    },
    "right": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 34,
      "to": 39
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 22,
      "to": 28
    },
    "right": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 22,
      "to": 28
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 14,
      "to": 16
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 14,
      "to": 16
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 93,
      "to": 101
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 93,
      "to": 101
    }
  }, {
    "left": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 17,
      "to": 21
    },
    "right": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 17,
      "to": 21
    }
  }, {
    "left": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 31,
      "to": 35
    },
    "right": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 31,
      "to": 35
    }
  }, {
    "left": {
      "line": "class Either;",
      "lineIdx": 9,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "class Either;",
      "lineIdx": 9,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 112,
      "to": 119
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 112,
      "to": 119
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 27,
      "to": 38
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 27,
      "to": 38
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment empty();",
      "lineIdx": 49,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  static OneToOneAlignment empty();",
      "lineIdx": 49,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 2,
      "to": 13
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 2,
      "to": 13
    }
  }, {
    "left": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 27,
      "to": 35
    },
    "right": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 27,
      "to": 35
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 11,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 11,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 30,
      "to": 35
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 30,
      "to": 35
    }
  }, {
    "left": {
      "line": "using std::unique_ptr;",
      "lineIdx": 12,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "using std::unique_ptr;",
      "lineIdx": 12,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "using std::unique_ptr;",
      "lineIdx": 12,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "using std::unique_ptr;",
      "lineIdx": 12,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 84,
      "to": 92
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 84,
      "to": 92
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 75,
      "to": 82
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 75,
      "to": 82
    }
  }, {
    "left": {
      "line": "  const MatchesType mMatches;",
      "lineIdx": 22,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  const MatchesType mMatches;",
      "lineIdx": 22,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 26,
      "to": 29
    },
    "right": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 26,
      "to": 29
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 103,
      "to": 108
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 103,
      "to": 108
    }
  }, {
    "left": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 32,
      "to": 37
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 32,
      "to": 37
    }
  }, {
    "left": {
      "line": "  const MatchesType mMatches;",
      "lineIdx": 22,
      "from": 8,
      "to": 19
    },
    "right": {
      "line": "  const MatchesType mMatches;",
      "lineIdx": 22,
      "from": 8,
      "to": 19
    }
  }, {
    "left": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 18,
      "to": 26
    },
    "right": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 18,
      "to": 26
    }
  }, {
    "left": {
      "line": "  const QString mRightText;",
      "lineIdx": 24,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  const QString mRightText;",
      "lineIdx": 24,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 16,
      "to": 32
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 16,
      "to": 32
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 109,
      "to": 116
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 109,
      "to": 116
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "public:",
      "lineIdx": 29,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "public:",
      "lineIdx": 29,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 68,
      "to": 76
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 68,
      "to": 76
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 99,
      "to": 108
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 99,
      "to": 108
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 118,
      "to": 127
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 118,
      "to": 127
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 119,
      "to": 120
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 119,
      "to": 120
    }
  }, {
    "left": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 27,
      "to": 30
    },
    "right": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 27,
      "to": 30
    }
  }, {
    "left": {
      "line": "  const MatchesType& matches() const { return mMatches; }",
      "lineIdx": 41,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  vector<LinePair> matches() const;",
      "lineIdx": 41,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "class DisplayableError;",
      "lineIdx": 7,
      "from": 6,
      "to": 22
    },
    "right": {
      "line": "class DisplayableError;",
      "lineIdx": 7,
      "from": 6,
      "to": 22
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 2,
      "to": 13
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 2,
      "to": 13
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 48,
      "to": 55
    },
    "right": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 48,
      "to": 55
    }
  }, {
    "left": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  const MatchesType mMatches;",
      "lineIdx": 22,
      "from": 20,
      "to": 28
    },
    "right": {
      "line": "  const MatchesType mMatches;",
      "lineIdx": 22,
      "from": 20,
      "to": 28
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 94,
      "to": 99
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 94,
      "to": 99
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 15,
      "to": 29
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 15,
      "to": 29
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 56,
      "to": 60
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 56,
      "to": 60
    }
  }, {
    "left": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 7,
      "to": 21
    },
    "right": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 7,
      "to": 21
    }
  }, {
    "left": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 22,
      "to": 27
    },
    "right": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 22,
      "to": 27
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 37,
      "to": 46
    },
    "right": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 37,
      "to": 46
    }
  }, {
    "left": {
      "line": "#define ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 1,
      "from": 8,
      "to": 34
    },
    "right": {
      "line": "#define ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 1,
      "from": 8,
      "to": 34
    }
  }, {
    "left": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 34,
      "to": 51
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 34,
      "to": 51
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 15,
      "to": 29
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 15,
      "to": 29
    }
  }, {
    "left": {
      "line": "  const QString mLeftText;",
      "lineIdx": 23,
      "from": 8,
      "to": 15
    },
    "right": {
      "line": "  const QString mLeftText;",
      "lineIdx": 23,
      "from": 8,
      "to": 15
    }
  }, {
    "left": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "#ifndef ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#ifndef ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment empty();",
      "lineIdx": 49,
      "from": 27,
      "to": 32
    },
    "right": {
      "line": "  static OneToOneAlignment empty();",
      "lineIdx": 49,
      "from": 27,
      "to": 32
    }
  }, {
    "left": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 42,
      "to": 48
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 42,
      "to": 48
    }
  }, {
    "left": {
      "line": "class LinePair;",
      "lineIdx": 6,
      "from": 6,
      "to": 14
    },
    "right": {
      "line": "class LinePair;",
      "lineIdx": 6,
      "from": 6,
      "to": 14
    }
  }, {
    "left": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 17,
      "to": 26
    },
    "right": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 17,
      "to": 26
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 96,
      "to": 104
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 96,
      "to": 104
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 90,
      "to": 97
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 90,
      "to": 97
    }
  }, {
    "left": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "#define ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#define ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  const QStringList mLeftLines;",
      "lineIdx": 25,
      "from": 20,
      "to": 30
    },
    "right": {
      "line": "  const QStringList mLeftLines;",
      "lineIdx": 25,
      "from": 20,
      "to": 30
    }
  }, {
    "left": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  const QString mLeftText;",
      "lineIdx": 23,
      "from": 16,
      "to": 25
    },
    "right": {
      "line": "  const QString mLeftText;",
      "lineIdx": 23,
      "from": 16,
      "to": 25
    }
  }, {
    "left": {
      "line": "#endif // ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 52,
      "from": 10,
      "to": 36
    },
    "right": {
      "line": "#endif // ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 52,
      "from": 10,
      "to": 36
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 36,
      "to": 42
    },
    "right": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 36,
      "to": 42
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 104,
      "to": 105
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 104,
      "to": 105
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 116,
      "to": 117
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 116,
      "to": 117
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 34,
      "to": 47
    },
    "right": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 34,
      "to": 47
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "using std::unique_ptr;",
      "lineIdx": 12,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "using std::unique_ptr;",
      "lineIdx": 12,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 42,
      "to": 47
    },
    "right": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 42,
      "to": 47
    }
  }, {
    "left": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  const QStringList mRightLines;",
      "lineIdx": 26,
      "from": 20,
      "to": 31
    },
    "right": {
      "line": "  const QStringList mRightLines;",
      "lineIdx": 26,
      "from": 20,
      "to": 31
    }
  }, {
    "left": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 26,
      "to": 32
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 26,
      "to": 32
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 40,
      "to": 46
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 40,
      "to": 46
    }
  }, {
    "left": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "class OneToOneAlignment",
      "lineIdx": 19,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "class OneToOneAlignment",
      "lineIdx": 19,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 50,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "};",
      "lineIdx": 50,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 84,
      "to": 89
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 84,
      "to": 89
    }
  }, {
    "left": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 22,
      "to": 30
    },
    "right": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 22,
      "to": 30
    }
  }, {
    "left": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 29,
      "to": 42
    },
    "right": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 29,
      "to": 42
    }
  }, {
    "left": {
      "line": "using std::unique_ptr;",
      "lineIdx": 12,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using std::unique_ptr;",
      "lineIdx": 12,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 2,
      "to": 19
    },
    "right": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 2,
      "to": 19
    }
  }, {
    "left": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 8,
      "to": 15
    },
    "right": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 8,
      "to": 15
    }
  }, {
    "left": {
      "line": "using std::unique_ptr;",
      "lineIdx": 12,
      "from": 11,
      "to": 21
    },
    "right": {
      "line": "using std::unique_ptr;",
      "lineIdx": 12,
      "from": 11,
      "to": 21
    }
  }, {
    "left": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 43,
      "to": 52
    },
    "right": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 43,
      "to": 52
    }
  }, {
    "left": {
      "line": "class DisplayableError;",
      "lineIdx": 7,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "class DisplayableError;",
      "lineIdx": 7,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 119,
      "to": 120
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 119,
      "to": 120
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 9,
      "to": 26
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 9,
      "to": 26
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "class Either;",
      "lineIdx": 9,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "class Either;",
      "lineIdx": 9,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 52,
      "to": 65
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 52,
      "to": 65
    }
  }, {
    "left": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 17,
      "to": 26
    },
    "right": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 17,
      "to": 26
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 11,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 11,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "#endif // ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 52,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#endif // ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 52,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 28,
      "to": 33
    },
    "right": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 28,
      "to": 33
    }
  }, {
    "left": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 22,
      "to": 30
    },
    "right": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 22,
      "to": 30
    }
  }, {
    "left": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 20,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 20,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "enum class DiffSide;",
      "lineIdx": 14,
      "from": 11,
      "to": 19
    },
    "right": {
      "line": "enum class DiffSide;",
      "lineIdx": 14,
      "from": 11,
      "to": 19
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 50,
      "to": 55
    },
    "right": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 50,
      "to": 55
    }
  }, {
    "left": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 11,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 11,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "enum class DiffSide;",
      "lineIdx": 14,
      "from": 5,
      "to": 10
    },
    "right": {
      "line": "enum class DiffSide;",
      "lineIdx": 14,
      "from": 5,
      "to": 10
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 39,
      "to": 44
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 39,
      "to": 44
    }
  }, {
    "left": {
      "line": "  const QStringList mRightLines;",
      "lineIdx": 26,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const QStringList mRightLines;",
      "lineIdx": 26,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 156,
      "to": 157
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 156,
      "to": 157
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 11,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 11,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 8,
      "to": 15
    },
    "right": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 8,
      "to": 15
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 129,
      "to": 130
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 129,
      "to": 130
    }
  }, {
    "left": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 65,
      "to": 72
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 65,
      "to": 72
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 146,
      "to": 155
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 146,
      "to": 155
    }
  }, {
    "left": {
      "line": "enum class DiffSide;",
      "lineIdx": 14,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "enum class DiffSide;",
      "lineIdx": 14,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 50,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "};",
      "lineIdx": 50,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 59,
      "to": 64
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 59,
      "to": 64
    }
  }, {
    "left": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 107,
      "to": 108
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 107,
      "to": 108
    }
  }, {
    "left": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "#define ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 1,
      "from": 1,
      "to": 7
    },
    "right": {
      "line": "#define ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 1,
      "from": 1,
      "to": 7
    }
  }, {
    "left": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  const QStringList mLeftLines;",
      "lineIdx": 25,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  const QStringList mLeftLines;",
      "lineIdx": 25,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 60,
      "to": 67
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 60,
      "to": 67
    }
  }, {
    "left": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 49,
      "to": 57
    },
    "right": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 49,
      "to": 57
    }
  }, {
    "left": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 45,
      "to": 51
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 45,
      "to": 51
    }
  }, {
    "left": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 8,
      "to": 15
    },
    "right": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 8,
      "to": 15
    }
  }, {
    "left": {
      "line": "  const MatchesType& matches() const { return mMatches; }",
      "lineIdx": 41,
      "from": 31,
      "to": 36
    },
    "right": {
      "line": "  vector<LinePair> matches() const;",
      "lineIdx": 41,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 60,
      "to": 63
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 60,
      "to": 63
    }
  }, {
    "left": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 137,
      "to": 144
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 137,
      "to": 144
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 78,
      "to": 83
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 78,
      "to": 83
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 121,
      "to": 129
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 121,
      "to": 129
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 144,
      "to": 145
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 144,
      "to": 145
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 46,
      "to": 52
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 46,
      "to": 52
    }
  }, {
    "left": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 36,
      "to": 40
    },
    "right": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 36,
      "to": 40
    }
  }, {
    "left": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 38,
      "to": 42
    },
    "right": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 38,
      "to": 42
    }
  }, {
    "left": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 106,
      "to": 111
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 106,
      "to": 111
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 23
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 23
    }
  }, {
    "left": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 22,
      "to": 27
    },
    "right": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 22,
      "to": 27
    }
  }, {
    "left": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 23,
      "to": 28
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 23,
      "to": 28
    }
  }, {
    "left": {
      "line": " */",
      "lineIdx": 18,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": " */",
      "lineIdx": 18,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "template<typename LeftType, typename RightType>",
      "lineIdx": 8,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 38,
      "to": 47
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 38,
      "to": 47
    }
  }, {
    "left": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 28,
      "to": 33
    },
    "right": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 28,
      "to": 33
    }
  }, {
    "left": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 29,
      "to": 31
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 29,
      "to": 31
    }
  }, {
    "left": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 59,
      "to": 64
    },
    "right": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 59,
      "to": 64
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 2,
      "to": 13
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 2,
      "to": 13
    }
  }, {
    "left": {
      "line": "class Either;",
      "lineIdx": 9,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "class Either;",
      "lineIdx": 9,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 4,
      "to": 21
    },
    "right": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 4,
      "to": 21
    }
  }, {
    "left": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 8,
      "to": 19
    },
    "right": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 8,
      "to": 19
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment empty();",
      "lineIdx": 49,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  static OneToOneAlignment empty();",
      "lineIdx": 49,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "#endif // ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 52,
      "from": 1,
      "to": 6
    },
    "right": {
      "line": "#endif // ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 52,
      "from": 1,
      "to": 6
    }
  }, {
    "left": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  const MatchesType& matches() const { return mMatches; }",
      "lineIdx": 41,
      "from": 21,
      "to": 28
    },
    "right": {
      "line": "  vector<LinePair> matches() const;",
      "lineIdx": 41,
      "from": 19,
      "to": 26
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 20,
      "to": 25
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 20,
      "to": 25
    }
  }, {
    "left": {
      "line": "/**",
      "lineIdx": 16,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "/**",
      "lineIdx": 16,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "/**",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "/**",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  const QString mRightText;",
      "lineIdx": 24,
      "from": 16,
      "to": 26
    },
    "right": {
      "line": "  const QString mRightText;",
      "lineIdx": 24,
      "from": 16,
      "to": 26
    }
  }, {
    "left": {
      "line": "  const QString mRightText;",
      "lineIdx": 24,
      "from": 8,
      "to": 15
    },
    "right": {
      "line": "  const QString mRightText;",
      "lineIdx": 24,
      "from": 8,
      "to": 15
    }
  }, {
    "left": {
      "line": "  const MatchesType mMatches;",
      "lineIdx": 22,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const MatchesType mMatches;",
      "lineIdx": 22,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 16,
      "to": 21
    },
    "right": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 16,
      "to": 21
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 33,
      "to": 46
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 33,
      "to": 46
    }
  }, {
    "left": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 44,
      "to": 49
    },
    "right": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 44,
      "to": 49
    }
  }, {
    "left": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  const QStringList mRightLines;",
      "lineIdx": 26,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  const QStringList mRightLines;",
      "lineIdx": 26,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment empty();",
      "lineIdx": 49,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  static OneToOneAlignment empty();",
      "lineIdx": 49,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 33,
      "to": 38
    },
    "right": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 33,
      "to": 38
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 2,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 2,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 8,
      "to": 19
    },
    "right": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 8,
      "to": 19
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 17,
      "to": 22
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 53,
      "to": 61
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 53,
      "to": 61
    }
  }, {
    "left": {
      "line": "#ifndef ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 0,
      "from": 8,
      "to": 34
    },
    "right": {
      "line": "#ifndef ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 0,
      "from": 8,
      "to": 34
    }
  }, {
    "left": {
      "line": "class LinePair;",
      "lineIdx": 6,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "class LinePair;",
      "lineIdx": 6,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 128,
      "to": 129
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 128,
      "to": 129
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 53,
      "to": 66
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 53,
      "to": 66
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 15,
      "to": 24
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 15,
      "to": 24
    }
  }, {
    "left": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 43,
      "to": 48
    },
    "right": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 43,
      "to": 48
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 26,
      "to": 43
    },
    "right": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 26,
      "to": 43
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 36,
      "to": 41
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 36,
      "to": 41
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 49,
      "to": 57
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 49,
      "to": 57
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 25,
      "to": 29
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 25,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 10,
      "to": 21
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 10,
      "to": 21
    }
  }, {
    "left": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 37,
      "to": 43
    },
    "right": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 37,
      "to": 43
    }
  }, {
    "left": {
      "line": "  const QString mLeftText;",
      "lineIdx": 23,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const QString mLeftText;",
      "lineIdx": 23,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 67,
      "to": 72
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 67,
      "to": 72
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 44,
      "to": 50
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 44,
      "to": 50
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 21,
      "to": 26
    },
    "right": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 21,
      "to": 26
    }
  }, {
    "left": {
      "line": "  const QStringList mRightLines;",
      "lineIdx": 26,
      "from": 8,
      "to": 19
    },
    "right": {
      "line": "  const QStringList mRightLines;",
      "lineIdx": 26,
      "from": 8,
      "to": 19
    }
  }, {
    "left": {
      "line": "  const MatchesType& matches() const { return mMatches; }",
      "lineIdx": 41,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  vector<LinePair> matches() const;",
      "lineIdx": 41,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  using MatchesType = vector<OneToOneMatch>;",
      "lineIdx": 21,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 44,
      "to": 49
    },
    "right": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 44,
      "to": 49
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 84,
      "to": 91
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 84,
      "to": 91
    }
  }, {
    "left": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 37,
      "to": 40
    },
    "right": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 37,
      "to": 40
    }
  }, {
    "left": {
      "line": "public:",
      "lineIdx": 29,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "public:",
      "lineIdx": 29,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 47,
      "to": 55
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 47,
      "to": 55
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "#endif // ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 52,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "#endif // ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 52,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 100,
      "to": 107
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 100,
      "to": 107
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 9,
      "to": 26
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 9,
      "to": 26
    }
  }, {
    "left": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 8,
      "to": 15
    },
    "right": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 8,
      "to": 15
    }
  }, {
    "left": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": " */",
      "lineIdx": 18,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": " */",
      "lineIdx": 18,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 36,
      "to": 41
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 36,
      "to": 41
    }
  }, {
    "left": {
      "line": "  const QStringList mLeftLines;",
      "lineIdx": 25,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const QStringList mLeftLines;",
      "lineIdx": 25,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  const QStringList& lines(DiffSide side) const;",
      "lineIdx": 40,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;",
      "lineIdx": 34,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 69,
      "to": 74
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 69,
      "to": 74
    }
  }, {
    "left": {
      "line": "  const QString mLeftText;",
      "lineIdx": 23,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  const QString mLeftText;",
      "lineIdx": 23,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 27,
      "to": 35
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 27,
      "to": 35
    }
  }, {
    "left": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  bool containsEither(const LinePair& pair) const;",
      "lineIdx": 44,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 109,
      "to": 118
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 109,
      "to": 118
    }
  }, {
    "left": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 24,
      "to": 41
    },
    "right": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 24,
      "to": 41
    }
  }, {
    "left": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  const QString& line(DiffSide side, int i) const;",
      "lineIdx": 39,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 2,
      "to": 19
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 2,
      "to": 19
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 118,
      "to": 119
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 118,
      "to": 119
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment empty();",
      "lineIdx": 49,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  static OneToOneAlignment empty();",
      "lineIdx": 49,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "using std::unique_ptr;",
      "lineIdx": 12,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "using std::unique_ptr;",
      "lineIdx": 12,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": "  const QStringList mLeftLines;",
      "lineIdx": 25,
      "from": 8,
      "to": 19
    },
    "right": {
      "line": "  const QStringList mLeftLines;",
      "lineIdx": 25,
      "from": 8,
      "to": 19
    }
  }, {
    "left": {
      "line": "class OneToOneAlignment",
      "lineIdx": 19,
      "from": 6,
      "to": 23
    },
    "right": {
      "line": "class OneToOneAlignment",
      "lineIdx": 19,
      "from": 6,
      "to": 23
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 51,
      "to": 59
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 51,
      "to": 59
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 74,
      "to": 82
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 74,
      "to": 82
    }
  }, {
    "left": {
      "line": "/**",
      "lineIdx": 16,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "/**",
      "lineIdx": 16,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 47,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 27,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 11,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 11,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 44,
      "to": 54
    },
    "right": {
      "line": "  const QString& rightText() const { return mRightText; }",
      "lineIdx": 36,
      "from": 44,
      "to": 54
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 30,
      "to": 33
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 30,
      "to": 33
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 155,
      "to": 156
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 155,
      "to": 156
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 131,
      "to": 136
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 131,
      "to": 136
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 11,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 11,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "class LinePair;",
      "lineIdx": 6,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "class LinePair;",
      "lineIdx": 6,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 80,
      "to": 93
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 80,
      "to": 93
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 49,
      "to": 57
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 49,
      "to": 57
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 32,
      "to": 37
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 32,
      "to": 37
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  const QString& leftText() const { return mLeftText; }",
      "lineIdx": 35,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": " * @brief one-to-multi range-to-range alignment",
      "lineIdx": 17,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 32,
      "to": 36
    },
    "right": {
      "line": "  bool contains(const LinePair& pair) const;",
      "lineIdx": 43,
      "from": 32,
      "to": 36
    }
  }, {
    "left": {
      "line": "#endif // ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 52,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "#endif // ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 52,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 4,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "enum class DiffSide;",
      "lineIdx": 14,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "enum class DiffSide;",
      "lineIdx": 14,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  bool operator==(const OneToOneAlignment& right) const;",
      "lineIdx": 42,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  const QString& leftLine(int i) const;",
      "lineIdx": 37,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "class DisplayableError;",
      "lineIdx": 7,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "class DisplayableError;",
      "lineIdx": 7,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "#ifndef ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 0,
      "from": 1,
      "to": 7
    },
    "right": {
      "line": "#ifndef ONETOMULTIRANGEALIGNMENT_H",
      "lineIdx": 0,
      "from": 1,
      "to": 7
    }
  }, {
    "left": {
      "line": "  const QString mRightText;",
      "lineIdx": 24,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const QString mRightText;",
      "lineIdx": 24,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 8,
      "to": 15
    },
    "right": {
      "line": "  const QString& rightLine(int i) const;",
      "lineIdx": 38,
      "from": 8,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 2,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 2,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  MatchesType::size_type size() const { return mMatches.size(); }",
      "lineIdx": 33,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "  const MatchesType& matches() const { return mMatches; }",
      "lineIdx": 41,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  vector<LinePair> matches() const;",
      "lineIdx": 41,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  static OneToOneAlignment fromInts(const vector<LinePair>& matches, const QString& leftText, const QString& rightText);",
      "lineIdx": 46,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  static OneToOneAlignment empty();",
      "lineIdx": 49,
      "from": 9,
      "to": 26
    },
    "right": {
      "line": "  static OneToOneAlignment empty();",
      "lineIdx": 49,
      "from": 9,
      "to": 26
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 20,
      "to": 25
    },
    "right": {
      "line": "  OneToOneAlignment(const OneToOneAlignment&) = default;",
      "lineIdx": 30,
      "from": 20,
      "to": 25
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  MatchesType::const_iterator end() const { return mMatches.end(); }",
      "lineIdx": 32,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 62,
      "to": 67
    },
    "right": {
      "line": "  MatchesType::const_iterator begin() const { return mMatches.begin(); }",
      "lineIdx": 31,
      "from": 62,
      "to": 67
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 73,
      "to": 79
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 73,
      "to": 79
    }
  }, {
    "left": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);",
      "lineIdx": 48,
      "from": 66,
      "to": 67
    }
  }]
}