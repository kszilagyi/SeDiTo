//package com.kristofszilagyi.sedito.gui
//
//import com.kristofszilagyi.sedito.gui.Train.trainingRatio
//import com.kristofszilagyi.sedito.gui.TrainAndDiff.readDataSetAndMeasureMetrics
//import org.log4s.getLogger
//
//object TrainIterative {
//  private val logger = getLogger
////
////
////  private def calcFirstPass(pathAndSamples: List[Pass1PathAndSamples], nn: SoftClassifier[Array[Double]], scaler: Scaler) = {
////
////    val firstPassAligner = new Pass1Aligner(nn, scaler)
////    pathAndSamples.map { case Pass1PathAndSamples(path, samples) =>
////      val resultsWithTruth = samples.metricsWithResults.map { sample =>
////        val results = firstPassAligner.measureProbability(sample.metrics)
////         Pass1ResultWithTruth(results, sample.metrics, sample.matching)
////      }
////      PathAndPass1Results(path, resultsWithTruth)
////    }
////  }
////
////  private def calcOtherPass(pathAndSamples: List[PathAndIterativeSamples], nn: SoftClassifier[Array[Double]], scaler: Scaler) = {
////
////    val firstPassAligner = new Pass1Aligner(nn, scaler)
////    pathAndSamples.map { case PathAndIterativeSamples(path, samples) =>
////      val resultsWithTruth = samples.metricsWithResults.map { sample =>
////        val results = firstPassAligner.measureProbability(sample.metrics)
////        Pass1ResultWithTruth(results, sample.metrics, sample.matching)
////      }
////      PathAndPass1Results(path, resultsWithTruth)
////    }
////  }
////
////
//}