package com.kristofszilagyi.sedito.common

import org.scalatest.FreeSpecLike
import org.scalatest.Matchers._

final class WordAlignmentTest extends FreeSpecLike{
  val alignment = LineAlignment(Set(LineMatch(LineIdx(0), LineIdx(0))))

  private def m(left: String, right: String, leftStart: Int, leftEnd: Int, rightStart: Int, rightEnd: Int): WordMatch = {
    WordMatch(
      Selection(left, LineIdx(0), from = CharIdxInLine(leftStart), toExcl = CharIdxInLine(leftEnd)),
      Selection(right, LineIdx(0), from = CharIdxInLine(rightStart), toExcl = CharIdxInLine(rightEnd))
    )
  }

  "simple changes" in {
                  // 012345678901234567890123456789012
    val leftLine  = "One apple is going home tonight"
    val rightLine = "Two apples is coming home tonight"

    //sortBy for easier comparison
    WordAlignment.fromOld(Vector(leftLine), Vector(rightLine), alignment).matches.toSeq.sortBy(_.left.from.i) shouldBe
      Set(
        m(leftLine, rightLine, leftStart = 4, leftEnd = 9, rightStart = 4, rightEnd = 10),
        m(leftLine, rightLine, leftStart = 10, leftEnd = 12, rightStart = 11, rightEnd = 13),
        m(leftLine, rightLine, leftStart = 19, leftEnd = 23, rightStart = 21, rightEnd = 25),
        m(leftLine, rightLine, leftStart = 24, leftEnd = 31, rightStart = 26, rightEnd = 33)
      ).toSeq.sortBy(_.left.from.i)
  }

  "reorder" in {
                  // 0123456789012345678
    val leftLine  = "One apple is going"
    val rightLine = "going is apple one"

    //sortBy for easier comparison
    WordAlignment.fromOld(Vector(leftLine), Vector(rightLine), alignment).matches.toSeq.sortBy(_.left.from.i) shouldBe
      Set(
        m(leftLine, rightLine, leftStart = 0, leftEnd = 3, rightStart = 15, rightEnd = 18),
        m(leftLine, rightLine, leftStart = 4, leftEnd = 9, rightStart = 9, rightEnd = 14),
        m(leftLine, rightLine, leftStart = 10, leftEnd = 12, rightStart = 6, rightEnd = 8),
        m(leftLine, rightLine, leftStart = 13, leftEnd = 18, rightStart = 0, rightEnd = 5)
      ).toSeq.sortBy(_.left.from.i)
  }

  "ambiguous simple" in {
                  // 0123456789012345678
    val leftLine  = "LongWord"
    val rightLine = "LongWord1 LongWord2"

    WordAlignment.fromOld(Vector(leftLine), Vector(rightLine), alignment).matches should (
      equal(Set(
         m(leftLine, rightLine, leftStart = 0, leftEnd = 8, rightStart = 0, rightEnd = 9)
      ))
      or
      equal(Set(
        m(leftLine, rightLine, leftStart = 0, leftEnd = 8, rightStart = 10, rightEnd = 19)
      ))
    )
  }

  "ambiguous simple reverse" in {
                  // 01234567890123456789
    val leftLine  = "LongWord1 LongWord2"
    val rightLine = "LongWord"

    WordAlignment.fromOld(Vector(leftLine), Vector(rightLine), alignment).matches should (
      equal(Set(
        m(leftLine, rightLine, leftStart = 0, leftEnd = 9, rightStart = 0, rightEnd = 8)
      ))
      or
      equal(Set(
        m(leftLine, rightLine, leftStart = 10, leftEnd = 19, rightStart = 0, rightEnd = 8)
      ))
    )
  }
}