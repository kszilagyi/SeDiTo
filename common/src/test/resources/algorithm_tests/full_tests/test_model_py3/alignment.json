{
  "matches": [{
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "    with open(path) as f:",
      "lineIdx": 32,
      "from": 20,
      "to": 22
    },
    "right": {
      "line": "    with open(path) as f:",
      "lineIdx": 16,
      "from": 20,
      "to": 22
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 19,
      "to": 35
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 19,
      "to": 35
    }
  }, {
    "left": {
      "line": "            print(\"\")",
      "lineIdx": 88,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "            print(\"\")",
      "lineIdx": 69,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 20,
      "to": 25
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 20,
      "to": 25
    }
  }, {
    "left": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 46,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 27,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 81,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 62,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 4,
      "to": 14
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 4,
      "to": 14
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 85,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 66,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 55,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 36,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 68,
      "to": 73
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 68,
      "to": 73
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 85,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 66,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 106,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 87,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 81,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 62,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 94,
      "from": 11,
      "to": 16
    },
    "right": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 75,
      "from": 11,
      "to": 16
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 46,
      "from": 8,
      "to": 36
    },
    "right": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 27,
      "from": 8,
      "to": 36
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 71,
      "to": 76
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 71,
      "to": 76
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 92,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 73,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 92,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 73,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 67,
      "to": 71
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 67,
      "to": 71
    }
  }, {
    "left": {
      "line": "main()",
      "lineIdx": 112,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "main()",
      "lineIdx": 93,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "    recall = true_pos_sum/actual_positives_sum",
      "lineIdx": 96,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    recall = true_pos_sum/actual_positives_sum",
      "lineIdx": 77,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 65,
      "from": 12,
      "to": 18
    },
    "right": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 46,
      "from": 12,
      "to": 18
    }
  }, {
    "left": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 47,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 28,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 93,
      "from": 35,
      "to": 47
    },
    "right": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 74,
      "from": 35,
      "to": 47
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 85,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 66,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 80,
      "from": 27,
      "to": 35
    },
    "right": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 61,
      "from": 27,
      "to": 35
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 65,
      "to": 91
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 65,
      "to": 91
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 61,
      "to": 68
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 61,
      "to": 68
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 12,
      "to": 21
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 12,
      "to": 21
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 4,
      "to": 14
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 4,
      "to": 14
    }
  }, {
    "left": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 92,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 73,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 81,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 62,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 46,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 27,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 92,
      "from": 11,
      "to": 27
    },
    "right": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 73,
      "from": 11,
      "to": 27
    }
  }, {
    "left": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 109,
      "from": 37,
      "to": 41
    },
    "right": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 90,
      "from": 37,
      "to": 41
    }
  }, {
    "left": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 46,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 27,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    n_sum = 0",
      "lineIdx": 50,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    n_sum = 0",
      "lineIdx": 31,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 99,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 80,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 102,
      "to": 107
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 102,
      "to": 107
    }
  }, {
    "left": {
      "line": "def get_immediate_subdirectories(a_dir):",
      "lineIdx": 43,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "def get_immediate_subdirectories(a_dir):",
      "lineIdx": 24,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    n_sum = 0",
      "lineIdx": 50,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    n_sum = 0",
      "lineIdx": 31,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "            print(\"\")",
      "lineIdx": 88,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "            print(\"\")",
      "lineIdx": 69,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 77,
      "to": 79
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 77,
      "to": 79
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 94,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 75,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 84,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 65,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 37,
      "to": 62
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 37,
      "to": 62
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 15,
      "to": 17
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 15,
      "to": 17
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 60,
      "to": 73
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 60,
      "to": 73
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 64,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 45,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 49,
      "to": 53
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 49,
      "to": 53
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 29,
      "to": 32
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 29,
      "to": 32
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 80,
      "to": 86
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 80,
      "to": 86
    }
  }, {
    "left": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 99,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 80,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 78,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 59,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": "    with open(path) as f:",
      "lineIdx": 32,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    with open(path) as f:",
      "lineIdx": 16,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 33,
      "to": 38
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 33,
      "to": 38
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 76,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 57,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 55,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 36,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 47,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 28,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 80,
      "from": 15,
      "to": 24
    },
    "right": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 61,
      "from": 15,
      "to": 24
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 43,
      "to": 52
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 43,
      "to": 52
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 17,
      "to": 21
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 17,
      "to": 21
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 86,
      "from": 15,
      "to": 24
    },
    "right": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 67,
      "from": 15,
      "to": 24
    }
  }, {
    "left": {
      "line": "            #testing scale method",
      "lineIdx": 59,
      "from": 27,
      "to": 33
    },
    "right": {
      "line": "            #testing scale method",
      "lineIdx": 40,
      "from": 27,
      "to": 33
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "            precision = 1",
      "lineIdx": 79,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "            precision = 1",
      "lineIdx": 60,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 15,
      "to": 20
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 15,
      "to": 20
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 78,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 59,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 37,
      "to": 39
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 37,
      "to": 39
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 23,
      "to": 25
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 23,
      "to": 25
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 65,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 46,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 39,
      "to": 42
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 39,
      "to": 42
    }
  }, {
    "left": {
      "line": "    recall = true_pos_sum/actual_positives_sum",
      "lineIdx": 96,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    recall = true_pos_sum/actual_positives_sum",
      "lineIdx": 77,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 95,
      "from": 30,
      "to": 43
    },
    "right": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 76,
      "from": 30,
      "to": 43
    }
  }, {
    "left": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 99,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 80,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "import numpy",
      "lineIdx": 7,
      "from": 7,
      "to": 12
    },
    "right": {
      "line": "import numpy",
      "lineIdx": 7,
      "from": 7,
      "to": 12
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 93,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 74,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "    true_pos_sum = 0",
      "lineIdx": 53,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    true_pos_sum = 0",
      "lineIdx": 34,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 65,
      "from": 26,
      "to": 29
    },
    "right": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 46,
      "from": 26,
      "to": 29
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 57,
      "to": 68
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 57,
      "to": 68
    }
  }, {
    "left": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 95,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 76,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 96,
      "to": 101
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 96,
      "to": 101
    }
  }, {
    "left": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 64,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 45,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 92,
      "from": 33,
      "to": 36
    },
    "right": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 73,
      "from": 33,
      "to": 36
    }
  }, {
    "left": {
      "line": "            print(\"\")",
      "lineIdx": 88,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "            print(\"\")",
      "lineIdx": 69,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 65,
      "to": 67
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 65,
      "to": 67
    }
  }, {
    "left": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    for row in rows:",
      "lineIdx": 35,
      "from": 15,
      "to": 19
    },
    "right": {
      "line": "    for row in rows:",
      "lineIdx": 19,
      "from": 15,
      "to": 19
    }
  }, {
    "left": {
      "line": "def main():    ",
      "lineIdx": 103,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "def main():    ",
      "lineIdx": 84,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "            true_pos_sum += true_pos",
      "lineIdx": 71,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "            true_pos_sum += true_pos",
      "lineIdx": 52,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 31,
      "to": 36
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 31,
      "to": 36
    }
  }, {
    "left": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "            false_pos_sum += false_pos",
      "lineIdx": 70,
      "from": 12,
      "to": 25
    },
    "right": {
      "line": "            false_pos_sum += false_pos",
      "lineIdx": 51,
      "from": 12,
      "to": 25
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 68,
      "to": 76
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 68,
      "to": 76
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 56,
      "to": 59
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 56,
      "to": 59
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 64,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 45,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    for dir in dirs:",
      "lineIdx": 54,
      "from": 12,
      "to": 14
    },
    "right": {
      "line": "    for dir in dirs:",
      "lineIdx": 35,
      "from": 12,
      "to": 14
    }
  }, {
    "left": {
      "line": "            #assert p_acc == scaled_p_acc",
      "lineIdx": 63,
      "from": 29,
      "to": 41
    },
    "right": {
      "line": "            #assert p_acc == scaled_p_acc",
      "lineIdx": 44,
      "from": 29,
      "to": 41
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 77,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 58,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 110,
      "to": 111
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 110,
      "to": 111
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "from pprint import pprint",
      "lineIdx": 9,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "from pprint import pprint",
      "lineIdx": 9,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    true_pos_sum = 0",
      "lineIdx": 53,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    true_pos_sum = 0",
      "lineIdx": 34,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 91,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 72,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "            true_pos_sum += true_pos",
      "lineIdx": 71,
      "from": 12,
      "to": 24
    },
    "right": {
      "line": "            true_pos_sum += true_pos",
      "lineIdx": 52,
      "from": 12,
      "to": 24
    }
  }, {
    "left": {
      "line": "def get_immediate_subdirectories(a_dir):",
      "lineIdx": 43,
      "from": 4,
      "to": 32
    },
    "right": {
      "line": "def get_immediate_subdirectories(a_dir):",
      "lineIdx": 24,
      "from": 4,
      "to": 32
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 47,
      "to": 49
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 47,
      "to": 49
    }
  }, {
    "left": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 7,
      "to": 10
    },
    "right": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 7,
      "to": 10
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 94,
      "from": 17,
      "to": 26
    },
    "right": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 75,
      "from": 17,
      "to": 26
    }
  }, {
    "left": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 86,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 67,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "from subprocess import *",
      "lineIdx": 4,
      "from": 16,
      "to": 22
    },
    "right": {
      "line": "from subprocess import *",
      "lineIdx": 4,
      "from": 16,
      "to": 22
    }
  }, {
    "left": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 99,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 80,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 84,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 65,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 106,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 87,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 26,
      "to": 28
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 26,
      "to": 28
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 41,
      "to": 44
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 41,
      "to": 44
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 37,
      "to": 40
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 37,
      "to": 40
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 107,
      "to": 108
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 107,
      "to": 108
    }
  }, {
    "left": {
      "line": "            true_pos_sum += true_pos",
      "lineIdx": 71,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "            true_pos_sum += true_pos",
      "lineIdx": 52,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 106,
      "from": 25,
      "to": 27
    },
    "right": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 87,
      "from": 25,
      "to": 27
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 85,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 66,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "            recall = true_pos/actual_positives",
      "lineIdx": 83,
      "from": 21,
      "to": 29
    },
    "right": {
      "line": "            recall = true_pos/actual_positives",
      "lineIdx": 64,
      "from": 21,
      "to": 29
    }
  }, {
    "left": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 109,
      "from": 11,
      "to": 18
    },
    "right": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 90,
      "from": 11,
      "to": 18
    }
  }, {
    "left": {
      "line": "    n_sum = 0",
      "lineIdx": 50,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    n_sum = 0",
      "lineIdx": 31,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 91,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 72,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 77,
      "to": 82
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 77,
      "to": 82
    }
  }, {
    "left": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 80,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 61,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    range_dict = {}",
      "lineIdx": 34,
      "from": 4,
      "to": 14
    },
    "right": {
      "line": "    range_dict = {}",
      "lineIdx": 18,
      "from": 4,
      "to": 14
    }
  }, {
    "left": {
      "line": "            #testing scale method",
      "lineIdx": 59,
      "from": 21,
      "to": 26
    },
    "right": {
      "line": "            #testing scale method",
      "lineIdx": 40,
      "from": 21,
      "to": 26
    }
  }, {
    "left": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 77,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 58,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 32,
      "to": 36
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 32,
      "to": 36
    }
  }, {
    "left": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 95,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 76,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 4,
      "to": 14
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 4,
      "to": 14
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 15,
      "to": 21
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 15,
      "to": 21
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 31,
      "to": 43
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 31,
      "to": 43
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "            print(\"\")",
      "lineIdx": 88,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            print(\"\")",
      "lineIdx": 69,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 84,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 65,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "    for row in rows:",
      "lineIdx": 35,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    for row in rows:",
      "lineIdx": 19,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 99,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 80,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 55,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 36,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 109,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 90,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 94,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 75,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 57,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 38,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 57,
      "from": 15,
      "to": 20
    },
    "right": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 38,
      "from": 15,
      "to": 20
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 44,
      "to": 50
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 44,
      "to": 50
    }
  }, {
    "left": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 85,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 66,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 76,
      "from": 45,
      "to": 61
    },
    "right": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 57,
      "from": 45,
      "to": 61
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 35,
      "to": 40
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 35,
      "to": 40
    }
  }, {
    "left": {
      "line": "            actual_positives_sum += actual_positives",
      "lineIdx": 73,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "            actual_positives_sum += actual_positives",
      "lineIdx": 54,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "            precision = 1",
      "lineIdx": 79,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "            precision = 1",
      "lineIdx": 60,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "import functools",
      "lineIdx": 8,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import functools",
      "lineIdx": 8,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 81,
      "from": 38,
      "to": 47
    },
    "right": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 62,
      "from": 38,
      "to": 47
    }
  }, {
    "left": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 46,
      "from": 41,
      "to": 56
    },
    "right": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 27,
      "from": 41,
      "to": 56
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "import os",
      "lineIdx": 3,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import os",
      "lineIdx": 3,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 78,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 59,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 77,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 58,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 93,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 74,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 93,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 74,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 77,
      "from": 19,
      "to": 23
    },
    "right": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 58,
      "from": 19,
      "to": 23
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 65,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 46,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 90,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 71,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 90,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 71,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    with open(path) as f:",
      "lineIdx": 32,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    with open(path) as f:",
      "lineIdx": 16,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 64,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 45,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 57,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 38,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 95,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 76,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "           # assert scaled_predict_y == calc_y",
      "lineIdx": 62,
      "from": 20,
      "to": 36
    },
    "right": {
      "line": "           # assert scaled_predict_y == calc_y",
      "lineIdx": 43,
      "from": 20,
      "to": 36
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 52,
      "to": 55
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 52,
      "to": 55
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 15,
      "to": 20
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 15,
      "to": 20
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 26,
      "to": 31
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 26,
      "to": 31
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 68,
      "to": 71
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 68,
      "to": 71
    }
  }, {
    "left": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 65,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 46,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 74,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 55,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 98,
      "to": 103
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 98,
      "to": 103
    }
  }, {
    "left": {
      "line": "from subprocess import *",
      "lineIdx": 4,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "from subprocess import *",
      "lineIdx": 4,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 76,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 57,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 106,
      "from": 11,
      "to": 18
    },
    "right": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 87,
      "from": 11,
      "to": 18
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 76,
      "from": 41,
      "to": 44
    },
    "right": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 57,
      "from": 41,
      "to": 44
    }
  }, {
    "left": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 77,
      "from": 43,
      "to": 51
    },
    "right": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 58,
      "from": 43,
      "to": 51
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "def read_ranges(path):",
      "lineIdx": 31,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "def read_ranges(path):",
      "lineIdx": 15,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "           # assert scaled_predict_y == calc_y",
      "lineIdx": 62,
      "from": 40,
      "to": 46
    },
    "right": {
      "line": "           # assert scaled_predict_y == calc_y",
      "lineIdx": 43,
      "from": 40,
      "to": 46
    }
  }, {
    "left": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 78,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 59,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 54,
      "to": 68
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 54,
      "to": 68
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 58,
      "to": 63
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 58,
      "to": 63
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 109,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 90,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 76,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 57,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "def read_ranges(path):",
      "lineIdx": 31,
      "from": 4,
      "to": 15
    },
    "right": {
      "line": "def read_ranges(path):",
      "lineIdx": 15,
      "from": 4,
      "to": 15
    }
  }, {
    "left": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 84,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 65,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 55,
      "from": 27,
      "to": 30
    },
    "right": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 36,
      "from": 27,
      "to": 30
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "import svm",
      "lineIdx": 5,
      "from": 7,
      "to": 10
    },
    "right": {
      "line": "import svm",
      "lineIdx": 5,
      "from": 7,
      "to": 10
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 71,
      "to": 75
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 71,
      "to": 75
    }
  }, {
    "left": {
      "line": "    with open(path) as f:",
      "lineIdx": 32,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "    with open(path) as f:",
      "lineIdx": 16,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 80,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 61,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 104,
      "to": 109
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 104,
      "to": 109
    }
  }, {
    "left": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 80,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 61,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 90,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 71,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 72,
      "to": 76
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 72,
      "to": 76
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 74,
      "from": 25,
      "to": 31
    },
    "right": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 55,
      "from": 25,
      "to": 31
    }
  }, {
    "left": {
      "line": "main()",
      "lineIdx": 112,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "main()",
      "lineIdx": 93,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 92,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 73,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 47,
      "from": 22,
      "to": 32
    },
    "right": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 28,
      "from": 22,
      "to": 32
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "    print(\"\")",
      "lineIdx": 108,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"\")",
      "lineIdx": 89,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 32,
      "to": 39
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 32,
      "to": 39
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 93,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 74,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 24,
      "to": 29
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 24,
      "to": 29
    }
  }, {
    "left": {
      "line": "           # assert scaled_predict_y == calc_y",
      "lineIdx": 62,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "           # assert scaled_predict_y == calc_y",
      "lineIdx": 43,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 94,
      "from": 36,
      "to": 49
    },
    "right": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 75,
      "from": 36,
      "to": 49
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 94,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 75,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 78,
      "from": 25,
      "to": 34
    },
    "right": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 59,
      "from": 25,
      "to": 34
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "    with open(path) as f:",
      "lineIdx": 32,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "    with open(path) as f:",
      "lineIdx": 16,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 8,
      "to": 18
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 8,
      "to": 18
    }
  }, {
    "left": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 99,
      "from": 7,
      "to": 16
    },
    "right": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 80,
      "from": 7,
      "to": 16
    }
  }, {
    "left": {
      "line": "def main():    ",
      "lineIdx": 103,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "def main():    ",
      "lineIdx": 84,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "            #assert p_acc == scaled_p_acc",
      "lineIdx": 63,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "            #assert p_acc == scaled_p_acc",
      "lineIdx": 44,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    for dir in dirs:",
      "lineIdx": 54,
      "from": 15,
      "to": 19
    },
    "right": {
      "line": "    for dir in dirs:",
      "lineIdx": 35,
      "from": 15,
      "to": 19
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 65,
      "from": 30,
      "to": 36
    },
    "right": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 46,
      "from": 30,
      "to": 36
    }
  }, {
    "left": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 47,
      "from": 34,
      "to": 48
    },
    "right": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 28,
      "from": 34,
      "to": 48
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 50,
      "to": 52
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 50,
      "to": 52
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 38,
      "to": 41
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 38,
      "to": 41
    }
  }, {
    "left": {
      "line": "            recall = true_pos/actual_positives",
      "lineIdx": 83,
      "from": 12,
      "to": 18
    },
    "right": {
      "line": "            recall = true_pos/actual_positives",
      "lineIdx": 64,
      "from": 12,
      "to": 18
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 69,
      "to": 72
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 69,
      "to": 72
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 66,
      "to": 70
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 66,
      "to": 70
    }
  }, {
    "left": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 86,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 67,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 81,
      "from": 50,
      "to": 58
    },
    "right": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 62,
      "from": 50,
      "to": 58
    }
  }, {
    "left": {
      "line": "    with open(path) as f:",
      "lineIdx": 32,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    with open(path) as f:",
      "lineIdx": 16,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "    range_dict = {}",
      "lineIdx": 34,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    range_dict = {}",
      "lineIdx": 18,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 29,
      "to": 31
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 29,
      "to": 31
    }
  }, {
    "left": {
      "line": "    print(\"\")",
      "lineIdx": 108,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    print(\"\")",
      "lineIdx": 89,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 17,
      "to": 20
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 17,
      "to": 20
    }
  }, {
    "left": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 85,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 66,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 38,
      "to": 53
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 38,
      "to": 53
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 78,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 59,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "def read_ranges(path):",
      "lineIdx": 31,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "def read_ranges(path):",
      "lineIdx": 15,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 94,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 75,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 55,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 36,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 64,
      "from": 34,
      "to": 37
    },
    "right": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 45,
      "from": 34,
      "to": 37
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 12,
      "to": 28
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 12,
      "to": 28
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 106,
      "from": 33,
      "to": 37
    },
    "right": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 87,
      "from": 33,
      "to": 37
    }
  }, {
    "left": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 77,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 58,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 64,
      "from": 19,
      "to": 22
    },
    "right": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 45,
      "from": 19,
      "to": 22
    }
  }, {
    "left": {
      "line": "            false_pos_sum += false_pos",
      "lineIdx": 70,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "            false_pos_sum += false_pos",
      "lineIdx": 51,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 46,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 27,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 29,
      "to": 31
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 29,
      "to": 31
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 91,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 72,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 77,
      "from": 39,
      "to": 42
    },
    "right": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 58,
      "from": 39,
      "to": 42
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 93,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 74,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "main()",
      "lineIdx": 112,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "main()",
      "lineIdx": 93,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "def main():    ",
      "lineIdx": 103,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def main():    ",
      "lineIdx": 84,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 92,
      "from": 37,
      "to": 57
    },
    "right": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 73,
      "from": 37,
      "to": 57
    }
  }, {
    "left": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 46,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 27,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "    false_pos_sum = 0",
      "lineIdx": 51,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    false_pos_sum = 0",
      "lineIdx": 32,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 47,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 28,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    print(\"\")",
      "lineIdx": 108,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"\")",
      "lineIdx": 89,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 92,
      "to": 97
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 92,
      "to": 97
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 49,
      "to": 53
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 49,
      "to": 53
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 45,
      "to": 48
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 45,
      "to": 48
    }
  }, {
    "left": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 84,
      "from": 38,
      "to": 47
    },
    "right": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 65,
      "from": 38,
      "to": 47
    }
  }, {
    "left": {
      "line": "    recall = true_pos_sum/actual_positives_sum",
      "lineIdx": 96,
      "from": 13,
      "to": 25
    },
    "right": {
      "line": "    recall = true_pos_sum/actual_positives_sum",
      "lineIdx": 77,
      "from": 13,
      "to": 25
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 78,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 59,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 92,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 73,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 76,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 57,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "    for dir in dirs:",
      "lineIdx": 54,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "    for dir in dirs:",
      "lineIdx": 35,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 59,
      "to": 68
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 59,
      "to": 68
    }
  }, {
    "left": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 48,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 29,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 12,
      "to": 26
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 12,
      "to": 26
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 90,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 71,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 40,
      "to": 43
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 40,
      "to": 43
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 81,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 62,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "def get_immediate_subdirectories(a_dir):",
      "lineIdx": 43,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "def get_immediate_subdirectories(a_dir):",
      "lineIdx": 24,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 68,
      "to": 71
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 68,
      "to": 71
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 91,
      "from": 28,
      "to": 31
    },
    "right": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 72,
      "from": 28,
      "to": 31
    }
  }, {
    "left": {
      "line": "import functools",
      "lineIdx": 8,
      "from": 7,
      "to": 16
    },
    "right": {
      "line": "import functools",
      "lineIdx": 8,
      "from": 7,
      "to": 16
    }
  }, {
    "left": {
      "line": "            recall = true_pos/actual_positives",
      "lineIdx": 83,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "            recall = true_pos/actual_positives",
      "lineIdx": 64,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 76,
      "to": 78
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 76,
      "to": 78
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 53,
      "to": 59
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 53,
      "to": 59
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 109,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 90,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 78,
      "from": 44,
      "to": 53
    },
    "right": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 59,
      "from": 44,
      "to": 53
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 95,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 76,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 15,
      "to": 22
    },
    "right": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 15,
      "to": 22
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 109,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 90,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 34,
      "to": 37
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 34,
      "to": 37
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 50,
      "to": 55
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 50,
      "to": 55
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 31,
      "to": 34
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 31,
      "to": 34
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "    recall = true_pos_sum/actual_positives_sum",
      "lineIdx": 96,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    recall = true_pos_sum/actual_positives_sum",
      "lineIdx": 77,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 85,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 66,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 64,
      "from": 12,
      "to": 18
    },
    "right": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 45,
      "from": 12,
      "to": 18
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 94,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 75,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 24,
      "to": 27
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 24,
      "to": 27
    }
  }, {
    "left": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 84,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 65,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 57,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 38,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "    return range_dict",
      "lineIdx": 37,
      "from": 11,
      "to": 21
    },
    "right": {
      "line": "    return range_dict",
      "lineIdx": 21,
      "from": 11,
      "to": 21
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 38,
      "to": 49
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 38,
      "to": 49
    }
  }, {
    "left": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 85,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 66,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 13,
      "to": 19
    },
    "right": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 13,
      "to": 19
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 18,
      "to": 22
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 18,
      "to": 22
    }
  }, {
    "left": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 81,
      "from": 16,
      "to": 25
    },
    "right": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 62,
      "from": 16,
      "to": 25
    }
  }, {
    "left": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 95,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 76,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    false_pos_sum = 0",
      "lineIdx": 51,
      "from": 4,
      "to": 17
    },
    "right": {
      "line": "    false_pos_sum = 0",
      "lineIdx": 32,
      "from": 4,
      "to": 17
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 47,
      "from": 4,
      "to": 14
    },
    "right": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 28,
      "from": 4,
      "to": 14
    }
  }, {
    "left": {
      "line": "from subprocess import *",
      "lineIdx": 4,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "from subprocess import *",
      "lineIdx": 4,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 60,
      "to": 64
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 60,
      "to": 64
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 55,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 36,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 93,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 74,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 91,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 72,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 85,
      "to": 89
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 85,
      "to": 89
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    actual_positives_sum = 0",
      "lineIdx": 52,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    actual_positives_sum = 0",
      "lineIdx": 33,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 32,
      "to": 34
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 32,
      "to": 34
    }
  }, {
    "left": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 84,
      "from": 19,
      "to": 28
    },
    "right": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 65,
      "from": 19,
      "to": 28
    }
  }, {
    "left": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 86,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 67,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 13,
      "to": 17
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 13,
      "to": 17
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "    recall = true_pos_sum/actual_positives_sum",
      "lineIdx": 96,
      "from": 26,
      "to": 46
    },
    "right": {
      "line": "    recall = true_pos_sum/actual_positives_sum",
      "lineIdx": 77,
      "from": 26,
      "to": 46
    }
  }, {
    "left": {
      "line": "import sys",
      "lineIdx": 2,
      "from": 7,
      "to": 10
    },
    "right": {
      "line": "import sys",
      "lineIdx": 2,
      "from": 7,
      "to": 10
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 54,
      "to": 67
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 54,
      "to": 67
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 67,
      "to": 70
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 67,
      "to": 70
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 40,
      "to": 44
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 40,
      "to": 44
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 47,
      "from": 15,
      "to": 20
    },
    "right": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 28,
      "from": 15,
      "to": 20
    }
  }, {
    "left": {
      "line": "    for row in rows:",
      "lineIdx": 35,
      "from": 12,
      "to": 14
    },
    "right": {
      "line": "    for row in rows:",
      "lineIdx": 19,
      "from": 12,
      "to": 14
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 41,
      "to": 50
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 41,
      "to": 50
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 91,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 72,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "            #assert p_acc == scaled_p_acc",
      "lineIdx": 63,
      "from": 13,
      "to": 19
    },
    "right": {
      "line": "            #assert p_acc == scaled_p_acc",
      "lineIdx": 44,
      "from": 13,
      "to": 19
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 72,
      "to": 76
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 72,
      "to": 76
    }
  }, {
    "left": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 55,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 36,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "           # assert scaled_predict_y == calc_y",
      "lineIdx": 62,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "           # assert scaled_predict_y == calc_y",
      "lineIdx": 43,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 77,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 58,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 72,
      "to": 82
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 72,
      "to": 82
    }
  }, {
    "left": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 85,
      "from": 35,
      "to": 41
    },
    "right": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 66,
      "from": 35,
      "to": 41
    }
  }, {
    "left": {
      "line": "            recall = true_pos/actual_positives",
      "lineIdx": 83,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "            recall = true_pos/actual_positives",
      "lineIdx": 64,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 106,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 87,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 23,
      "to": 28
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 23,
      "to": 28
    }
  }, {
    "left": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 65,
      "from": 21,
      "to": 25
    },
    "right": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 46,
      "from": 21,
      "to": 25
    }
  }, {
    "left": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 90,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 71,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "from subprocess import *",
      "lineIdx": 4,
      "from": 5,
      "to": 15
    },
    "right": {
      "line": "from subprocess import *",
      "lineIdx": 4,
      "from": 5,
      "to": 15
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 47,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 28,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "import svm",
      "lineIdx": 5,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import svm",
      "lineIdx": 5,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 106,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 87,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "    for row in rows:",
      "lineIdx": 35,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    for row in rows:",
      "lineIdx": 19,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 56,
      "to": 60
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 56,
      "to": 60
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 39,
      "to": 64
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 39,
      "to": 64
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 38,
      "to": 53
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 38,
      "to": 53
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "def get_immediate_subdirectories(a_dir):",
      "lineIdx": 43,
      "from": 33,
      "to": 38
    },
    "right": {
      "line": "def get_immediate_subdirectories(a_dir):",
      "lineIdx": 24,
      "from": 33,
      "to": 38
    }
  }, {
    "left": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 33,
      "to": 45
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 33,
      "to": 45
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 77,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 58,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 46,
      "to": 57
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 46,
      "to": 57
    }
  }, {
    "left": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 77,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 58,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 90,
      "from": 11,
      "to": 18
    },
    "right": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 71,
      "from": 11,
      "to": 18
    }
  }, {
    "left": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 78,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 59,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 77,
      "to": 80
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 77,
      "to": 80
    }
  }, {
    "left": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 95,
      "from": 4,
      "to": 13
    },
    "right": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 76,
      "from": 4,
      "to": 13
    }
  }, {
    "left": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 76,
      "from": 19,
      "to": 35
    },
    "right": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 57,
      "from": 19,
      "to": 35
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "    return range_dict",
      "lineIdx": 37,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return range_dict",
      "lineIdx": 21,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 65,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 46,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 80,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 61,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "def main():    ",
      "lineIdx": 103,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "def main():    ",
      "lineIdx": 84,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 63,
      "to": 89
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 63,
      "to": 89
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 78,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 59,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "from pprint import pprint",
      "lineIdx": 9,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "from pprint import pprint",
      "lineIdx": 9,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 46,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 27,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 91,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 72,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    with open(path) as f:",
      "lineIdx": 32,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "    with open(path) as f:",
      "lineIdx": 16,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 12,
      "to": 20
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 12,
      "to": 20
    }
  }, {
    "left": {
      "line": "from pprint import pprint",
      "lineIdx": 9,
      "from": 12,
      "to": 18
    },
    "right": {
      "line": "from pprint import pprint",
      "lineIdx": 9,
      "from": 12,
      "to": 18
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 46,
      "to": 66
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 46,
      "to": 66
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 60,
      "to": 63
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 60,
      "to": 63
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 85,
      "to": 90
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 85,
      "to": 90
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "    print(\"\")",
      "lineIdx": 108,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    print(\"\")",
      "lineIdx": 89,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 13,
      "to": 29
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 13,
      "to": 29
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 22,
      "to": 32
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 22,
      "to": 32
    }
  }, {
    "left": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 99,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 80,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 27,
      "to": 35
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 27,
      "to": 35
    }
  }, {
    "left": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 47,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 28,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 49,
      "to": 52
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 49,
      "to": 52
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 81,
      "to": 86
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 81,
      "to": 86
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 76,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 57,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "            false_pos_sum += false_pos",
      "lineIdx": 70,
      "from": 29,
      "to": 38
    },
    "right": {
      "line": "            false_pos_sum += false_pos",
      "lineIdx": 51,
      "from": 29,
      "to": 38
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 73,
      "to": 79
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 73,
      "to": 79
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 79,
      "to": 85
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 79,
      "to": 85
    }
  }, {
    "left": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 78,
      "from": 40,
      "to": 43
    },
    "right": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 59,
      "from": 40,
      "to": 43
    }
  }, {
    "left": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 76,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 57,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 64,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 45,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 48,
      "to": 52
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 48,
      "to": 52
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 106,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 87,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 95,
      "from": 46,
      "to": 58
    },
    "right": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 76,
      "from": 46,
      "to": 58
    }
  }, {
    "left": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 94,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 75,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 55,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 36,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 48,
      "from": 30,
      "to": 32
    },
    "right": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 29,
      "from": 30,
      "to": 32
    }
  }, {
    "left": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 94,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 75,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "    with open(path) as f:",
      "lineIdx": 32,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    with open(path) as f:",
      "lineIdx": 16,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 65,
      "to": 76
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 65,
      "to": 76
    }
  }, {
    "left": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 46,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 27,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 109,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 90,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 33,
      "to": 37
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 33,
      "to": 37
    }
  }, {
    "left": {
      "line": "from pprint import pprint",
      "lineIdx": 9,
      "from": 5,
      "to": 11
    },
    "right": {
      "line": "from pprint import pprint",
      "lineIdx": 9,
      "from": 5,
      "to": 11
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 51,
      "to": 57
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 51,
      "to": 57
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 78,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 59,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 48,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 29,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 74,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 55,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 86,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 67,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 104,
      "to": 105
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 104,
      "to": 105
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    print(\"\")",
      "lineIdx": 108,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"\")",
      "lineIdx": 89,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 84,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 65,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 84,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 65,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 64,
      "from": 23,
      "to": 29
    },
    "right": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 45,
      "from": 23,
      "to": 29
    }
  }, {
    "left": {
      "line": "    true_pos_sum = 0",
      "lineIdx": 53,
      "from": 4,
      "to": 16
    },
    "right": {
      "line": "    true_pos_sum = 0",
      "lineIdx": 34,
      "from": 4,
      "to": 16
    }
  }, {
    "left": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 48,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 29,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "def read_ranges(path):",
      "lineIdx": 31,
      "from": 16,
      "to": 20
    },
    "right": {
      "line": "def read_ranges(path):",
      "lineIdx": 15,
      "from": 16,
      "to": 20
    }
  }, {
    "left": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 74,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 55,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 84,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 65,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 91,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 72,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 44,
      "to": 47
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 44,
      "to": 47
    }
  }, {
    "left": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 90,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"Summary: \")",
      "lineIdx": 71,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 64,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 45,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "            #assert p_acc == scaled_p_acc",
      "lineIdx": 63,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "            #assert p_acc == scaled_p_acc",
      "lineIdx": 44,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "            false_pos_sum += false_pos",
      "lineIdx": 70,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "            false_pos_sum += false_pos",
      "lineIdx": 51,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 57,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 38,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 86,
      "from": 27,
      "to": 33
    },
    "right": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 67,
      "from": 27,
      "to": 33
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 106,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 87,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "    actual_positives_sum = 0",
      "lineIdx": 52,
      "from": 4,
      "to": 24
    },
    "right": {
      "line": "    actual_positives_sum = 0",
      "lineIdx": 33,
      "from": 4,
      "to": 24
    }
  }, {
    "left": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 65,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 46,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 12,
      "to": 18
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 12,
      "to": 18
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 16,
      "to": 21
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 16,
      "to": 21
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    range_dict = {}",
      "lineIdx": 34,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    range_dict = {}",
      "lineIdx": 18,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 60,
      "to": 64
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 60,
      "to": 64
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 71,
      "to": 77
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 71,
      "to": 77
    }
  }, {
    "left": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 92,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 73,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "    for dir in dirs:",
      "lineIdx": 54,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    for dir in dirs:",
      "lineIdx": 35,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 76,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 57,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 109,
      "from": 25,
      "to": 27
    },
    "right": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 90,
      "from": 25,
      "to": 27
    }
  }, {
    "left": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 92,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 73,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 78,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "            print(\"False positives: \" + str(false_pos))",
      "lineIdx": 59,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 91,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 72,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 36,
      "to": 39
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 36,
      "to": 39
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "def read_ranges(path):",
      "lineIdx": 31,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def read_ranges(path):",
      "lineIdx": 15,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 93,
      "from": 31,
      "to": 34
    },
    "right": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 74,
      "from": 31,
      "to": 34
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 93,
      "from": 16,
      "to": 25
    },
    "right": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 74,
      "from": 16,
      "to": 25
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 94,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 75,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 92,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 73,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 74,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 55,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 30,
      "to": 32
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 30,
      "to": 32
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 56,
      "to": 59
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 56,
      "to": 59
    }
  }, {
    "left": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 74,
      "from": 21,
      "to": 24
    },
    "right": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 55,
      "from": 21,
      "to": 24
    }
  }, {
    "left": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 65,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 46,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 26,
      "to": 31
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 26,
      "to": 31
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "           # assert scaled_predict_y == calc_y",
      "lineIdx": 62,
      "from": 13,
      "to": 19
    },
    "right": {
      "line": "           # assert scaled_predict_y == calc_y",
      "lineIdx": 43,
      "from": 13,
      "to": 19
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 77,
      "from": 24,
      "to": 33
    },
    "right": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 58,
      "from": 24,
      "to": 33
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 58,
      "to": 63
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 58,
      "to": 63
    }
  }, {
    "left": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 95,
      "from": 16,
      "to": 28
    },
    "right": {
      "line": "    precision = true_pos_sum/(false_pos_sum + true_pos_sum)",
      "lineIdx": 76,
      "from": 16,
      "to": 28
    }
  }, {
    "left": {
      "line": "            #testing scale method",
      "lineIdx": 59,
      "from": 13,
      "to": 20
    },
    "right": {
      "line": "            #testing scale method",
      "lineIdx": 40,
      "from": 13,
      "to": 20
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 61,
      "to": 65
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 61,
      "to": 65
    }
  }, {
    "left": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 48,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 29,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "            recall = true_pos/actual_positives",
      "lineIdx": 83,
      "from": 30,
      "to": 46
    },
    "right": {
      "line": "            recall = true_pos/actual_positives",
      "lineIdx": 64,
      "from": 30,
      "to": 46
    }
  }, {
    "left": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 76,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 57,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    for dir in dirs:",
      "lineIdx": 54,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    for dir in dirs:",
      "lineIdx": 35,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "            true_pos_sum += true_pos",
      "lineIdx": 71,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "            true_pos_sum += true_pos",
      "lineIdx": 52,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    range_dict = {}",
      "lineIdx": 34,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    range_dict = {}",
      "lineIdx": 18,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    actual_positives_sum = 0",
      "lineIdx": 52,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    actual_positives_sum = 0",
      "lineIdx": 33,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 106,
      "from": 28,
      "to": 32
    },
    "right": {
      "line": "    print('Running tests on test data')",
      "lineIdx": 87,
      "from": 28,
      "to": 32
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 74,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "            n_sum += len(calc_y)",
      "lineIdx": 55,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 45,
      "to": 51
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 45,
      "to": 51
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 92,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    print(\"Actual_positives: \" + str(actual_positives_sum))",
      "lineIdx": 73,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 31,
      "to": 43
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 31,
      "to": 43
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 75,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "            print(\"Sample count:\" + str(len(calc_y)))",
      "lineIdx": 56,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 65,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "            zipped = list(zip(calc_y, ref_y))",
      "lineIdx": 46,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "            #assert p_acc == scaled_p_acc",
      "lineIdx": 63,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "            #assert p_acc == scaled_p_acc",
      "lineIdx": 44,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 57,
      "from": 8,
      "to": 10
    },
    "right": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 38,
      "from": 8,
      "to": 10
    }
  }, {
    "left": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 94,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 75,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 64,
      "to": 66
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 64,
      "to": 66
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "def read_ranges(path):",
      "lineIdx": 31,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "def read_ranges(path):",
      "lineIdx": 15,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 94,
      "from": 32,
      "to": 35
    },
    "right": {
      "line": "    print(\"False positives: \" + str(false_pos_sum))",
      "lineIdx": 75,
      "from": 32,
      "to": 35
    }
  }, {
    "left": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 46,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 27,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 76,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "            print(\"Actual_positives: \" + str(actual_positives))",
      "lineIdx": 57,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 92,
      "to": 97
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 92,
      "to": 97
    }
  }, {
    "left": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 93,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 74,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 5,
      "to": 12
    },
    "right": {
      "line": "from svmutil import *",
      "lineIdx": 6,
      "from": 5,
      "to": 12
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 48,
      "from": 14,
      "to": 28
    },
    "right": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 29,
      "from": 14,
      "to": 28
    }
  }, {
    "left": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 85,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 66,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 69,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "            actual_positives = sum(1 if elem > 0 else 0 for elem in ref_y)",
      "lineIdx": 50,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 100,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "        print(\"F1 score: \" + \"%.2f\" % (2*precision*recall/(precision + recall)))",
      "lineIdx": 81,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "            #testing scale method",
      "lineIdx": 59,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "            #testing scale method",
      "lineIdx": 40,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 86,
      "from": 12,
      "to": 14
    },
    "right": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 67,
      "from": 12,
      "to": 14
    }
  }, {
    "left": {
      "line": "            precision = 1",
      "lineIdx": 79,
      "from": 12,
      "to": 21
    },
    "right": {
      "line": "            precision = 1",
      "lineIdx": 60,
      "from": 12,
      "to": 21
    }
  }, {
    "left": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 64,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "            assert len(calc_y) == len(ref_y)",
      "lineIdx": 45,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 91,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 72,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 80,
      "from": 12,
      "to": 14
    },
    "right": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 61,
      "from": 12,
      "to": 14
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 77,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 58,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 24,
      "to": 26
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 24,
      "to": 26
    }
  }, {
    "left": {
      "line": "def get_immediate_subdirectories(a_dir):",
      "lineIdx": 43,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "def get_immediate_subdirectories(a_dir):",
      "lineIdx": 24,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "import numpy",
      "lineIdx": 7,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import numpy",
      "lineIdx": 7,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "    false_pos_sum = 0",
      "lineIdx": 51,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    false_pos_sum = 0",
      "lineIdx": 32,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 61,
      "to": 70
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 61,
      "to": 70
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 90,
      "to": 95
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 90,
      "to": 95
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 19,
      "to": 22
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 19,
      "to": 22
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 84,
      "to": 88
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 84,
      "to": 88
    }
  }, {
    "left": {
      "line": "    for row in rows:",
      "lineIdx": 35,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "    for row in rows:",
      "lineIdx": 19,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 57,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 38,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "def main():    ",
      "lineIdx": 103,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "def main():    ",
      "lineIdx": 84,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 91,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 72,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "            actual_positives_sum += actual_positives",
      "lineIdx": 73,
      "from": 12,
      "to": 32
    },
    "right": {
      "line": "            actual_positives_sum += actual_positives",
      "lineIdx": 54,
      "from": 12,
      "to": 32
    }
  }, {
    "left": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 48,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 29,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 60,
      "to": 64
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 60,
      "to": 64
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 40,
      "to": 45
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 40,
      "to": 45
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 99,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    if precision + recall != 0:",
      "lineIdx": 80,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 68,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "            true_pos = sum(1 if elem[0] > 0 and elem[1] > 0 else 0 for elem in zipped)",
      "lineIdx": 49,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "import sys",
      "lineIdx": 2,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import sys",
      "lineIdx": 2,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 22,
      "to": 32
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 22,
      "to": 32
    }
  }, {
    "left": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 36,
      "from": 50,
      "to": 55
    },
    "right": {
      "line": "        range_dict[int(row[0])] = (float(row[1]), float(row[2]))",
      "lineIdx": 20,
      "from": 50,
      "to": 55
    }
  }, {
    "left": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 93,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 74,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 93,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 74,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 31,
      "to": 35
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 31,
      "to": 35
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "            actual_positives_sum += actual_positives",
      "lineIdx": 73,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "            actual_positives_sum += actual_positives",
      "lineIdx": 54,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 84,
      "from": 34,
      "to": 37
    },
    "right": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 65,
      "from": 34,
      "to": 37
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 110,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/training_files.txt')",
      "lineIdx": 91,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 104,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    model = svm_load_model('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.model')",
      "lineIdx": 85,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 85,
      "from": 31,
      "to": 34
    },
    "right": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 66,
      "from": 31,
      "to": 34
    }
  }, {
    "left": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 47,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "def test_files(model, range_dict, file_list_file):",
      "lineIdx": 28,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 17,
      "to": 28
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 17,
      "to": 28
    }
  }, {
    "left": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 80,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "            if false_pos + true_pos != 0:",
      "lineIdx": 61,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 55,
      "from": 15,
      "to": 22
    },
    "right": {
      "line": "        print(\"Testing:\" + dir)",
      "lineIdx": 36,
      "from": 15,
      "to": 22
    }
  }, {
    "left": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 46,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 27,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 26,
      "to": 28
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 26,
      "to": 28
    }
  }, {
    "left": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 91,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 72,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 22,
      "to": 28
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 22,
      "to": 28
    }
  }, {
    "left": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 46,
      "from": 1,
      "to": 5
    },
    "right": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 27,
      "from": 1,
      "to": 5
    }
  }, {
    "left": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 109,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 90,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 53,
      "to": 57
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 53,
      "to": 57
    }
  }, {
    "left": {
      "line": "            print(\"\")",
      "lineIdx": 88,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "            print(\"\")",
      "lineIdx": 69,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 101,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "    print(\"*********************************************************\")",
      "lineIdx": 82,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 109,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print('Running tests on training data')",
      "lineIdx": 90,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 84,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "            print(\"Precision: \" + str(precision))",
      "lineIdx": 65,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 81,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 62,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 57,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "        if len(ref_y) > 0:",
      "lineIdx": 38,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 85,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "            print(\"Recall: \" + str(recall))",
      "lineIdx": 66,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "def get_immediate_subdirectories(a_dir):",
      "lineIdx": 43,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "def get_immediate_subdirectories(a_dir):",
      "lineIdx": 24,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 58,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "            calc_y, p_acc, whatever = svm_predict(ref_y, scale_input(x, range_dict), model)",
      "lineIdx": 39,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "import os",
      "lineIdx": 3,
      "from": 7,
      "to": 9
    },
    "right": {
      "line": "import os",
      "lineIdx": 3,
      "from": 7,
      "to": 9
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 46,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "#dirs = get_immediate_subdirectories('../features_output/')",
      "lineIdx": 27,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 56,
      "from": 40,
      "to": 55
    },
    "right": {
      "line": "        ref_y, x = svm_read_problem('../features_output/' + dir + '/features.txt')",
      "lineIdx": 37,
      "from": 40,
      "to": 55
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "            actual_positives_sum += actual_positives",
      "lineIdx": 73,
      "from": 36,
      "to": 52
    },
    "right": {
      "line": "            actual_positives_sum += actual_positives",
      "lineIdx": 54,
      "from": 36,
      "to": 52
    }
  }, {
    "left": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 81,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "                precision = true_pos/(false_pos + true_pos)",
      "lineIdx": 62,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 87,
      "from": 53,
      "to": 59
    },
    "right": {
      "line": "                print(\"F1 score: \" + str(2*precision*recall/(precision + recall)))",
      "lineIdx": 68,
      "from": 53,
      "to": 59
    }
  }, {
    "left": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 61,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "            #scaled_predict_y, scaled_p_acc = svm_predict(ref_y, scale_input(x), model)",
      "lineIdx": 42,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 105,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    range_dict = read_ranges('../build-ContextBasedGeneralDiffer-Desktop_Qt_5_4_1_GCC_64bit-Debug/align.range')",
      "lineIdx": 86,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "           # assert scaled_predict_y == calc_y",
      "lineIdx": 62,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "           # assert scaled_predict_y == calc_y",
      "lineIdx": 43,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 60,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "            #TODO this doesn't work, i acn't siwtch off auto scaling",
      "lineIdx": 41,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 48,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "    with open(file_list_file) as f:",
      "lineIdx": 29,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 98,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    print(\"Recall: \" + \"%.2f\" % (true_pos_sum/actual_positives_sum))",
      "lineIdx": 79,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "            #assert p_acc == scaled_p_acc",
      "lineIdx": 63,
      "from": 20,
      "to": 25
    },
    "right": {
      "line": "            #assert p_acc == scaled_p_acc",
      "lineIdx": 44,
      "from": 20,
      "to": 25
    }
  }, {
    "left": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 3,
      "to": 6
    },
    "right": {
      "line": "#!/usr/bin/env python3.4",
      "lineIdx": 0,
      "from": 3,
      "to": 6
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 86,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "            if precision + recall != 0:",
      "lineIdx": 67,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 107,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    test_files(model, range_dict, '../features_output/testing_files.txt')",
      "lineIdx": 88,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 91,
      "from": 32,
      "to": 37
    },
    "right": {
      "line": "    print(\"Sample count:\" + str(n_sum))",
      "lineIdx": 72,
      "from": 32,
      "to": 37
    }
  }, {
    "left": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 33,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "        rows = filter(lambda row: len(row) == 3, map(lambda line: line.split(\" \"), f.read().split(\"\\n\")))",
      "lineIdx": 17,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 77,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "            print(\"True positives: \" + str(true_pos))",
      "lineIdx": 58,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 44,
      "from": 21,
      "to": 25
    },
    "right": {
      "line": "    return [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]",
      "lineIdx": 25,
      "from": 21,
      "to": 25
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 11,
      "to": 20
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 11,
      "to": 20
    }
  }, {
    "left": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 97,
      "from": 45,
      "to": 57
    },
    "right": {
      "line": "    print(\"Precision: %.2f\" % (true_pos_sum/(true_pos_sum + false_pos_sum)))",
      "lineIdx": 78,
      "from": 45,
      "to": 57
    }
  }, {
    "left": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 93,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    print(\"True positives: \" + str(true_pos_sum))",
      "lineIdx": 74,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 67,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "            false_pos = sum(1 if elem[0] > 0 and elem[1] < 0 else 0 for elem in zipped)",
      "lineIdx": 48,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 49,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "        dirs = f.read().strip(\"[]\\n\").split(\", \")",
      "lineIdx": 30,
      "from": 22,
      "to": 23
    }
  }]
}