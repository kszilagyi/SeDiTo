{
  "matches": [{
    "left": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 18,
      "to": 26
    },
    "right": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 18,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  const std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 18,
      "from": 13,
      "to": 26
    },
    "right": {
      "line": "  std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 17,
      "from": 7,
      "to": 20
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 123,
      "to": 124
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 123,
      "to": 124
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 139,
      "to": 156
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 139,
      "to": 156
    }
  }, {
    "left": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 22,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 36,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 68,
      "to": 73
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 68,
      "to": 73
    }
  }, {
    "left": {
      "line": "namespace MLPipeline",
      "lineIdx": 24,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "namespace MLPipeline",
      "lineIdx": 38,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 177,
      "to": 178
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 177,
      "to": 178
    }
  }, {
    "left": {
      "line": "  extern const FeatureExtractor standardExtractor;",
      "lineIdx": 26,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  extern const FeatureExtractor standardExtractor;",
      "lineIdx": 40,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 20,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "};",
      "lineIdx": 23,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "using std::unordered_map;",
      "lineIdx": 10,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "using std::unordered_map;",
      "lineIdx": 10,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 22,
      "from": 38,
      "to": 45
    },
    "right": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 36,
      "from": 38,
      "to": 45
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  extern const FeatureExtractor standardExtractor;",
      "lineIdx": 26,
      "from": 32,
      "to": 49
    },
    "right": {
      "line": "  extern const FeatureExtractor standardExtractor;",
      "lineIdx": 40,
      "from": 32,
      "to": 49
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 158,
      "to": 159
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 158,
      "to": 159
    }
  }, {
    "left": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#ifndef MLPIPELINE_H",
      "lineIdx": 0,
      "from": 8,
      "to": 20
    },
    "right": {
      "line": "#ifndef MLPIPELINE_H",
      "lineIdx": 0,
      "from": 8,
      "to": 20
    }
  }, {
    "left": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  const std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 18,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 17,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  const std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 18,
      "from": 43,
      "to": 52
    },
    "right": {
      "line": "  std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 17,
      "from": 37,
      "to": 46
    }
  }, {
    "left": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 22,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 36,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "#endif // MLPIPELINE_H",
      "lineIdx": 31,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "#endif // MLPIPELINE_H",
      "lineIdx": 45,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 25,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 39,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 142,
      "to": 158
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 142,
      "to": 158
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 83,
      "to": 88
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 83,
      "to": 88
    }
  }, {
    "left": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 160,
      "to": 177
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 160,
      "to": 177
    }
  }, {
    "left": {
      "line": "using std::unordered_map;",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "using std::unordered_map;",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "public:",
      "lineIdx": 15,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "public:",
      "lineIdx": 15,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 112,
      "to": 113
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 112,
      "to": 113
    }
  }, {
    "left": {
      "line": "  const std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 18,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 17,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 14,
      "to": 26
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 14,
      "to": 26
    }
  }, {
    "left": {
      "line": "public:",
      "lineIdx": 15,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "public:",
      "lineIdx": 15,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 22,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 36,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 106,
      "to": 123
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 106,
      "to": 123
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 35,
      "to": 48
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 35,
      "to": 48
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 45,
      "to": 58
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 22,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "  const std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 18,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 17,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 6,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 6,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 90,
      "to": 95
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 90,
      "to": 95
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 20,
      "to": 28
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 20,
      "to": 28
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 114,
      "to": 131
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 114,
      "to": 131
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 5,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 5,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 100,
      "to": 105
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 100,
      "to": 105
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  extern const FeatureExtractor standardExtractor;",
      "lineIdx": 26,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  extern const FeatureExtractor standardExtractor;",
      "lineIdx": 40,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "class MLSample {",
      "lineIdx": 14,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "class MLSample {",
      "lineIdx": 14,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 22,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 36,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 178,
      "to": 179
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 178,
      "to": 179
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#ifndef MLPIPELINE_H",
      "lineIdx": 0,
      "from": 1,
      "to": 7
    },
    "right": {
      "line": "#ifndef MLPIPELINE_H",
      "lineIdx": 0,
      "from": 1,
      "to": 7
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 134,
      "to": 135
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 134,
      "to": 135
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 91,
      "to": 95
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 68,
      "to": 72
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 9,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 9,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 9,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 9,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 58,
      "to": 63
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 58,
      "to": 63
    }
  }, {
    "left": {
      "line": "  const std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 18,
      "from": 36,
      "to": 41
    },
    "right": {
      "line": "  std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 17,
      "from": 30,
      "to": 35
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 62,
      "to": 66
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 62,
      "to": 66
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 86,
      "to": 90
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 63,
      "to": 67
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 9,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 9,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 133,
      "to": 138
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 133,
      "to": 138
    }
  }, {
    "left": {
      "line": "using std::unordered_map;",
      "lineIdx": 10,
      "from": 11,
      "to": 24
    },
    "right": {
      "line": "using std::unordered_map;",
      "lineIdx": 10,
      "from": 11,
      "to": 24
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "class MLSample {",
      "lineIdx": 14,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "class MLSample {",
      "lineIdx": 14,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 10,
      "to": 23
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 10,
      "to": 23
    }
  }, {
    "left": {
      "line": "using std::unordered_map;",
      "lineIdx": 10,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "using std::unordered_map;",
      "lineIdx": 10,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 5,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 5,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 22,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 36,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 47,
      "to": 52
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 47,
      "to": 52
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 125,
      "to": 134
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 125,
      "to": 134
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#define MLPIPELINE_H",
      "lineIdx": 1,
      "from": 1,
      "to": 7
    },
    "right": {
      "line": "#define MLPIPELINE_H",
      "lineIdx": 1,
      "from": 1,
      "to": 7
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "class FeatureExtractor;",
      "lineIdx": 12,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "class FeatureExtractor;",
      "lineIdx": 12,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  const std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 18,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 17,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 34,
      "to": 39
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 11,
      "to": 16
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 167,
      "to": 168
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 167,
      "to": 168
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 22,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 36,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "#endif // MLPIPELINE_H",
      "lineIdx": 31,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#endif // MLPIPELINE_H",
      "lineIdx": 45,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "class OneToOneAlignment;",
      "lineIdx": 11,
      "from": 6,
      "to": 23
    },
    "right": {
      "line": "class OneToOneAlignment;",
      "lineIdx": 11,
      "from": 6,
      "to": 23
    }
  }, {
    "left": {
      "line": "  const bool mSame;",
      "lineIdx": 19,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  bool mSame;",
      "lineIdx": 18,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 6,
      "from": 10,
      "to": 23
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 6,
      "from": 10,
      "to": 23
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 68,
      "to": 73
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 45,
      "to": 50
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "class FeatureExtractor;",
      "lineIdx": 12,
      "from": 6,
      "to": 22
    },
    "right": {
      "line": "class FeatureExtractor;",
      "lineIdx": 12,
      "from": 6,
      "to": 22
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 22,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 36,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 19,
      "to": 46
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 19,
      "to": 46
    }
  }, {
    "left": {
      "line": "  const std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 18,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 17,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "#ifndef MLPIPELINE_H",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#ifndef MLPIPELINE_H",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "class FeatureExtractor;",
      "lineIdx": 12,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "class FeatureExtractor;",
      "lineIdx": 12,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 40,
      "to": 43
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 17,
      "to": 20
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  extern const FeatureExtractor standardExtractor;",
      "lineIdx": 26,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "  extern const FeatureExtractor standardExtractor;",
      "lineIdx": 40,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "#endif // MLPIPELINE_H",
      "lineIdx": 31,
      "from": 10,
      "to": 22
    },
    "right": {
      "line": "#endif // MLPIPELINE_H",
      "lineIdx": 45,
      "from": 10,
      "to": 22
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 136,
      "to": 141
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 136,
      "to": 141
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 9,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 9,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "namespace MLPipeline",
      "lineIdx": 24,
      "from": 0,
      "to": 9
    },
    "right": {
      "line": "namespace MLPipeline",
      "lineIdx": 38,
      "from": 0,
      "to": 9
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 49,
      "to": 56
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 49,
      "to": 56
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "  const bool mSame;",
      "lineIdx": 19,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "  bool mSame;",
      "lineIdx": 18,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 22,
      "from": 0,
      "to": 7
    },
    "right": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 36,
      "from": 0,
      "to": 7
    }
  }, {
    "left": {
      "line": "class OneToOneAlignment;",
      "lineIdx": 11,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "class OneToOneAlignment;",
      "lineIdx": 11,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "class MLSample {",
      "lineIdx": 14,
      "from": 6,
      "to": 14
    },
    "right": {
      "line": "class MLSample {",
      "lineIdx": 14,
      "from": 6,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 158,
      "to": 167
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 158,
      "to": 167
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 96,
      "to": 112
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 96,
      "to": 112
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 156,
      "to": 157
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 156,
      "to": 157
    }
  }, {
    "left": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 22,
      "from": 27,
      "to": 35
    },
    "right": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 36,
      "from": 27,
      "to": 35
    }
  }, {
    "left": {
      "line": "#define MLPIPELINE_H",
      "lineIdx": 1,
      "from": 8,
      "to": 20
    },
    "right": {
      "line": "#define MLPIPELINE_H",
      "lineIdx": 1,
      "from": 8,
      "to": 20
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 30,
      "to": 33
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 30,
      "to": 33
    }
  }, {
    "left": {
      "line": "  const std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 18,
      "from": 27,
      "to": 34
    },
    "right": {
      "line": "  std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 17,
      "from": 21,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  const std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 18,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "  std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 17,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  const std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 18,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  std::unordered_map<QString, float> mFeatures;",
      "lineIdx": 17,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 76,
      "to": 84
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 53,
      "to": 61
    }
  }, {
    "left": {
      "line": "using std::unordered_map;",
      "lineIdx": 10,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "using std::unordered_map;",
      "lineIdx": 10,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 131,
      "to": 132
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 131,
      "to": 132
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 14,
      "to": 19
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 14,
      "to": 19
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 53,
      "to": 60
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 53,
      "to": 60
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 29,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 43,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  extern const FeatureExtractor standardExtractor;",
      "lineIdx": 26,
      "from": 15,
      "to": 31
    },
    "right": {
      "line": "  extern const FeatureExtractor standardExtractor;",
      "lineIdx": 40,
      "from": 15,
      "to": 31
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 74,
      "to": 81
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 74,
      "to": 81
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 9,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 9,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "#endif // MLPIPELINE_H",
      "lineIdx": 31,
      "from": 1,
      "to": 6
    },
    "right": {
      "line": "#endif // MLPIPELINE_H",
      "lineIdx": 45,
      "from": 1,
      "to": 6
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "#define MLPIPELINE_H",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#define MLPIPELINE_H",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 22,
      "from": 20,
      "to": 26
    },
    "right": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 36,
      "from": 20,
      "to": 26
    }
  }, {
    "left": {
      "line": "#endif // MLPIPELINE_H",
      "lineIdx": 31,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "#endif // MLPIPELINE_H",
      "lineIdx": 45,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 7,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 27,
      "from": 67,
      "to": 99
    },
    "right": {
      "line": "  vector<std::tuple<LinePair, std::unordered_map<QString, float>>> extractAllFeatureForAllNonPaired(const OneToOneAlignment& alignment, const FeatureExtractor& standardExtractor);",
      "lineIdx": 41,
      "from": 67,
      "to": 99
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 20,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "};",
      "lineIdx": 23,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "  const bool mSame;",
      "lineIdx": 19,
      "from": 13,
      "to": 18
    },
    "right": {
      "line": "  bool mSame;",
      "lineIdx": 18,
      "from": 7,
      "to": 12
    }
  }, {
    "left": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 22,
      "from": 14,
      "to": 19
    },
    "right": {
      "line": "QString toStr(const vector<MLSample>& samples);",
      "lineIdx": 36,
      "from": 14,
      "to": 19
    }
  }, {
    "left": {
      "line": "class OneToOneAlignment;",
      "lineIdx": 11,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "class OneToOneAlignment;",
      "lineIdx": 11,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 28,
      "from": 168,
      "to": 169
    },
    "right": {
      "line": "  vector<MLSample> extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor& standardExtractor, const OneToOneAlignment& reference);",
      "lineIdx": 42,
      "from": 168,
      "to": 169
    }
  }, {
    "left": {
      "line": "using std::unordered_map;",
      "lineIdx": 10,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using std::unordered_map;",
      "lineIdx": 10,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 59,
      "to": 66
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 36,
      "to": 43
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"aligner/linepair.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  MLSample(const LinePair& match, const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  MLSample(const std::unordered_map<QString, float>& features, bool same);",
      "lineIdx": 16,
      "from": 20,
      "to": 21
    }
  }]
}