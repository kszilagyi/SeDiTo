{
  "matches": [{
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 57,
      "to": 62
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 57,
      "to": 62
    }
  }, {
    "left": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 3,
      "to": 10
    },
    "right": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 3,
      "to": 10
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 18,
      "to": 25
    },
    "right": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 18,
      "to": 25
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 72,
      "to": 78
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 72,
      "to": 78
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 7,
      "to": 10
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 7,
      "to": 10
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 70,
      "to": 76
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 70,
      "to": 76
    }
  }, {
    "left": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 3,
      "to": 5
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 3,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 3,
      "to": 7
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 3,
      "to": 7
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 28,
      "to": 32
    },
    "right": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 28,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 5,
      "to": 7
    },
    "right": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 5,
      "to": 7
    }
  }, {
    "left": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 150,
      "to": 153
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 150,
      "to": 153
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 37,
      "to": 50
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 37,
      "to": 50
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 110,
      "to": 111
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 110,
      "to": 111
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 61,
      "to": 66
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 61,
      "to": 66
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 47,
      "to": 62
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 47,
      "to": 62
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 38,
      "to": 46
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 38,
      "to": 46
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 62,
      "to": 70
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 62,
      "to": 70
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 24,
      "to": 29
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 24,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 22,
      "to": 41
    },
    "right": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 22,
      "to": 41
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 4,
      "to": 14
    },
    "right": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 4,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 28,
      "to": 37
    },
    "right": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 28,
      "to": 37
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 18,
      "to": 24
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 18,
      "to": 24
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 43,
      "to": 55
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 43,
      "to": 55
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 9,
      "to": 21
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 9,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 59,
      "to": 65
    },
    "right": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 59,
      "to": 65
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 12,
      "to": 20
    },
    "right": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 12,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 126,
      "to": 127
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 126,
      "to": 127
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 88,
      "to": 92
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 88,
      "to": 92
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 23,
      "to": 27
    },
    "right": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 23,
      "to": 27
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 47,
      "to": 49
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 47,
      "to": 49
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 60,
      "to": 66
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 60,
      "to": 66
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 108,
      "to": 112
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 108,
      "to": 112
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 23,
      "to": 43
    },
    "right": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 23,
      "to": 43
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 106,
      "to": 107
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 106,
      "to": 107
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 110,
      "to": 111
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 110,
      "to": 111
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 112,
      "to": 113
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 112,
      "to": 113
    }
  }, {
    "left": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 67,
      "to": 73
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 67,
      "to": 73
    }
  }, {
    "left": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 26,
      "to": 33
    },
    "right": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 26,
      "to": 33
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 82,
      "to": 92
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 82,
      "to": 92
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 108,
      "to": 110
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 108,
      "to": 110
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": " */",
      "lineIdx": 25,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": " */",
      "lineIdx": 25,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 24,
      "to": 40
    },
    "right": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 24,
      "to": 40
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 37,
      "to": 44
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 37,
      "to": 44
    }
  }, {
    "left": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 6,
      "to": 21
    },
    "right": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 6,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 36,
      "to": 41
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 36,
      "to": 41
    }
  }, {
    "left": {
      "line": "\t\t\t\t\t\tcontinue;",
      "lineIdx": 135,
      "from": 6,
      "to": 14
    },
    "right": {
      "line": "\t\t\t\t\t\tcontinue;",
      "lineIdx": 135,
      "from": 6,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 4,
      "to": 23
    },
    "right": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 4,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 24,
      "to": 27
    },
    "right": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 24,
      "to": 27
    }
  }, {
    "left": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "package aligner.nonlearn;",
      "lineIdx": 0,
      "from": 0,
      "to": 7
    },
    "right": {
      "line": "package aligner.nonlearn;",
      "lineIdx": 0,
      "from": 0,
      "to": 7
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 18,
      "to": 24
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 18,
      "to": 24
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 127,
      "to": 128
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 127,
      "to": 128
    }
  }, {
    "left": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 17,
      "to": 24
    },
    "right": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 17,
      "to": 24
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 105,
      "to": 106
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 105,
      "to": 106
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 8,
      "to": 14
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 8,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 23,
      "to": 38
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 23,
      "to": 38
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 45,
      "to": 51
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 45,
      "to": 51
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 46,
      "to": 52
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 46,
      "to": 52
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 85,
      "to": 87
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 85,
      "to": 87
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 21,
      "to": 31
    },
    "right": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 21,
      "to": 31
    }
  }, {
    "left": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 43,
      "to": 49
    },
    "right": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 43,
      "to": 49
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 44,
      "to": 50
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 44,
      "to": 50
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "\t\treturn newMatches;",
      "lineIdx": 140,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "\t\treturn newMatches;",
      "lineIdx": 144,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 33,
      "to": 45
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 33,
      "to": 45
    }
  }, {
    "left": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 46,
      "to": 61
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 46,
      "to": 61
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 5,
      "to": 8
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 5,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 104,
      "to": 105
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 104,
      "to": 105
    }
  }, {
    "left": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 19,
      "to": 22
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 19,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 75,
      "to": 81
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 75,
      "to": 81
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 40,
      "to": 43
    },
    "right": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 40,
      "to": 43
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 3,
      "to": 5
    },
    "right": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 3,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 9,
      "to": 22
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 9,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 137,
      "to": 153
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 137,
      "to": 153
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 70,
      "to": 76
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 70,
      "to": 76
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 86,
      "to": 96
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 86,
      "to": 96
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 9,
      "to": 21
    },
    "right": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 9,
      "to": 21
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 6,
      "to": 21
    },
    "right": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 6,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 120,
      "to": 121
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 120,
      "to": 121
    }
  }, {
    "left": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 24,
      "to": 33
    },
    "right": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 24,
      "to": 33
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 105,
      "to": 106
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 105,
      "to": 106
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 56,
      "to": 59
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 56,
      "to": 59
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 18,
      "to": 25
    },
    "right": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 18,
      "to": 25
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 12,
      "to": 21
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 12,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 99,
      "to": 119
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 99,
      "to": 119
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 54,
      "to": 62
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 54,
      "to": 62
    }
  }, {
    "left": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 132,
      "to": 133
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 132,
      "to": 133
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 59,
      "to": 67
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 59,
      "to": 67
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 96,
      "to": 99
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 96,
      "to": 99
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 21,
      "to": 40
    },
    "right": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 21,
      "to": 40
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 51,
      "to": 58
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 51,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 121,
      "to": 122
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 121,
      "to": 122
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 106,
      "to": 115
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 106,
      "to": 115
    }
  }, {
    "left": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 12,
      "to": 18
    },
    "right": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 12,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 59,
      "to": 73
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 59,
      "to": 73
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 20,
      "to": 22
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 20,
      "to": 22
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 107,
      "to": 119
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 107,
      "to": 119
    }
  }, {
    "left": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 86,
      "to": 89
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 86,
      "to": 89
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 33,
      "to": 56
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 33,
      "to": 56
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 13,
      "to": 17
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 13,
      "to": 17
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 66,
      "to": 70
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 66,
      "to": 70
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 7,
      "to": 17
    },
    "right": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 7,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 121,
      "to": 125
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 121,
      "to": 125
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "package aligner.nonlearn;",
      "lineIdx": 0,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "package aligner.nonlearn;",
      "lineIdx": 0,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 23,
      "to": 42
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 23,
      "to": 42
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 33,
      "to": 45
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 33,
      "to": 45
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 28,
      "to": 48
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 28,
      "to": 48
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 116,
      "to": 120
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 116,
      "to": 120
    }
  }, {
    "left": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 58,
      "to": 66
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 58,
      "to": 66
    }
  }, {
    "left": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 39,
      "to": 51
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 39,
      "to": 51
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 106,
      "to": 115
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 106,
      "to": 115
    }
  }, {
    "left": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 96,
      "to": 99
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 96,
      "to": 99
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 30,
      "to": 49
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 30,
      "to": 49
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 125,
      "to": 126
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 125,
      "to": 126
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 89,
      "to": 95
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 89,
      "to": 95
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 20,
      "to": 27
    },
    "right": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 20,
      "to": 27
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 79,
      "to": 83
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 79,
      "to": 83
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 74,
      "to": 93
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 74,
      "to": 93
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 12,
      "to": 21
    },
    "right": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 12,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 7,
      "to": 12
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 7,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 47,
      "to": 65
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 47,
      "to": 65
    }
  }, {
    "left": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 2,
      "to": 15
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 2,
      "to": 15
    }
  }, {
    "left": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 68,
      "to": 70
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 68,
      "to": 70
    }
  }, {
    "left": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 19,
      "to": 21
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 19,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 52,
      "to": 55
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 52,
      "to": 55
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 130,
      "to": 131
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 130,
      "to": 131
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 68,
      "to": 73
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 68,
      "to": 73
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 23,
      "to": 35
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 23,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 112,
      "to": 113
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 112,
      "to": 113
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 122,
      "to": 123
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 122,
      "to": 123
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 18,
      "to": 22
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 18,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 96,
      "to": 99
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 96,
      "to": 99
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 5,
      "to": 11
    },
    "right": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 5,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 6,
      "to": 20
    },
    "right": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 6,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 13,
      "to": 17
    },
    "right": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 13,
      "to": 17
    }
  }, {
    "left": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 8,
      "to": 20
    },
    "right": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 8,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 2,
      "to": 14
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 2,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 5,
      "to": 11
    },
    "right": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 5,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 48,
      "to": 53
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 48,
      "to": 53
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 39,
      "to": 43
    },
    "right": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 39,
      "to": 43
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 36,
      "to": 40
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 36,
      "to": 40
    }
  }, {
    "left": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 33,
      "to": 49
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 33,
      "to": 49
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 3,
      "to": 18
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 3,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 30,
      "to": 35
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 30,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 11,
      "to": 18
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 11,
      "to": 18
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 29,
      "to": 35
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 29,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 119,
      "to": 120
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 119,
      "to": 120
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 93,
      "to": 95
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 93,
      "to": 95
    }
  }, {
    "left": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 129,
      "to": 130
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 129,
      "to": 130
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 68,
      "to": 73
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 68,
      "to": 73
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 127,
      "to": 128
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 127,
      "to": 128
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 63,
      "to": 69
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 63,
      "to": 69
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 22,
      "to": 28
    },
    "right": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 22,
      "to": 28
    }
  }, {
    "left": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 79,
      "to": 83
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 79,
      "to": 83
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 64,
      "to": 66
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 64,
      "to": 66
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 100,
      "to": 102
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 100,
      "to": 102
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 127,
      "to": 128
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 127,
      "to": 128
    }
  }, {
    "left": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 31,
      "to": 48
    },
    "right": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 31,
      "to": 48
    }
  }, {
    "left": {
      "line": "\t}",
      "lineIdx": 95,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "\t}",
      "lineIdx": 95,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 21,
      "to": 29
    },
    "right": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 21,
      "to": 29
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 111,
      "to": 113
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 111,
      "to": 113
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 9,
      "to": 21
    },
    "right": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 9,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\t\t}",
      "lineIdx": 138,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "\t\t\t}",
      "lineIdx": 142,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 25,
      "to": 37
    },
    "right": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 25,
      "to": 37
    }
  }, {
    "left": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "\t}",
      "lineIdx": 46,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "\t}",
      "lineIdx": 46,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 22,
      "to": 30
    },
    "right": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 22,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 46,
      "to": 53
    },
    "right": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 46,
      "to": 53
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 117,
      "to": 118
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 117,
      "to": 118
    }
  }, {
    "left": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 44,
      "to": 47
    },
    "right": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 44,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 75,
      "to": 78
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 75,
      "to": 78
    }
  }, {
    "left": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 18,
      "to": 25
    },
    "right": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 18,
      "to": 25
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 53,
      "to": 66
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 53,
      "to": 66
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 40,
      "to": 47
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 40,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 56,
      "to": 76
    },
    "right": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 56,
      "to": 76
    }
  }, {
    "left": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 6,
      "to": 20
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 6,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 41,
      "to": 46
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 41,
      "to": 46
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 18,
      "to": 24
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 18,
      "to": 24
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 2,
      "to": 17
    },
    "right": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 2,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 10,
      "to": 21
    },
    "right": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 10,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 7,
      "to": 22
    },
    "right": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 7,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 24,
      "to": 53
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 24,
      "to": 53
    }
  }, {
    "left": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 56,
      "to": 60
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 56,
      "to": 60
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 22,
      "to": 42
    },
    "right": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 22,
      "to": 42
    }
  }, {
    "left": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 44,
      "to": 53
    },
    "right": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 44,
      "to": 53
    }
  }, {
    "left": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 3,
      "to": 9
    },
    "right": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 3,
      "to": 9
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "public class NonLearningAligner {",
      "lineIdx": 26,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "public class NonLearningAligner {",
      "lineIdx": 26,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 51,
      "to": 59
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 51,
      "to": 59
    }
  }, {
    "left": {
      "line": "\t\t\t\tbreak;",
      "lineIdx": 117,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "\t\t\t\tbreak;",
      "lineIdx": 117,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 89,
      "to": 95
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 89,
      "to": 95
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 57,
      "to": 69
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 57,
      "to": 69
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 49,
      "to": 58
    },
    "right": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 49,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 6,
      "to": 17
    },
    "right": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 6,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "\t}",
      "lineIdx": 83,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "\t}",
      "lineIdx": 83,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 39,
      "to": 43
    },
    "right": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 39,
      "to": 43
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 126,
      "to": 127
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 126,
      "to": 127
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 26,
      "to": 32
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 26,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 14,
      "to": 21
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 14,
      "to": 21
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 51,
      "to": 64
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 51,
      "to": 64
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 12,
      "to": 21
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 12,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 77,
      "to": 84
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 77,
      "to": 84
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 111,
      "to": 112
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 111,
      "to": 112
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 13,
      "to": 18
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 13,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 49,
      "to": 59
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 49,
      "to": 59
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 15,
      "to": 28
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 15,
      "to": 28
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 110,
      "to": 114
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 110,
      "to": 114
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 35,
      "to": 38
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 35,
      "to": 38
    }
  }, {
    "left": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 12,
      "to": 27
    },
    "right": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 12,
      "to": 27
    }
  }, {
    "left": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 76,
      "to": 88
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 76,
      "to": 88
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 114,
      "to": 115
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 114,
      "to": 115
    }
  }, {
    "left": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 126,
      "to": 132
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 126,
      "to": 132
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 3,
      "to": 18
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 3,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 56,
      "to": 63
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 56,
      "to": 63
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 45,
      "to": 56
    },
    "right": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 45,
      "to": 56
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 23,
      "to": 30
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 23,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 114,
      "to": 115
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 114,
      "to": 115
    }
  }, {
    "left": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 18,
      "to": 24
    },
    "right": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 18,
      "to": 24
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 81,
      "to": 86
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 81,
      "to": 86
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 26,
      "to": 30
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 26,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 29,
      "to": 44
    },
    "right": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 29,
      "to": 44
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 23,
      "to": 29
    },
    "right": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 23,
      "to": 29
    }
  }, {
    "left": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 38,
      "to": 58
    },
    "right": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 38,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 16,
      "to": 31
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 16,
      "to": 31
    }
  }, {
    "left": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 48,
      "to": 57
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 48,
      "to": 57
    }
  }, {
    "left": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 22,
      "to": 27
    },
    "right": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 22,
      "to": 27
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 94,
      "to": 99
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 94,
      "to": 99
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 23,
      "to": 29
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 23,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 118,
      "to": 119
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 118,
      "to": 119
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 30,
      "to": 34
    },
    "right": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 30,
      "to": 34
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 64,
      "to": 67
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 64,
      "to": 67
    }
  }, {
    "left": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 41,
      "to": 47
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 41,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 38,
      "to": 50
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 38,
      "to": 50
    }
  }, {
    "left": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 56,
      "to": 59
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 56,
      "to": 59
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 3,
      "to": 18
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 3,
      "to": 18
    }
  }, {
    "left": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 17,
      "to": 24
    },
    "right": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 17,
      "to": 24
    }
  }, {
    "left": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 82,
      "to": 92
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 82,
      "to": 92
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 7,
      "to": 10
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 7,
      "to": 10
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 105,
      "to": 109
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 105,
      "to": 109
    }
  }, {
    "left": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 13,
      "to": 22
    },
    "right": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 13,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 15,
      "to": 19
    },
    "right": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 15,
      "to": 19
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 8,
      "to": 16
    },
    "right": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 8,
      "to": 16
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 50,
      "to": 54
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 50,
      "to": 54
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 3,
      "to": 6
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 3,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "\t\t\t\tcontinue;",
      "lineIdx": 121,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "\t\t\t\tcontinue;",
      "lineIdx": 121,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 27,
      "to": 47
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 27,
      "to": 47
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 24,
      "to": 29
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 24,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 15,
      "to": 18
    },
    "right": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 15,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 6,
      "to": 21
    },
    "right": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 6,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 79,
      "to": 81
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 79,
      "to": 81
    }
  }, {
    "left": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 14,
      "to": 29
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 14,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 135,
      "to": 136
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 135,
      "to": 136
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 17,
      "to": 20
    },
    "right": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 17,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\t}",
      "lineIdx": 67,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "\t\t}",
      "lineIdx": 67,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 27,
      "to": 42
    },
    "right": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 27,
      "to": 42
    }
  }, {
    "left": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 26,
      "to": 47
    },
    "right": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 26,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 48,
      "to": 56
    },
    "right": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 48,
      "to": 56
    }
  }, {
    "left": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 125,
      "to": 126
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 125,
      "to": 126
    }
  }, {
    "left": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 2,
      "to": 15
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 2,
      "to": 15
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 23,
      "to": 27
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 23,
      "to": 27
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 2,
      "to": 14
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 2,
      "to": 14
    }
  }, {
    "left": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 81,
      "to": 85
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 81,
      "to": 85
    }
  }, {
    "left": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 46,
      "to": 58
    },
    "right": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 46,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 62,
      "to": 72
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 62,
      "to": 72
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 160,
      "to": 161
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 160,
      "to": 161
    }
  }, {
    "left": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 16,
      "to": 22
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 16,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 25,
      "to": 32
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 25,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 46,
      "to": 61
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 46,
      "to": 61
    }
  }, {
    "left": {
      "line": "\t\treturn newMatches;",
      "lineIdx": 140,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "\t\treturn newMatches;",
      "lineIdx": 144,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 2,
      "to": 16
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 2,
      "to": 16
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 37,
      "to": 56
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 37,
      "to": 56
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 35,
      "to": 47
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 35,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 79,
      "to": 85
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 79,
      "to": 85
    }
  }, {
    "left": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 32,
      "to": 36
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 32,
      "to": 36
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 25,
      "to": 36
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 25,
      "to": 36
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 121,
      "to": 122
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 121,
      "to": 122
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 30,
      "to": 45
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 30,
      "to": 45
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 26,
      "to": 40
    },
    "right": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 26,
      "to": 40
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 35,
      "to": 38
    },
    "right": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 35,
      "to": 38
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 135,
      "to": 136
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 135,
      "to": 136
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 114,
      "to": 115
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 114,
      "to": 115
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 91,
      "to": 93
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 91,
      "to": 93
    }
  }, {
    "left": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 28,
      "to": 51
    },
    "right": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 28,
      "to": 51
    }
  }, {
    "left": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 22,
      "to": 37
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 22,
      "to": 37
    }
  }, {
    "left": {
      "line": "\t}",
      "lineIdx": 59,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "\t}",
      "lineIdx": 59,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 104,
      "to": 105
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 104,
      "to": 105
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 49,
      "to": 58
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 49,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 121,
      "to": 122
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 121,
      "to": 122
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 3,
      "to": 6
    },
    "right": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 3,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 26,
      "to": 38
    },
    "right": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 26,
      "to": 38
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 15,
      "to": 20
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 15,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 23,
      "to": 31
    },
    "right": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 23,
      "to": 31
    }
  }, {
    "left": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "\t\t\t}",
      "lineIdx": 118,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "\t\t\t}",
      "lineIdx": 118,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 15,
      "to": 20
    },
    "right": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 15,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 24,
      "to": 30
    },
    "right": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 24,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t}\t\t",
      "lineIdx": 36,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "\t}\t\t",
      "lineIdx": 36,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 29,
      "to": 37
    },
    "right": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 29,
      "to": 37
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 100,
      "to": 108
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 100,
      "to": 108
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 79,
      "to": 84
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 79,
      "to": 84
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 146,
      "to": 149
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 146,
      "to": 149
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 48,
      "to": 57
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 48,
      "to": 57
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 107,
      "to": 108
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 107,
      "to": 108
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 51,
      "to": 66
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 51,
      "to": 66
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 2,
      "to": 15
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 2,
      "to": 15
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 71,
      "to": 74
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 71,
      "to": 74
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 13,
      "to": 17
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 13,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 47,
      "to": 59
    },
    "right": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 47,
      "to": 59
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 85,
      "to": 88
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 85,
      "to": 88
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 94,
      "to": 97
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 94,
      "to": 97
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 23,
      "to": 38
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 23,
      "to": 38
    }
  }, {
    "left": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 74,
      "to": 93
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 74,
      "to": 93
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 14,
      "to": 21
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 14,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 115,
      "to": 116
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 115,
      "to": 116
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 42,
      "to": 48
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 42,
      "to": 48
    }
  }, {
    "left": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 8,
      "to": 20
    },
    "right": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 8,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 77,
      "to": 96
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 77,
      "to": 96
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 9,
      "to": 22
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 9,
      "to": 22
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 70,
      "to": 84
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 70,
      "to": 84
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 3,
      "to": 5
    },
    "right": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 3,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 26,
      "to": 32
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 26,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 40,
      "to": 47
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 40,
      "to": 47
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 57,
      "to": 61
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 57,
      "to": 61
    }
  }, {
    "left": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 105,
      "to": 106
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 105,
      "to": 106
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 30,
      "to": 35
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 30,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 27,
      "to": 34
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 27,
      "to": 34
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 66,
      "to": 79
    },
    "right": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 66,
      "to": 79
    }
  }, {
    "left": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 37,
      "to": 41
    },
    "right": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 37,
      "to": 41
    }
  }, {
    "left": {
      "line": "\t\t\t\t\t\tcontinue;",
      "lineIdx": 135,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "\t\t\t\t\t\tcontinue;",
      "lineIdx": 135,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "\t\t\t}",
      "lineIdx": 56,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "\t\t\t}",
      "lineIdx": 56,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "/**",
      "lineIdx": 22,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "/**",
      "lineIdx": 22,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 26,
      "to": 40
    },
    "right": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 26,
      "to": 40
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 30,
      "to": 36
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 30,
      "to": 36
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 97,
      "to": 106
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 97,
      "to": 106
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 125,
      "to": 130
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 125,
      "to": 130
    }
  }, {
    "left": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 19,
      "to": 34
    },
    "right": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 19,
      "to": 34
    }
  }, {
    "left": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 10,
      "to": 21
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 10,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "package aligner.nonlearn;",
      "lineIdx": 0,
      "from": 16,
      "to": 24
    },
    "right": {
      "line": "package aligner.nonlearn;",
      "lineIdx": 0,
      "from": 16,
      "to": 24
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 11,
      "to": 18
    },
    "right": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 11,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 35,
      "to": 42
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 35,
      "to": 42
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 142,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 146,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 63,
      "to": 73
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 63,
      "to": 73
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 68,
      "to": 84
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 68,
      "to": 84
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 116,
      "to": 124
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 116,
      "to": 124
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 30,
      "to": 43
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 30,
      "to": 43
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 15,
      "to": 21
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 15,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 25,
      "to": 32
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 25,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 40,
      "to": 44
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 40,
      "to": 44
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 60,
      "to": 66
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 60,
      "to": 66
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 2,
      "to": 14
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 2,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 96,
      "to": 101
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 96,
      "to": 101
    }
  }, {
    "left": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 19,
      "to": 26
    },
    "right": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 19,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 19,
      "to": 26
    },
    "right": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 19,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 7,
      "to": 26
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 7,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\t\t\tbreak;",
      "lineIdx": 117,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "\t\t\t\tbreak;",
      "lineIdx": 117,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 63,
      "to": 71
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 63,
      "to": 71
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 59,
      "to": 67
    },
    "right": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 59,
      "to": 67
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 72,
      "to": 78
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 72,
      "to": 78
    }
  }, {
    "left": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 77,
      "to": 80
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 77,
      "to": 80
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 85,
      "to": 88
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 85,
      "to": 88
    }
  }, {
    "left": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 19,
      "to": 28
    },
    "right": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 19,
      "to": 28
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 41,
      "to": 55
    },
    "right": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 41,
      "to": 55
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 120,
      "to": 121
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 120,
      "to": 121
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 2,
      "to": 15
    },
    "right": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 2,
      "to": 15
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 75,
      "to": 90
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 75,
      "to": 90
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 33,
      "to": 37
    },
    "right": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 33,
      "to": 37
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 38,
      "to": 52
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 38,
      "to": 52
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 122,
      "to": 123
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 122,
      "to": 123
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 1,
      "to": 7
    },
    "right": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 1,
      "to": 7
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 27,
      "to": 31
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 27,
      "to": 31
    }
  }, {
    "left": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 19,
      "to": 21
    },
    "right": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 19,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 133,
      "to": 134
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 133,
      "to": 134
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 33,
      "to": 49
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 33,
      "to": 49
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 153,
      "to": 154
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 153,
      "to": 154
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 3,
      "to": 9
    },
    "right": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 3,
      "to": 9
    }
  }, {
    "left": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 21,
      "to": 36
    },
    "right": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 21,
      "to": 36
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 14,
      "to": 23
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 14,
      "to": 23
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 40,
      "to": 58
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 40,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "public class NonLearningAligner {",
      "lineIdx": 26,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "public class NonLearningAligner {",
      "lineIdx": 26,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 22,
      "to": 29
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 22,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "\t\t\t\tuniqueMatchingLines.add(rightLine);",
      "lineIdx": 55,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 105,
      "to": 106
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 105,
      "to": 106
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 23,
      "to": 30
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 23,
      "to": 30
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 39,
      "to": 53
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 39,
      "to": 53
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 17,
      "to": 31
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 17,
      "to": 31
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "\t\t\t\tnewMatches.add(current);",
      "lineIdx": 120,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 154,
      "to": 155
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 154,
      "to": 155
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 111,
      "to": 112
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 111,
      "to": 112
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 118,
      "to": 119
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 118,
      "to": 119
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 39,
      "to": 42
    },
    "right": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 39,
      "to": 42
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 29,
      "to": 35
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 29,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 5,
      "to": 9
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 5,
      "to": 9
    }
  }, {
    "left": {
      "line": "/**",
      "lineIdx": 22,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "/**",
      "lineIdx": 22,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 113,
      "to": 114
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 113,
      "to": 114
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 126,
      "to": 127
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 126,
      "to": 127
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 32,
      "to": 45
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 32,
      "to": 45
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 18,
      "to": 25
    },
    "right": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 18,
      "to": 25
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 22,
      "to": 28
    },
    "right": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 22,
      "to": 28
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 100,
      "to": 103
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 100,
      "to": 103
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "package aligner.nonlearn;",
      "lineIdx": 0,
      "from": 8,
      "to": 15
    },
    "right": {
      "line": "package aligner.nonlearn;",
      "lineIdx": 0,
      "from": 8,
      "to": 15
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 106,
      "to": 112
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 106,
      "to": 112
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 121,
      "to": 129
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 121,
      "to": 129
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 120,
      "to": 135
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 120,
      "to": 135
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 9,
      "to": 22
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 9,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 29,
      "to": 35
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 29,
      "to": 35
    }
  }, {
    "left": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 110,
      "to": 111
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 110,
      "to": 111
    }
  }, {
    "left": {
      "line": "\t\t}",
      "lineIdx": 93,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "\t\t}",
      "lineIdx": 93,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 115,
      "to": 116
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 115,
      "to": 116
    }
  }, {
    "left": {
      "line": "\t\t\t\tcontinue;",
      "lineIdx": 121,
      "from": 4,
      "to": 12
    },
    "right": {
      "line": "\t\t\t\tcontinue;",
      "lineIdx": 121,
      "from": 4,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t}",
      "lineIdx": 141,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "\t}",
      "lineIdx": 145,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 6,
      "to": 10
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 6,
      "to": 10
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 123,
      "to": 124
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 123,
      "to": 124
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 119,
      "to": 120
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 119,
      "to": 120
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 71,
      "to": 74
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 71,
      "to": 74
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 121,
      "to": 122
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 121,
      "to": 122
    }
  }, {
    "left": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 46,
      "to": 53
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 46,
      "to": 53
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 16,
      "to": 22
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 16,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "\t\t\t\t}",
      "lineIdx": 137,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "\t\t\t\t} else if((0 == leftIdx && 0 == rightIdx) || (leftIdx == compressedLeftLines.size()-1 && rightIdx == compressedRightLines.size()-1)){",
      "lineIdx": 137,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 10,
      "to": 15
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 10,
      "to": 15
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 16,
      "to": 28
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 16,
      "to": 28
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 39,
      "to": 50
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 39,
      "to": 50
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 112,
      "to": 120
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 112,
      "to": 120
    }
  }, {
    "left": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 6,
      "to": 14
    },
    "right": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 6,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 116,
      "to": 120
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 116,
      "to": 120
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 136,
      "to": 137
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 136,
      "to": 137
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 21,
      "to": 36
    },
    "right": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 21,
      "to": 36
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 75,
      "to": 83
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 75,
      "to": 83
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 116,
      "to": 117
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 116,
      "to": 117
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 3,
      "to": 9
    },
    "right": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 3,
      "to": 9
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 62,
      "to": 74
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 62,
      "to": 74
    }
  }, {
    "left": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 63,
      "to": 80
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 63,
      "to": 80
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 97,
      "to": 103
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 97,
      "to": 103
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 100,
      "to": 105
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 100,
      "to": 105
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 10,
      "to": 22
    },
    "right": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 10,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 9,
      "to": 20
    },
    "right": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 9,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "\t\tint rightIdx=start.getRightLineIdx()+diff;",
      "lineIdx": 110,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 51,
      "to": 54
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 51,
      "to": 54
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 61,
      "to": 63
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 61,
      "to": 63
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 91,
      "to": 95
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 91,
      "to": 95
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 113,
      "to": 114
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 113,
      "to": 114
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 113,
      "to": 119
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 113,
      "to": 119
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 3,
      "to": 7
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 3,
      "to": 7
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "\t\t\t}",
      "lineIdx": 122,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "\t\t\t}",
      "lineIdx": 122,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 33,
      "to": 42
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 33,
      "to": 42
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 154,
      "to": 155
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 154,
      "to": 155
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 24,
      "to": 40
    },
    "right": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 24,
      "to": 40
    }
  }, {
    "left": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 20,
      "to": 34
    },
    "right": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 20,
      "to": 34
    }
  }, {
    "left": {
      "line": "\t}",
      "lineIdx": 105,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "\t}",
      "lineIdx": 105,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 48,
      "to": 50
    },
    "right": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 48,
      "to": 50
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 139,
      "to": 144
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 139,
      "to": 144
    }
  }, {
    "left": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 17,
      "to": 26
    },
    "right": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 17,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 75,
      "to": 78
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 75,
      "to": 78
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 37,
      "to": 57
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 37,
      "to": 57
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 84,
      "to": 94
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 84,
      "to": 94
    }
  }, {
    "left": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 99,
      "to": 112
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 99,
      "to": 112
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 39,
      "to": 45
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 39,
      "to": 45
    }
  }, {
    "left": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 89,
      "to": 95
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 89,
      "to": 95
    }
  }, {
    "left": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 125,
      "to": 126
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 125,
      "to": 126
    }
  }, {
    "left": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 90,
      "to": 105
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 90,
      "to": 105
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 84,
      "to": 89
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 84,
      "to": 89
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 38,
      "to": 54
    },
    "right": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 38,
      "to": 54
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 21,
      "to": 29
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 21,
      "to": 29
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 51,
      "to": 66
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 51,
      "to": 66
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 58,
      "to": 64
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 58,
      "to": 64
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 33,
      "to": 46
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 33,
      "to": 46
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 18,
      "to": 24
    },
    "right": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 18,
      "to": 24
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 123,
      "to": 138
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 123,
      "to": 138
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 31,
      "to": 40
    },
    "right": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 31,
      "to": 40
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 23,
      "to": 38
    },
    "right": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 23,
      "to": 38
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 138,
      "to": 159
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 138,
      "to": 159
    }
  }, {
    "left": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 60,
      "to": 64
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 60,
      "to": 64
    }
  }, {
    "left": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 25,
      "to": 48
    },
    "right": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 25,
      "to": 48
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 119,
      "to": 120
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 119,
      "to": 120
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 22,
      "to": 34
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 22,
      "to": 34
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 144,
      "to": 145
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 144,
      "to": 145
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 43,
      "to": 46
    },
    "right": {
      "line": "\t\t\t\t\tString nextRight=compressedRightLines.get(nextRightIdx);",
      "lineIdx": 131,
      "from": 43,
      "to": 46
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 6,
      "to": 13
    },
    "right": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 6,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 19,
      "to": 28
    },
    "right": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 19,
      "to": 28
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 1,
      "to": 7
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 1,
      "to": 7
    }
  }, {
    "left": {
      "line": "\t\treturn newMatches;",
      "lineIdx": 140,
      "from": 9,
      "to": 19
    },
    "right": {
      "line": "\t\treturn newMatches;",
      "lineIdx": 144,
      "from": 9,
      "to": 19
    }
  }, {
    "left": {
      "line": "\t\t\t\t\t}",
      "lineIdx": 136,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\t\t\t\t}",
      "lineIdx": 136,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 55,
      "to": 69
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 55,
      "to": 69
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 8,
      "to": 19
    },
    "right": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 8,
      "to": 19
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 31,
      "to": 34
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 31,
      "to": 34
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 75,
      "to": 95
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 75,
      "to": 95
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 23,
      "to": 29
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 23,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 73,
      "to": 77
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 73,
      "to": 77
    }
  }, {
    "left": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import java.util.HashSet;",
      "lineIdx": 10,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 36,
      "to": 39
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 36,
      "to": 39
    }
  }, {
    "left": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 33,
      "to": 45
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 33,
      "to": 45
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 67,
      "to": 70
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 67,
      "to": 70
    }
  }, {
    "left": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 20,
      "to": 39
    },
    "right": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 20,
      "to": 39
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 9,
      "to": 22
    },
    "right": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 9,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 21,
      "to": 26
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 21,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(idxToIdxMatches);",
      "lineIdx": 94,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 3,
      "to": 5
    },
    "right": {
      "line": "\t\t\tif(currentLeft.equals(currentRight)){",
      "lineIdx": 126,
      "from": 3,
      "to": 5
    }
  }, {
    "left": {
      "line": "/**",
      "lineIdx": 22,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "/**",
      "lineIdx": 22,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 93,
      "to": 98
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 93,
      "to": 98
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 15,
      "to": 28
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedRightLines;",
      "lineIdx": 29,
      "from": 15,
      "to": 28
    }
  }, {
    "left": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 37,
      "to": 56
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 37,
      "to": 56
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 69,
      "to": 72
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 69,
      "to": 72
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 52,
      "to": 58
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 52,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 50,
      "to": 55
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 50,
      "to": 55
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableSet;",
      "lineIdx": 18,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 56,
      "to": 62
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 56,
      "to": 62
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "\t\t\tint currentCnt=lineCnt.getOrDefault(line, 0);",
      "lineIdx": 65,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "import static mix.Asserts.require;",
      "lineIdx": 3,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 30,
      "to": 38
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 30,
      "to": 38
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "import static mix.Asserts.requireNotNull;",
      "lineIdx": 5,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 22,
      "to": 25
    },
    "right": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 22,
      "to": 25
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 70,
      "to": 76
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 70,
      "to": 76
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 32,
      "to": 46
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 32,
      "to": 46
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 32,
      "to": 39
    },
    "right": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 32,
      "to": 39
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 112,
      "to": 113
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 112,
      "to": 113
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 59,
      "to": 71
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 59,
      "to": 71
    }
  }, {
    "left": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "\t\texpandedMatches.addAll(longEnoughUniqueMatches);",
      "lineIdx": 99,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "\t\t\t\tint nextLeftIdx=leftIdx+diff;",
      "lineIdx": 127,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 114,
      "to": 115
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 114,
      "to": 115
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 86,
      "to": 91
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 86,
      "to": 91
    }
  }, {
    "left": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 44,
      "to": 57
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 44,
      "to": 57
    }
  }, {
    "left": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 75,
      "to": 81
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 75,
      "to": 81
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 71,
      "to": 75
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 71,
      "to": 75
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 107,
      "to": 108
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 107,
      "to": 108
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 153,
      "to": 154
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 153,
      "to": 154
    }
  }, {
    "left": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "import java.util.ArrayList;",
      "lineIdx": 8,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 23,
      "to": 38
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 23,
      "to": 38
    }
  }, {
    "left": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 18,
      "to": 37
    },
    "right": {
      "line": "import static mix.ImmutableCollectors.collectImmutableList;",
      "lineIdx": 6,
      "from": 18,
      "to": 37
    }
  }, {
    "left": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 12,
      "to": 26
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 12,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 3,
      "to": 10
    },
    "right": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 3,
      "to": 10
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 58,
      "to": 60
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 58,
      "to": 60
    }
  }, {
    "left": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 24,
      "to": 34
    },
    "right": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 24,
      "to": 34
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 116,
      "to": 117
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 116,
      "to": 117
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 27,
      "to": 31
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 27,
      "to": 31
    }
  }, {
    "left": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\t\t\tString currentRight=compressedRightLines.get(rightIdx);",
      "lineIdx": 124,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 22,
      "to": 26
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 22,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 124,
      "to": 125
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 124,
      "to": 125
    }
  }, {
    "left": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 17,
      "to": 20
    },
    "right": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 17,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 67,
      "to": 70
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 67,
      "to": 70
    }
  }, {
    "left": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "\t\t\tInteger leftIdx=leftEntry.getValue();",
      "lineIdx": 90,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 84,
      "to": 104
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 84,
      "to": 104
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "package aligner.nonlearn;",
      "lineIdx": 0,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "package aligner.nonlearn;",
      "lineIdx": 0,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 10,
      "to": 12
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 10,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 17,
      "to": 23
    },
    "right": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 17,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 2,
      "to": 14
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 2,
      "to": 14
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 30,
      "to": 49
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 30,
      "to": 49
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "\tprivate ImmutableList<String> getAllUniqueMatch(){",
      "lineIdx": 48,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 96,
      "to": 125
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 96,
      "to": 125
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 6,
      "to": 16
    },
    "right": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 6,
      "to": 16
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 74,
      "to": 80
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 74,
      "to": 80
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 27,
      "to": 36
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 27,
      "to": 36
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 161,
      "to": 162
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 161,
      "to": 162
    }
  }, {
    "left": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": " */",
      "lineIdx": 25,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": " */",
      "lineIdx": 25,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 27,
      "to": 40
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 27,
      "to": 40
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 72,
      "to": 79
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 72,
      "to": 79
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "import static mix.Asserts.costyRequireEq;",
      "lineIdx": 2,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "\t//TODO being immutable needs a copy. Unlikely to cause problem but in low memory situations it can be",
      "lineIdx": 27,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "\t\t\t}",
      "lineIdx": 78,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "\t\t\t}",
      "lineIdx": 78,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 9,
      "to": 29
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 9,
      "to": 29
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 16,
      "to": 29
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 16,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 39,
      "to": 42
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 39,
      "to": 42
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 107,
      "to": 121
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 107,
      "to": 121
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 57,
      "to": 75
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 57,
      "to": 75
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 120,
      "to": 121
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 120,
      "to": 121
    }
  }, {
    "left": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 17,
      "to": 20
    },
    "right": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 17,
      "to": 20
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 77,
      "to": 84
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 77,
      "to": 84
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 82,
      "to": 105
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 82,
      "to": 105
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "\t\t}",
      "lineIdx": 139,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "\t\t}",
      "lineIdx": 143,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 37,
      "to": 39
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 37,
      "to": 39
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 7,
      "to": 10
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 7,
      "to": 10
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 51,
      "to": 66
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 51,
      "to": 66
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 112,
      "to": 113
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 112,
      "to": 113
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 15,
      "to": 21
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> rightLineToIdx=getLineToIdxMap(matchLines, compressedRightLines);",
      "lineIdx": 87,
      "from": 15,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 48,
      "to": 50
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 48,
      "to": 50
    }
  }, {
    "left": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 39,
      "to": 48
    },
    "right": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 39,
      "to": 48
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 27,
      "to": 35
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 27,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 26,
      "to": 35
    },
    "right": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 26,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 41,
      "to": 44
    },
    "right": {
      "line": "\t\t\t\t\tString nextLeft=compressedLeftLines.get(nextLeftIdx);",
      "lineIdx": 130,
      "from": 41,
      "to": 44
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 33,
      "to": 46
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 33,
      "to": 46
    }
  }, {
    "left": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "\t\tfor(; 0<=leftIdx && leftIdx<compressedLeftLines.size() && 0<=rightIdx && rightIdx<compressedRightLines.size();",
      "lineIdx": 112,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 14,
      "to": 19
    },
    "right": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 14,
      "to": 19
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueLeftLines=ImmutableSet.copyOf(getUniqueLines(compressedLeftLines));",
      "lineIdx": 49,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 67,
      "to": 71
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 67,
      "to": 71
    }
  }, {
    "left": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 120,
      "to": 124
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 120,
      "to": 124
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 83,
      "to": 92
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 83,
      "to": 92
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 15,
      "to": 21
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 15,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 48,
      "to": 52
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 48,
      "to": 52
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 16,
      "to": 31
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 16,
      "to": 31
    }
  }, {
    "left": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 43,
      "to": 50
    },
    "right": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 43,
      "to": 50
    }
  }, {
    "left": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "import java.util.stream.Stream;",
      "lineIdx": 14,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 113,
      "to": 117
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 113,
      "to": 117
    }
  }, {
    "left": {
      "line": "public class NonLearningAligner {",
      "lineIdx": 26,
      "from": 7,
      "to": 12
    },
    "right": {
      "line": "public class NonLearningAligner {",
      "lineIdx": 26,
      "from": 7,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "\t\t\tif(importantLines.contains(allLines.get(i))){",
      "lineIdx": 75,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 89,
      "to": 97
    },
    "right": {
      "line": "\t\t\tidxToIdxMatches.add(LineToLineMatch.create(leftIdx, requireNotNull(rightLineToIdx.get(leftLine))));",
      "lineIdx": 92,
      "from": 89,
      "to": 97
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "\t\treturn ImmutableList.copyOf(uniqueMatchingLines);",
      "lineIdx": 58,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 3,
      "to": 5
    },
    "right": {
      "line": "\t\t\tif(uniqueLeftLines.contains(rightLine)){",
      "lineIdx": 54,
      "from": 3,
      "to": 5
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 105,
      "to": 106
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 105,
      "to": 106
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 32,
      "to": 37
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 32,
      "to": 37
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 31,
      "to": 37
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 31,
      "to": 37
    }
  }, {
    "left": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 17,
      "to": 21
    },
    "right": {
      "line": "import java.util.List;",
      "lineIdx": 11,
      "from": 17,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 29,
      "to": 35
    },
    "right": {
      "line": "\t\t\tString leftLine=leftEntry.getKey();",
      "lineIdx": 91,
      "from": 29,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 15,
      "to": 21
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 15,
      "to": 21
    }
  }, {
    "left": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "import java.util.HashMap;",
      "lineIdx": 9,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 36,
      "to": 39
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 36,
      "to": 39
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 25,
      "to": 32
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableList;",
      "lineIdx": 16,
      "from": 25,
      "to": 32
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 65,
      "to": 80
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 65,
      "to": 80
    }
  }, {
    "left": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 6,
      "to": 22
    },
    "right": {
      "line": "\t\t\tif(allUniqueMatches.contains(current)){",
      "lineIdx": 119,
      "from": 6,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "\t\tfor(String line: compressedLines){",
      "lineIdx": 64,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 80,
      "to": 90
    },
    "right": {
      "line": "\tprivate ImmutableList<LineToLineMatch> getIdxToIdxMatches(ImmutableSet<String> matchLines) {",
      "lineIdx": 85,
      "from": 80,
      "to": 90
    }
  }, {
    "left": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 3,
      "to": 18
    },
    "right": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 3,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "\tprivate List<LineToLineMatch> expand(ImmutableSet<LineToLineMatch> allUniqueMatches, Set<LineToLineMatch> currentMatches, LineToLineMatch start, Dir dir){",
      "lineIdx": 107,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "\t\tStream<Map.Entry<String, Integer>> uniqueEntries=lineCnt.entrySet().stream().filter(entry-> entry.getValue()==1);",
      "lineIdx": 68,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 21,
      "to": 28
    },
    "right": {
      "line": "\t\t\t\t\t\tnewMatches.add(current);",
      "lineIdx": 134,
      "from": 21,
      "to": 28
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 45,
      "to": 48
    },
    "right": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 45,
      "to": 48
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 30,
      "to": 37
    },
    "right": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 30,
      "to": 37
    }
  }, {
    "left": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 100,
      "to": 105
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 100,
      "to": 105
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 66,
      "to": 85
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> uniqueMatches=getIdxToIdxMatches(uniqueMatchingLines);",
      "lineIdx": 42,
      "from": 66,
      "to": 85
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 15,
      "to": 21
    },
    "right": {
      "line": "\tprivate final static int UNIQUE_SAFETY_MIN_LEN=30;",
      "lineIdx": 30,
      "from": 15,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 17,
      "to": 23
    },
    "right": {
      "line": "\t\t\t\t\tif(nextLeft.equals(nextRight)){",
      "lineIdx": 133,
      "from": 17,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 107,
      "to": 108
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 107,
      "to": 108
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 60,
      "to": 73
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 60,
      "to": 73
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 77,
      "to": 83
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 77,
      "to": 83
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 21,
      "to": 29
    },
    "right": {
      "line": "\t\t\t\tleftIdx += diff, rightIdx += diff){",
      "lineIdx": 113,
      "from": 21,
      "to": 29
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "public class NonLearningAligner {",
      "lineIdx": 26,
      "from": 13,
      "to": 31
    },
    "right": {
      "line": "public class NonLearningAligner {",
      "lineIdx": 26,
      "from": 13,
      "to": 31
    }
  }, {
    "left": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\tSet<LineToLineMatch> expandedMatches=new HashSet<>();",
      "lineIdx": 98,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "\tprivate final ImmutableList<String> compressedLeftLines;",
      "lineIdx": 28,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 119,
      "to": 120
    },
    "right": {
      "line": "\tprivate ImmutableSet<LineToLineMatch> expandMatch(ImmutableList<LineToLineMatch> longEnoughUniqueMatches, ImmutableSet<LineToLineMatch> allUniqueMatches){",
      "lineIdx": 97,
      "from": 119,
      "to": 120
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 104,
      "to": 107
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 104,
      "to": 107
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 23,
      "to": 30
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 23,
      "to": 30
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 21,
      "to": 44
    },
    "right": {
      "line": "\t\treturn expandMatch(longEnoughUniqueMatches, ImmutableSet.copyOf(uniqueMatches));",
      "lineIdx": 45,
      "from": 21,
      "to": 44
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 87,
      "to": 90
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 87,
      "to": 90
    }
  }, {
    "left": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "import com.google.common.collect.ImmutableMap;",
      "lineIdx": 17,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t\t}",
      "lineIdx": 57,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "\t\t}",
      "lineIdx": 57,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 29,
      "to": 44
    },
    "right": {
      "line": "\t\treturn ImmutableSet.copyOf(expandedMatches);",
      "lineIdx": 104,
      "from": 29,
      "to": 44
    }
  }, {
    "left": {
      "line": "\t\t}",
      "lineIdx": 79,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "\t\t}",
      "lineIdx": 79,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 63,
      "to": 66
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 63,
      "to": 66
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "\tprivate static ImmutableList<String> getUniqueLines(ImmutableList<String> compressedLines){",
      "lineIdx": 61,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "\tprivate enum Dir{ UP, DOWN }",
      "lineIdx": 31,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 7,
      "to": 27
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 7,
      "to": 27
    }
  }, {
    "left": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 86,
      "to": 98
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 86,
      "to": 98
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 49,
      "to": 55
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 49,
      "to": 55
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 8,
      "to": 26
    },
    "right": {
      "line": "\tpublic NonLearningAligner(ImmutableList<String> leftLines, ImmutableList<String> rightLines){",
      "lineIdx": 33,
      "from": 8,
      "to": 26
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "\t\tArrayList<LineToLineMatch> idxToIdxMatches=new ArrayList<>();",
      "lineIdx": 88,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "\t\tint leftIdx=start.getLeftLineIdx()+diff;",
      "lineIdx": 109,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "\t}",
      "lineIdx": 70,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "\t}",
      "lineIdx": 70,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "\t\tImmutableSet<String> uniqueMatchingLines=ImmutableSet.copyOf(getAllUniqueMatch());",
      "lineIdx": 39,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\tfor(LineToLineMatch match:longEnoughUniqueMatches){",
      "lineIdx": 100,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineToIdxMap=new HashMap<>();",
      "lineIdx": 73,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 19,
      "to": 23
    },
    "right": {
      "line": " * The basic idea: find those lines which almost surely the same (long, unique lines on both sides) and use it as a starting point",
      "lineIdx": 23,
      "from": 19,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "\t\t\t\tint nextRightIdx=rightIdx+diff;",
      "lineIdx": 128,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 42,
      "to": 45
    },
    "right": {
      "line": "\t\t\tString currentLeft=compressedLeftLines.get(leftIdx);",
      "lineIdx": 123,
      "from": 42,
      "to": 45
    }
  }, {
    "left": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 44,
      "to": 47
    },
    "right": {
      "line": "\t\treturn collectImmutableList(uniqueEntries.map(entry -> entry.getKey()));",
      "lineIdx": 69,
      "from": 44,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 24,
      "to": 31
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 24,
      "to": 31
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.DOWN));",
      "lineIdx": 102,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 85,
      "to": 88
    },
    "right": {
      "line": "\t\tcostyRequireEq(importantLines, lineToIdxMap.keySet(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 81,
      "from": 85,
      "to": 88
    }
  }, {
    "left": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 50,
      "to": 57
    },
    "right": {
      "line": "\t\t\tLineToLineMatch current=LineToLineMatch.create(leftIdx, rightIdx);",
      "lineIdx": 115,
      "from": 50,
      "to": 57
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 80,
      "to": 86
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 80,
      "to": 86
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 98,
      "to": 102
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 98,
      "to": 102
    }
  }, {
    "left": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "\t\tfor(Map.Entry<String, Integer> leftEntry: leftLineToIdx.entrySet()){",
      "lineIdx": 89,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 18,
      "to": 25
    },
    "right": {
      "line": "import static mix.Asserts.requireEq;",
      "lineIdx": 4,
      "from": 18,
      "to": 25
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 15,
      "to": 19
    },
    "right": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 15,
      "to": 19
    }
  }, {
    "left": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "\t\t\tlineCnt.put(line, currentCnt+1);",
      "lineIdx": 66,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 16,
      "to": 22
    },
    "right": {
      "line": "\t\tImmutableList<String> uniqueRightLines=getUniqueLines(compressedRightLines);",
      "lineIdx": 50,
      "from": 16,
      "to": 22
    }
  }, {
    "left": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 83,
      "to": 97
    },
    "right": {
      "line": "\tprivate static ImmutableMap<String, Integer> getLineToIdxMap(ImmutableSet<String> importantLines, ImmutableList<String> allLines){",
      "lineIdx": 72,
      "from": 83,
      "to": 97
    }
  }, {
    "left": {
      "line": "\t\t}",
      "lineIdx": 103,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "\t\t}",
      "lineIdx": 103,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 69,
      "to": 76
    },
    "right": {
      "line": "\t\t\t//the idea here is that something is most likely the same if it's between two sames ",
      "lineIdx": 125,
      "from": 69,
      "to": 76
    }
  }, {
    "left": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "\t\tfor(int i=0; i<allLines.size(); ++i){",
      "lineIdx": 74,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 16,
      "to": 19
    },
    "right": {
      "line": "\t\tint diff=dir==Dir.UP?-1:1;",
      "lineIdx": 108,
      "from": 16,
      "to": 19
    }
  }, {
    "left": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "\t\tfor(String rightLine: uniqueRightLines){",
      "lineIdx": 53,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 159,
      "to": 160
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 159,
      "to": 160
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "\t\tImmutableList<LineToLineMatch> longEnoughUniqueMatches=getIdxToIdxMatches(ImmutableSet.copyOf(longEnoughUniqueMatchingLines));",
      "lineIdx": 43,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "import java.util.Map;",
      "lineIdx": 12,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 57,
      "to": 69
    },
    "right": {
      "line": "\t\trequireEq(importantLines.size(), lineToIdxMap.size(), \"lineToIdxMap should contain one record for every important line\");",
      "lineIdx": 80,
      "from": 57,
      "to": 69
    }
  }, {
    "left": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "\t\tMap<String, Integer> lineCnt=new HashMap<>();",
      "lineIdx": 62,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 56,
      "to": 76
    },
    "right": {
      "line": "\t\tImmutableList<String> longEnoughUniqueMatchingLines = collectImmutableList(uniqueMatchingLines.stream().filter(line -> line.length() >= UNIQUE_SAFETY_MIN_LEN));",
      "lineIdx": 40,
      "from": 56,
      "to": 76
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "\t\t\t\trequire(prevValue==null, \"Value was already in map. Key:\"+allLines.get(i) + \", prevValue:\" + prevValue + \", newValue:\" + i);",
      "lineIdx": 77,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "\t\tImmutableMap<String, Integer> leftLineToIdx=getLineToIdxMap(matchLines, compressedLeftLines);",
      "lineIdx": 86,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 71,
      "to": 75
    },
    "right": {
      "line": " * Then expand these areas with lines which almost entirely surely the same (unique lines, same lines)",
      "lineIdx": 24,
      "from": 71,
      "to": 75
    }
  }, {
    "left": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 21,
      "to": 29
    },
    "right": {
      "line": "\t\t\tif(currentMatches.contains(current)){",
      "lineIdx": 116,
      "from": 21,
      "to": 29
    }
  }, {
    "left": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 29,
      "to": 41
    },
    "right": {
      "line": "\t\treturn ImmutableMap.copyOf(lineToIdxMap);",
      "lineIdx": 82,
      "from": 29,
      "to": 41
    }
  }, {
    "left": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "\t\t\texpandedMatches.addAll(expand(allUniqueMatches, expandedMatches, match, Dir.UP));",
      "lineIdx": 101,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "\t\tList<LineToLineMatch> newMatches=new ArrayList<>();",
      "lineIdx": 111,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "\tpublic ImmutableSet<LineToLineMatch> computeAlignment(){",
      "lineIdx": 38,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "\t\t\t\tInteger prevValue=lineToIdxMap.put(requireNotNull(allLines.get(i)), i);",
      "lineIdx": 76,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "import java.util.Set;",
      "lineIdx": 13,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "\t\t\t//here we know that the previous ones match (otherwise we would have already broken out of the loop)",
      "lineIdx": 114,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "\t\tthis.compressedRightLines=collectImmutableList(rightLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 35,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "\t\tArrayList<String> uniqueMatchingLines=new ArrayList<>();",
      "lineIdx": 52,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "\t\tthis.compressedLeftLines=collectImmutableList(leftLines.stream().map(line -> line.replaceAll(\"\\\\s+\", \" \").trim()));",
      "lineIdx": 34,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 125,
      "to": 126
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 125,
      "to": 126
    }
  }, {
    "left": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 70,
      "to": 82
    },
    "right": {
      "line": "\t\t\t\tif(0<=nextLeftIdx && nextLeftIdx<compressedLeftLines.size() && 0<=nextRightIdx && nextRightIdx<compressedRightLines.size()){",
      "lineIdx": 129,
      "from": 70,
      "to": 82
    }
  }]
}