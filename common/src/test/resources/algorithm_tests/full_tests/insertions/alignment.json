{
  "matches": [{
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include <QtTest>",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QtTest>",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 18,
      "to": 27
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 18,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 40,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 44,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "    //TODO logging",
      "lineIdx": 53,
      "from": 11,
      "to": 18
    },
    "right": {
      "line": "    //TODO logging",
      "lineIdx": 61,
      "from": 11,
      "to": 18
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 34,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 20,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 24,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 55,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 63,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 19,
      "from": 36,
      "to": 40
    },
    "right": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 23,
      "from": 36,
      "to": 40
    }
  }, {
    "left": {
      "line": "  void exec() {",
      "lineIdx": 22,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  void exec() {",
      "lineIdx": 26,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "class TestExecutor {",
      "lineIdx": 16,
      "from": 6,
      "to": 18
    },
    "right": {
      "line": "class TestExecutor {",
      "lineIdx": 20,
      "from": 6,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 19,
      "from": 7,
      "to": 10
    },
    "right": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 23,
      "from": 7,
      "to": 10
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 43,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 47,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 41,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 45,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    runTests();",
      "lineIdx": 50,
      "from": 4,
      "to": 12
    },
    "right": {
      "line": "    runTests();",
      "lineIdx": 58,
      "from": 4,
      "to": 12
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 34,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 43,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 47,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 20,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 24,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 40,
      "from": 27,
      "to": 37
    },
    "right": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 44,
      "from": 27,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 42,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 46,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "#include <iostream>",
      "lineIdx": 11,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <iostream>",
      "lineIdx": 11,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 37,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 41,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 47,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 55,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 54,
      "to": 58
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 54,
      "to": 58
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 59,
      "to": 63
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 59,
      "to": 63
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 39,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 43,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 15,
      "to": 26
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 42,
      "from": 15,
      "to": 26
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  void exec() {",
      "lineIdx": 22,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  void exec() {",
      "lineIdx": 26,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 52,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 60,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 52,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 60,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 42,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 37,
      "to": 44
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 37,
      "to": 44
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 30,
      "to": 37
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 30,
      "to": 37
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 43,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 47,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 36,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 40,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "    runTests();",
      "lineIdx": 50,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    runTests();",
      "lineIdx": 58,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 42,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 20,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 24,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 19,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 23,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 35,
      "from": 27,
      "to": 35
    },
    "right": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 39,
      "from": 27,
      "to": 35
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 37,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 41,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 20,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 24,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    initExceptionHandler();",
      "lineIdx": 49,
      "from": 4,
      "to": 24
    },
    "right": {
      "line": "    initExceptionHandler();",
      "lineIdx": 57,
      "from": 4,
      "to": 24
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 41,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 45,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "  try {",
      "lineIdx": 48,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  try {",
      "lineIdx": 56,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 55,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 63,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    initExceptionHandler();",
      "lineIdx": 49,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    initExceptionHandler();",
      "lineIdx": 57,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 35,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 39,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 55,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 63,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 37,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 41,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include <QtTest>",
      "lineIdx": 1,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include <QtTest>",
      "lineIdx": 1,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 44,
      "to": 48
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 44,
      "to": 48
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 41,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 45,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 43,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 47,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 36,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 40,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 47,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 55,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "  TestExecutor executor;",
      "lineIdx": 33,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  TestExecutor executor;",
      "lineIdx": 37,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 19,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 23,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 40,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 44,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 42,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 30,
      "to": 37
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 30,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 52,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 60,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 6,
      "to": 8
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 6,
      "to": 8
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 42,
      "from": 15,
      "to": 26
    },
    "right": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 46,
      "from": 15,
      "to": 26
    }
  }, {
    "left": {
      "line": "    runTests();",
      "lineIdx": 50,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    runTests();",
      "lineIdx": 58,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  try {",
      "lineIdx": 48,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  try {",
      "lineIdx": 56,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 43,
      "from": 27,
      "to": 42
    },
    "right": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 47,
      "from": 27,
      "to": 42
    }
  }, {
    "left": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 36,
      "from": 27,
      "to": 36
    },
    "right": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 40,
      "from": 27,
      "to": 36
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 36,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 40,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "        return;",
      "lineIdx": 26,
      "from": 8,
      "to": 14
    },
    "right": {
      "line": "        return;",
      "lineIdx": 30,
      "from": 8,
      "to": 14
    }
  }, {
    "left": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 20,
      "from": 33,
      "to": 37
    },
    "right": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 24,
      "from": 33,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 21,
      "to": 39
    },
    "right": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 21,
      "to": 39
    }
  }, {
    "left": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    return 0;",
      "lineIdx": 51,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    return 0;",
      "lineIdx": 59,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 57,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 65,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 45,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 53,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 41,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 45,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "#include <QtTest>",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QtTest>",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 41,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 45,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 42,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "  executor.exec();",
      "lineIdx": 44,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  executor.exec();",
      "lineIdx": 52,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 36,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 40,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 21,
      "to": 33
    },
    "right": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 21,
      "to": 33
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 47,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 55,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 39,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 43,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 12,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 12,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 39,
      "from": 27,
      "to": 45
    },
    "right": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 43,
      "from": 27,
      "to": 45
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 39,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 43,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    return 0;",
      "lineIdx": 51,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    return 0;",
      "lineIdx": 59,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 39,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 43,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 30,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "};",
      "lineIdx": 34,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 42,
      "from": 27,
      "to": 49
    },
    "right": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 46,
      "from": 27,
      "to": 49
    }
  }, {
    "left": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 22,
      "to": 26
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 22,
      "to": 26
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 35,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 39,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 43,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 47,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  TestExecutor executor;",
      "lineIdx": 33,
      "from": 15,
      "to": 23
    },
    "right": {
      "line": "  TestExecutor executor;",
      "lineIdx": 37,
      "from": 15,
      "to": 23
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 40,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 44,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 28,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 32,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 40,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 44,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 27,
      "to": 30
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 27,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 21,
      "to": 37
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 21,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    initExceptionHandler();",
      "lineIdx": 49,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    initExceptionHandler();",
      "lineIdx": 57,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 20,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 24,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 35,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 39,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  executor.exec();",
      "lineIdx": 44,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  executor.exec();",
      "lineIdx": 52,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 40,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 44,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "class TestExecutor {",
      "lineIdx": 16,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "class TestExecutor {",
      "lineIdx": 20,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 34,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "void runTests() {",
      "lineIdx": 32,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "void runTests() {",
      "lineIdx": 36,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  executor.exec();",
      "lineIdx": 44,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  executor.exec();",
      "lineIdx": 52,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 41,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 45,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 47,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 55,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include <iostream>",
      "lineIdx": 11,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <iostream>",
      "lineIdx": 11,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  executor.exec();",
      "lineIdx": 44,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  executor.exec();",
      "lineIdx": 52,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  void exec() {",
      "lineIdx": 22,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  void exec() {",
      "lineIdx": 26,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 42,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 46,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 42,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 36,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 40,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 35,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 39,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 13,
      "to": 16
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 13,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 35,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 39,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 55,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 63,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 37,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 41,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 19,
      "to": 29
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 19,
      "to": 29
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 47,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 55,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 19,
      "from": 27,
      "to": 34
    },
    "right": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 23,
      "from": 27,
      "to": 34
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 17,
      "to": 20
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 17,
      "to": 20
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 35,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 39,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 21,
      "to": 29
    },
    "right": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 21,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 35,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 39,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 34,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 29,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 33,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 17,
      "to": 20
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 17,
      "to": 20
    }
  }, {
    "left": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    initExceptionHandler();",
      "lineIdx": 49,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    initExceptionHandler();",
      "lineIdx": 57,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 19,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 23,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 13,
      "to": 16
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 13,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include <QtTest>",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QtTest>",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 47,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 55,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "    //TODO logging",
      "lineIdx": 53,
      "from": 6,
      "to": 10
    },
    "right": {
      "line": "    //TODO logging",
      "lineIdx": 61,
      "from": 6,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 21,
      "to": 32
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 21,
      "to": 32
    }
  }, {
    "left": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 20,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 24,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 30,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "};",
      "lineIdx": 34,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 37,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 41,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 36,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 40,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 36,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 40,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "void runTests() {",
      "lineIdx": 32,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "void runTests() {",
      "lineIdx": 36,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 36,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 40,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 42,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 46,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 47,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 55,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 42,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 46,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 40,
      "to": 44
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 40,
      "to": 44
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 21,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 25,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 55,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 63,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 36,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 40,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 42,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 42,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 46,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 54,
      "to": 57
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 54,
      "to": 57
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 42,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 42,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 46,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 39,
      "from": 15,
      "to": 26
    },
    "right": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 43,
      "from": 15,
      "to": 26
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 22,
      "to": 26
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 22,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 19,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 23,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 18,
      "to": 27
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 18,
      "to": 27
    }
  }, {
    "left": {
      "line": "      }",
      "lineIdx": 27,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "      }",
      "lineIdx": 31,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 12,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 12,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 55,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 63,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 12,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 12,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 43,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 47,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 10,
      "to": 25
    },
    "right": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 10,
      "to": 25
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 52,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 60,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "public:",
      "lineIdx": 18,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "public:",
      "lineIdx": 22,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "  TestExecutor executor;",
      "lineIdx": 33,
      "from": 2,
      "to": 14
    },
    "right": {
      "line": "  TestExecutor executor;",
      "lineIdx": 37,
      "from": 2,
      "to": 14
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 49,
      "to": 52
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 49,
      "to": 52
    }
  }, {
    "left": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 20,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 24,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 16,
      "to": 21
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 16,
      "to": 21
    }
  }, {
    "left": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 20,
      "from": 10,
      "to": 22
    },
    "right": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 24,
      "from": 10,
      "to": 22
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 34,
      "from": 27,
      "to": 39
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 27,
      "to": 39
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 43,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 47,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 36,
      "from": 15,
      "to": 26
    },
    "right": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 40,
      "from": 15,
      "to": 26
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 42,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 40,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 44,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 39,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 43,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 34,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 41,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 45,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 43,
      "from": 15,
      "to": 26
    },
    "right": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 47,
      "from": 15,
      "to": 26
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 55,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 63,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 39,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 43,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 41,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 45,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "void runTests() {",
      "lineIdx": 32,
      "from": 5,
      "to": 13
    },
    "right": {
      "line": "void runTests() {",
      "lineIdx": 36,
      "from": 5,
      "to": 13
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 40,
      "from": 15,
      "to": 26
    },
    "right": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 44,
      "from": 15,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 34,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 34,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 35,
      "from": 15,
      "to": 26
    },
    "right": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 39,
      "from": 15,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 42,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 37,
      "from": 15,
      "to": 26
    },
    "right": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 41,
      "from": 15,
      "to": 26
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 39,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 43,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 42,
      "to": 45
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 42,
      "to": 45
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 55,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 63,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 35,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 39,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 37,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 41,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 42,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 46,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 39,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 43,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 40,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 44,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 43,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 47,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 39,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 43,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 19,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 23,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 35,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 39,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "void runTests() {",
      "lineIdx": 32,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void runTests() {",
      "lineIdx": 36,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 52,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 60,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 40,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 44,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 43,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 47,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 42,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include <iostream>",
      "lineIdx": 11,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <iostream>",
      "lineIdx": 11,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    runTests();",
      "lineIdx": 50,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    runTests();",
      "lineIdx": 58,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 52,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 60,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 47,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 55,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 58,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 66,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 34,
      "from": 15,
      "to": 26
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 15,
      "to": 26
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 19,
      "to": 29
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 19,
      "to": 29
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 47,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 55,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 37,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 41,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "public:",
      "lineIdx": 18,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "public:",
      "lineIdx": 22,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "    //TODO logging",
      "lineIdx": 53,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    //TODO logging",
      "lineIdx": 61,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  void exec() {",
      "lineIdx": 22,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  void exec() {",
      "lineIdx": 26,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 37,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 41,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  executor.exec();",
      "lineIdx": 44,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  executor.exec();",
      "lineIdx": 52,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "        return;",
      "lineIdx": 26,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "        return;",
      "lineIdx": 30,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 13,
      "to": 17
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 13,
      "to": 17
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 36,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "  executor.add(make_unique<SortTests>());",
      "lineIdx": 40,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 35,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "  executor.add(make_unique<MapTests>());",
      "lineIdx": 39,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 20,
      "from": 28,
      "to": 32
    },
    "right": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 24,
      "from": 28,
      "to": 32
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 37,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 41,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "#include \"functional/uniqueoremptytests.h\"",
      "lineIdx": 6,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    //TODO logging",
      "lineIdx": 53,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "    //TODO logging",
      "lineIdx": 61,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 19,
      "from": 16,
      "to": 26
    },
    "right": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 23,
      "from": 16,
      "to": 26
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 34,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 37,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 41,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 52,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 60,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "class TestExecutor {",
      "lineIdx": 16,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "class TestExecutor {",
      "lineIdx": 20,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"functional/maptests.h\"",
      "lineIdx": 3,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 20,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 24,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 19,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 23,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 52,
      "from": 15,
      "to": 24
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 60,
      "from": 15,
      "to": 24
    }
  }, {
    "left": {
      "line": "  executor.exec();",
      "lineIdx": 44,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "  executor.exec();",
      "lineIdx": 52,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 40,
      "to": 45
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 40,
      "to": 45
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 21,
      "to": 30
    },
    "right": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 21,
      "to": 30
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 43,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "  executor.add(make_unique<NumberUtilsTest>());",
      "lineIdx": 47,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 20,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 24,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include <QtTest>",
      "lineIdx": 1,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "#include <QtTest>",
      "lineIdx": 1,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include <iostream>",
      "lineIdx": 11,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "#include <iostream>",
      "lineIdx": 11,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include <iostream>",
      "lineIdx": 11,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include <iostream>",
      "lineIdx": 11,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 42,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 46,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 19,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 23,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "void runTests() {",
      "lineIdx": 32,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "void runTests() {",
      "lineIdx": 36,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 52,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 60,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 12,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 12,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 19,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 23,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"numberutilstest.h\"",
      "lineIdx": 10,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"verifytest.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  void exec() {",
      "lineIdx": 22,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "  void exec() {",
      "lineIdx": 26,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 41,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 45,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 40,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 44,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 47,
      "to": 51
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 47,
      "to": 51
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 52,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 60,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 19,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  void add(std::unique_ptr<QObject> test) {",
      "lineIdx": 23,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 47,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 55,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 41,
      "from": 27,
      "to": 37
    },
    "right": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 45,
      "from": 27,
      "to": 37
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 46,
      "to": 51
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 46,
      "to": 51
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 41,
      "from": 15,
      "to": 26
    },
    "right": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 45,
      "from": 15,
      "to": 26
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 42,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 46,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 17,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  std::vector<std::unique_ptr<QObject>> tests;",
      "lineIdx": 21,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 37,
      "from": 27,
      "to": 38
    },
    "right": {
      "line": "  executor.add(make_unique<FilterTests>());",
      "lineIdx": 41,
      "from": 27,
      "to": 38
    }
  }, {
    "left": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 10,
      "to": 32
    },
    "right": {
      "line": "#include \"nonlearningalignertest.h\"",
      "lineIdx": 9,
      "from": 10,
      "to": 32
    }
  }, {
    "left": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 24,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "      if(QTest::qExec(test.get()) != 0) {",
      "lineIdx": 28,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "#include \"functional/flatmaptests.h\"",
      "lineIdx": 2,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 42,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  executor.add(make_unique<NonLearningAlignerTest>());",
      "lineIdx": 46,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 23,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "    for(const std::unique_ptr<QObject>& test: tests) {",
      "lineIdx": 27,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 34,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    return 0;",
      "lineIdx": 51,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return 0;",
      "lineIdx": 59,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 41,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  executor.add(make_unique<VerifyTest>());",
      "lineIdx": 45,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 20,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    tests.emplace_back(std::move(test));",
      "lineIdx": 24,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 12,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 12,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "#include \"../src/mix/exceptionhandler.h\"",
      "lineIdx": 13,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 34,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include \"eithertest.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 38,
      "from": 27,
      "to": 39
    },
    "right": {
      "line": "  executor.add(make_unique<FlatMapTests>());",
      "lineIdx": 42,
      "from": 27,
      "to": 39
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 40,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  executor.add(make_unique<EitherTest>());",
      "lineIdx": 44,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 21,
      "to": 32
    },
    "right": {
      "line": "#include \"functional/filtertests.h\"",
      "lineIdx": 5,
      "from": 21,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"../src/mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 39,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  executor.add(make_unique<UniqueOrEmptyTests>());",
      "lineIdx": 43,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 25,
      "from": 27,
      "to": 36
    },
    "right": {
      "line": "        std::cout << \"Test execution aborted\" << std::endl;",
      "lineIdx": 29,
      "from": 27,
      "to": 36
    }
  }, {
    "left": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 52,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 60,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 56,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 64,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"functional/sorttests.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 54,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 62,
      "from": 37,
      "to": 38
    }
  }]
}