{
  "matches": [{
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 30,
      "to": 35
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 14,
      "to": 22
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 14,
      "to": 22
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 36,
      "to": 52
    },
    "right": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 36,
      "to": 52
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 10,
      "to": 15
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 10,
      "to": 15
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 16,
      "to": 20
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 16,
      "to": 20
    }
  }, {
    "left": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 10,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 12,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 10,
      "from": 13,
      "to": 33
    },
    "right": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 12,
      "from": 13,
      "to": 33
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 13,
      "from": 21,
      "to": 27
    },
    "right": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 16,
      "from": 21,
      "to": 27
    }
  }, {
    "left": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 11,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 13,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 10,
      "to": 29
    },
    "right": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 10,
      "to": 29
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 10,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 12,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 11,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 13,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 13,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 16,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 13,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 16,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 25,
      "to": 35
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 25,
      "to": 35
    }
  }, {
    "left": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 11,
      "from": 40,
      "to": 48
    },
    "right": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 13,
      "from": 40,
      "to": 48
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 61,
      "to": 70
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 61,
      "to": 70
    }
  }, {
    "left": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 13,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 16,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 48,
      "to": 55
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 48,
      "to": 55
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 11,
      "from": 12,
      "to": 22
    },
    "right": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 13,
      "from": 12,
      "to": 22
    }
  }, {
    "left": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 11,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 13,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 13,
      "from": 29,
      "to": 32
    },
    "right": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 16,
      "from": 29,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 11,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 13,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 18,
      "to": 27
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 18,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 11,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 13,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 10,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 12,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 89,
      "to": 97
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 89,
      "to": 97
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 10,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 12,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 42,
      "to": 59
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 42,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 2,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 4,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 36,
      "to": 43
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 36,
      "to": 43
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 44,
      "to": 48
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 36,
      "to": 40
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 11,
      "from": 23,
      "to": 39
    },
    "right": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 13,
      "from": 23,
      "to": 39
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 27,
      "to": 35
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 27,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 13,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 16,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 14,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 17,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 28,
      "to": 37
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 28,
      "to": 37
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 21,
      "to": 25
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 21,
      "to": 25
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 28,
      "to": 35
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 28,
      "to": 35
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 46,
      "to": 50
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 46,
      "to": 50
    }
  }, {
    "left": {
      "line": "  diff_match_patch lineDiffer;",
      "lineIdx": 8,
      "from": 2,
      "to": 18
    },
    "right": {
      "line": "  diff_match_patch lineDiffer;",
      "lineIdx": 10,
      "from": 2,
      "to": 18
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 36,
      "to": 45
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 36,
      "to": 45
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 99,
      "to": 104
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 99,
      "to": 104
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 72,
      "to": 75
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 72,
      "to": 75
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 45,
      "to": 52
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 45,
      "to": 52
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 17,
      "to": 26
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 17,
      "to": 26
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  diff_match_patch lineDiffer;",
      "lineIdx": 8,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  diff_match_patch lineDiffer;",
      "lineIdx": 10,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 85,
      "to": 88
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 85,
      "to": 88
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 10,
      "from": 34,
      "to": 42
    },
    "right": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 12,
      "from": 34,
      "to": 42
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 13,
      "from": 9,
      "to": 20
    },
    "right": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 16,
      "from": 9,
      "to": 20
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 13,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 16,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 10,
      "to": 14
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 10,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 19,
      "to": 35
    },
    "right": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 19,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "#include \"3rdparty/diff_match_patch/diff_match_patch.h\"",
      "lineIdx": 1,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 76,
      "to": 83
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 76,
      "to": 83
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 13,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  return static_cast<double>(lev);",
      "lineIdx": 16,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 11,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 13,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"levenshteindistance.h\"",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 52,
      "to": 57
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 52,
      "to": 57
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 36,
      "to": 41
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 36,
      "to": 41
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 10,
      "from": 2,
      "to": 12
    },
    "right": {
      "line": "  lineDiffer.diff_cleanupSemantic(lineDiff);",
      "lineIdx": 12,
      "from": 2,
      "to": 12
    }
  }, {
    "left": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 7,
      "from": 38,
      "to": 46
    },
    "right": {
      "line": "  QString right = alignment.rightLine(rightIdx).trimmed();",
      "lineIdx": 9,
      "from": 38,
      "to": 46
    }
  }, {
    "left": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 9,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  QList<Diff> lineDiff = lineDiffer.diff_main(left, right);",
      "lineIdx": 11,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  diff_match_patch lineDiffer;",
      "lineIdx": 8,
      "from": 19,
      "to": 29
    },
    "right": {
      "line": "  diff_match_patch lineDiffer;",
      "lineIdx": 10,
      "from": 19,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 2,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 4,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 6,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  QString left = alignment.leftLine(leftIdx).trimmed();",
      "lineIdx": 8,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 11,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  int lev = lineDiffer.diff_levenshtein(lineDiff);",
      "lineIdx": 13,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 4,
      "from": 7,
      "to": 26
    },
    "right": {
      "line": "double LevenshteinDistance::compute(const OneToOneAlignment &alignment, int leftIdx, int rightIdx) const",
      "lineIdx": 6,
      "from": 7,
      "to": 26
    }
  }, {
    "left": {
      "line": "  VERIFY(lev <= left.size() && lev <= right.size());",
      "lineIdx": 12,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  VERIFY(lev <= left.size() + right.size(),",
      "lineIdx": 14,
      "from": 26,
      "to": 27
    }
  }]
}