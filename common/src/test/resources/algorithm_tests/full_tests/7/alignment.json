{
  "matches": [{
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  } else {",
      "lineIdx": 48,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  } else {",
      "lineIdx": 49,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 63,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 64,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 75,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 76,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  //    updateLineNumberAreaWidth();",
      "lineIdx": 68,
      "from": 8,
      "to": 33
    },
    "right": {
      "line": "  //    updateLineNumberAreaWidth();",
      "lineIdx": 69,
      "from": 8,
      "to": 33
    }
  }, {
    "left": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 154,
      "from": 24,
      "to": 36
    },
    "right": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 155,
      "from": 24,
      "to": 36
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": ", lineNumberArea(*this)",
      "lineIdx": 17,
      "from": 18,
      "to": 22
    },
    "right": {
      "line": ", lineNumberArea(*this)",
      "lineIdx": 17,
      "from": 18,
      "to": 22
    }
  }, {
    "left": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 144,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 145,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 101,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 102,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "#include <QAction>",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QAction>",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "      max /= 10;",
      "lineIdx": 36,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "      max /= 10;",
      "lineIdx": 37,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 55,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 56,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 155,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 156,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include <QAbstractTextDocumentLayout>",
      "lineIdx": 3,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "#include <QAbstractTextDocumentLayout>",
      "lineIdx": 3,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 150,
      "from": 20,
      "to": 34
    },
    "right": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 151,
      "from": 20,
      "to": 34
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 128,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 129,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 60,
      "from": 2,
      "to": 20
    },
    "right": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 61,
      "from": 2,
      "to": 20
    }
  }, {
    "left": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 87,
      "from": 48,
      "to": 58
    },
    "right": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 88,
      "from": 48,
      "to": 58
    }
  }, {
    "left": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 46,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 47,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  return lines2CoordsResult;",
      "lineIdx": 123,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return lines2CoordsResult;",
      "lineIdx": 124,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 51,
      "to": 54
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 51,
      "to": 54
    }
  }, {
    "left": {
      "line": "  while (max >= 10) {",
      "lineIdx": 35,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  while (max >= 10) {",
      "lineIdx": 36,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 96,
      "from": 14,
      "to": 23
    },
    "right": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 97,
      "from": 14,
      "to": 23
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 31,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 32,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 58,
      "to": 63
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 58,
      "to": 63
    }
  }, {
    "left": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 96,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 97,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 24,
      "from": 8,
      "to": 23
    },
    "right": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 25,
      "from": 8,
      "to": 23
    }
  }, {
    "left": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 101,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 102,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": "  return visBlocks;",
      "lineIdx": 139,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return visBlocks;",
      "lineIdx": 140,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 32,
      "to": 42
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 32,
      "to": 42
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 45,
      "to": 52
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 45,
      "to": 52
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 29,
      "to": 37
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 29,
      "to": 37
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 32,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 33,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 150,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 151,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 74,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 75,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 124,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 125,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 24,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 25,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 92,
      "from": 31,
      "to": 37
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 93,
      "from": 31,
      "to": 37
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 62,
      "to": 66
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 62,
      "to": 66
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 51,
      "to": 56
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 51,
      "to": 56
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 25,
      "to": 29
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 25,
      "to": 29
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 24,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 25,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 44,
      "to": 48
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 44,
      "to": 48
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 129,
      "from": 13,
      "to": 18
    },
    "right": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 130,
      "from": 13,
      "to": 18
    }
  }, {
    "left": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 31,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 32,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  vector<QTextBlock> allBlocks;",
      "lineIdx": 94,
      "from": 21,
      "to": 30
    },
    "right": {
      "line": "  vector<QTextBlock> allBlocks;",
      "lineIdx": 95,
      "from": 21,
      "to": 30
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 86,
      "to": 99
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 86,
      "to": 99
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 41,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 42,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 27,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 28,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 110,
      "to": 116
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 110,
      "to": 116
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 159,
      "from": 31,
      "to": 41
    },
    "right": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 160,
      "from": 31,
      "to": 41
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 60,
      "from": 21,
      "to": 40
    },
    "right": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 61,
      "from": 21,
      "to": 40
    }
  }, {
    "left": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 75,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 76,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 154,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 155,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 15,
      "to": 25
    },
    "right": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 15,
      "to": 25
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 35,
      "to": 48
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 35,
      "to": 48
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 126,
      "to": 127
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 126,
      "to": 127
    }
  }, {
    "left": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 144,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 145,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 159,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 160,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 53,
      "to": 56
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 53,
      "to": 56
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 63,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 64,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 74,
      "from": 48,
      "to": 52
    },
    "right": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 75,
      "from": 48,
      "to": 52
    }
  }, {
    "left": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 137,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 138,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 71,
      "from": 5,
      "to": 15
    },
    "right": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 72,
      "from": 5,
      "to": 15
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 68,
      "to": 79
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 68,
      "to": 79
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 25,
      "to": 28
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 25,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include <QAbstractTextDocumentLayout>",
      "lineIdx": 3,
      "from": 10,
      "to": 37
    },
    "right": {
      "line": "#include <QAbstractTextDocumentLayout>",
      "lineIdx": 3,
      "from": 10,
      "to": 37
    }
  }, {
    "left": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 53,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 54,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 44,
      "to": 58
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 44,
      "to": 58
    }
  }, {
    "left": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 24,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 25,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 96,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 97,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 60,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 61,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 113,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 114,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    block = block.next();",
      "lineIdx": 136,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    block = block.next();",
      "lineIdx": 137,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 2,
      "to": 16
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 2,
      "to": 16
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  setAcceptRichText(false);",
      "lineIdx": 26,
      "from": 20,
      "to": 25
    },
    "right": {
      "line": "  setAcceptRichText(false);",
      "lineIdx": 27,
      "from": 20,
      "to": 25
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 76,
      "from": 24,
      "to": 33
    },
    "right": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 77,
      "from": 24,
      "to": 33
    }
  }, {
    "left": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 103,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 104,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 20,
      "to": 23
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 20,
      "to": 23
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 93,
      "to": 96
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 93,
      "to": 96
    }
  }, {
    "left": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 46,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 47,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 111,
      "from": 26,
      "to": 39
    },
    "right": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 112,
      "from": 26,
      "to": 39
    }
  }, {
    "left": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 66,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 67,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 159,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 160,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 53,
      "to": 60
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 53,
      "to": 60
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 35,
      "to": 37
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 35,
      "to": 37
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 142,
      "from": 7,
      "to": 17
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 143,
      "from": 7,
      "to": 17
    }
  }, {
    "left": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 104,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 105,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 117,
      "to": 118
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 117,
      "to": 118
    }
  }, {
    "left": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 157,
      "from": 12,
      "to": 18
    },
    "right": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 158,
      "from": 12,
      "to": 18
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 92,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 93,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "#include <QMenu>",
      "lineIdx": 4,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "#include <QMenu>",
      "lineIdx": 4,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 55,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 56,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 60,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 61,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 26,
      "to": 34
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 26,
      "to": 34
    }
  }, {
    "left": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 31,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 32,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "  return visBlocks;",
      "lineIdx": 139,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return visBlocks;",
      "lineIdx": 140,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 2,
      "to": 21
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 2,
      "to": 21
    }
  }, {
    "left": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 73,
      "from": 16,
      "to": 41
    },
    "right": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 74,
      "from": 16,
      "to": 41
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 119,
      "to": 120
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 119,
      "to": 120
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 39,
      "to": 56
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 39,
      "to": 56
    }
  }, {
    "left": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 71,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 72,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 58,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 59,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 66,
      "from": 49,
      "to": 52
    },
    "right": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 67,
      "from": 49,
      "to": 52
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 155,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 156,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 41,
      "to": 50
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 41,
      "to": 50
    }
  }, {
    "left": {
      "line": "  setAcceptRichText(false);",
      "lineIdx": 26,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  setAcceptRichText(false);",
      "lineIdx": 27,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 101,
      "to": 106
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 101,
      "to": 106
    }
  }, {
    "left": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 104,
      "from": 13,
      "to": 25
    },
    "right": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 105,
      "from": 13,
      "to": 25
    }
  }, {
    "left": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 111,
      "from": 14,
      "to": 23
    },
    "right": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 112,
      "from": 14,
      "to": 23
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 60,
      "to": 64
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 60,
      "to": 64
    }
  }, {
    "left": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 129,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 130,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  updateLineNumberAreaWidth();",
      "lineIdx": 25,
      "from": 2,
      "to": 27
    },
    "right": {
      "line": "  updateLineNumberAreaWidth();",
      "lineIdx": 26,
      "from": 2,
      "to": 27
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 85,
      "to": 96
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 85,
      "to": 96
    }
  }, {
    "left": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 87,
      "from": 6,
      "to": 16
    },
    "right": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 88,
      "from": 6,
      "to": 16
    }
  }, {
    "left": {
      "line": ", lineNumberArea(*this)",
      "lineIdx": 17,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ", lineNumberArea(*this)",
      "lineIdx": 17,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 106,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 107,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 9,
      "to": 19
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 9,
      "to": 19
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 58,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 59,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 43,
      "to": 61
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 43,
      "to": 61
    }
  }, {
    "left": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 155,
      "from": 17,
      "to": 29
    },
    "right": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 156,
      "from": 17,
      "to": 29
    }
  }, {
    "left": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 71,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 72,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  vector<QTextBlock> visBlocks;",
      "lineIdx": 133,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<QTextBlock> visBlocks;",
      "lineIdx": 134,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 46,
      "from": 6,
      "to": 13
    },
    "right": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 47,
      "from": 6,
      "to": 13
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 80,
      "to": 97
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 80,
      "to": 97
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 54,
      "to": 60
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 54,
      "to": 60
    }
  }, {
    "left": {
      "line": "  //    updateLineNumberAreaWidth();",
      "lineIdx": 68,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  //    updateLineNumberAreaWidth();",
      "lineIdx": 69,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "#include <QScrollBar>",
      "lineIdx": 0,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include <QScrollBar>",
      "lineIdx": 0,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 156,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 157,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 71,
      "from": 30,
      "to": 35
    },
    "right": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 72,
      "from": 30,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include <QMenu>",
      "lineIdx": 4,
      "from": 10,
      "to": 15
    },
    "right": {
      "line": "#include <QMenu>",
      "lineIdx": 4,
      "from": 10,
      "to": 15
    }
  }, {
    "left": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 155,
      "from": 32,
      "to": 44
    },
    "right": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 156,
      "from": 32,
      "to": 44
    }
  }, {
    "left": {
      "line": "  return allBlocks;",
      "lineIdx": 98,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return allBlocks;",
      "lineIdx": 99,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 14,
      "to": 24
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 14,
      "to": 24
    }
  }, {
    "left": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 135,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 136,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 37,
      "to": 40
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 37,
      "to": 40
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 61,
      "to": 75
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 61,
      "to": 75
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 73,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 74,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 44,
      "to": 47
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 44,
      "to": 47
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  vector<QTextBlock> allBlocks;",
      "lineIdx": 94,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  vector<QTextBlock> allBlocks;",
      "lineIdx": 95,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 155,
      "from": 10,
      "to": 15
    },
    "right": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 156,
      "from": 10,
      "to": 15
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 112,
      "to": 113
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 112,
      "to": 113
    }
  }, {
    "left": {
      "line": "#include <QTextBlock>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QTextBlock>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "      ++digits;",
      "lineIdx": 37,
      "from": 8,
      "to": 14
    },
    "right": {
      "line": "      ++digits;",
      "lineIdx": 38,
      "from": 8,
      "to": 14
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 79,
      "to": 81
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 79,
      "to": 81
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 1,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 1,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 103,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 104,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 26,
      "to": 31
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 26,
      "to": 31
    }
  }, {
    "left": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 66,
      "from": 16,
      "to": 19
    },
    "right": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 67,
      "from": 16,
      "to": 19
    }
  }, {
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 53,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 54,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 55,
      "to": 73
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 55,
      "to": 73
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 30,
      "to": 33
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 30,
      "to": 33
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 110,
      "to": 111
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 110,
      "to": 111
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "#include <QScrollBar>",
      "lineIdx": 0,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include <QScrollBar>",
      "lineIdx": 0,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 106,
      "to": 107
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 106,
      "to": 107
    }
  }, {
    "left": {
      "line": "  return visBlocks;",
      "lineIdx": 139,
      "from": 9,
      "to": 18
    },
    "right": {
      "line": "  return visBlocks;",
      "lineIdx": 140,
      "from": 9,
      "to": 18
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 142,
      "from": 19,
      "to": 29
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 143,
      "from": 19,
      "to": 29
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 58,
      "to": 64
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 58,
      "to": 64
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 58,
      "from": 5,
      "to": 15
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 59,
      "from": 5,
      "to": 15
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 142,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 143,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 156,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 157,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 43,
      "to": 45
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 43,
      "to": 45
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 66,
      "from": 41,
      "to": 43
    },
    "right": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 67,
      "from": 41,
      "to": 43
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 102,
      "to": 112
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 102,
      "to": 112
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 101,
      "to": 106
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 101,
      "to": 106
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 66,
      "from": 44,
      "to": 48
    },
    "right": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 67,
      "from": 44,
      "to": 48
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 46,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 47,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 156,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 157,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 27,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 28,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "      ++digits;",
      "lineIdx": 37,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "      ++digits;",
      "lineIdx": 38,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 80,
      "to": 84
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 80,
      "to": 84
    }
  }, {
    "left": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 76,
      "from": 34,
      "to": 36
    },
    "right": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 77,
      "from": 34,
      "to": 36
    }
  }, {
    "left": {
      "line": "    return boost::none;",
      "lineIdx": 49,
      "from": 11,
      "to": 16
    },
    "right": {
      "line": "    return boost::none;",
      "lineIdx": 50,
      "from": 11,
      "to": 16
    }
  }, {
    "left": {
      "line": "    } else {",
      "lineIdx": 118,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    } else {",
      "lineIdx": 119,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 75,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 76,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 92,
      "from": 19,
      "to": 29
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 93,
      "from": 19,
      "to": 29
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 42,
      "to": 44
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 42,
      "to": 44
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 123,
      "to": 124
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 123,
      "to": 124
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 18,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 18,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 148,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 149,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 54,
      "to": 58
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 54,
      "to": 58
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 30,
      "to": 33
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 30,
      "to": 33
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 113,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 114,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 137,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 138,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 104,
      "from": 8,
      "to": 10
    },
    "right": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 105,
      "from": 8,
      "to": 10
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 59,
      "to": 73
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 59,
      "to": 73
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 92,
      "from": 7,
      "to": 17
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 93,
      "from": 7,
      "to": 17
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 58,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 59,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 111,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 112,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 76,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 77,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 144,
      "from": 23,
      "to": 27
    },
    "right": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 145,
      "from": 23,
      "to": 27
    }
  }, {
    "left": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 73,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 74,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 129,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 130,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 135,
      "from": 4,
      "to": 13
    },
    "right": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 136,
      "from": 4,
      "to": 13
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 7,
      "to": 20
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 7,
      "to": 20
    }
  }, {
    "left": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 60,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 61,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 73,
      "to": 78
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 73,
      "to": 78
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "  }));",
      "lineIdx": 121,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  }));",
      "lineIdx": 122,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 148,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 149,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 107,
      "to": 108
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 107,
      "to": 108
    }
  }, {
    "left": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 46,
      "from": 2,
      "to": 4
    },
    "right": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 47,
      "from": 2,
      "to": 4
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 47,
      "to": 50
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 47,
      "to": 50
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 41,
      "to": 45
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 41,
      "to": 45
    }
  }, {
    "left": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 103,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 104,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": ", lineNumberArea(*this)",
      "lineIdx": 17,
      "from": 2,
      "to": 16
    },
    "right": {
      "line": ", lineNumberArea(*this)",
      "lineIdx": 17,
      "from": 2,
      "to": 16
    }
  }, {
    "left": {
      "line": "      max /= 10;",
      "lineIdx": 36,
      "from": 13,
      "to": 15
    },
    "right": {
      "line": "      max /= 10;",
      "lineIdx": 37,
      "from": 13,
      "to": 15
    }
  }, {
    "left": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 73,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 74,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 157,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 158,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 131,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 132,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 58,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 59,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 60,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 61,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 46,
      "to": 55
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 46,
      "to": 55
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 87,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 88,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 99,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 100,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 31,
      "to": 41
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 31,
      "to": 41
    }
  }, {
    "left": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 129,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 130,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 20,
      "to": 24
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 20,
      "to": 24
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 18,
      "to": 26
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 18,
      "to": 26
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 16,
      "to": 21
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 16,
      "to": 21
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 159,
      "from": 27,
      "to": 29
    },
    "right": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 160,
      "from": 27,
      "to": 29
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 142,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 143,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 131,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 132,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 29,
      "to": 46
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 29,
      "to": 46
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 38,
      "to": 49
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 38,
      "to": 49
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 105,
      "to": 106
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 105,
      "to": 106
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 154,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 155,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": ": QTextEdit(aParent)",
      "lineIdx": 16,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": ": QTextEdit(aParent)",
      "lineIdx": 16,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 149,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 150,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 148,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 149,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 144,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 145,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 46,
      "from": 20,
      "to": 27
    },
    "right": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 47,
      "from": 20,
      "to": 27
    }
  }, {
    "left": {
      "line": "  updateLineNumberAreaWidth();",
      "lineIdx": 25,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  updateLineNumberAreaWidth();",
      "lineIdx": 26,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "/**",
      "lineIdx": 84,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "/**",
      "lineIdx": 85,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 84,
      "to": 91
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 84,
      "to": 91
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 104,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 105,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "  }));",
      "lineIdx": 121,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  }));",
      "lineIdx": 122,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 129,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 130,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "      ++digits;",
      "lineIdx": 37,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "      ++digits;",
      "lineIdx": 38,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 0,
      "to": 10
    },
    "right": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 0,
      "to": 10
    }
  }, {
    "left": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 53,
      "from": 11,
      "to": 21
    },
    "right": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 54,
      "from": 11,
      "to": 21
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 154,
      "from": 14,
      "to": 21
    },
    "right": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 155,
      "from": 14,
      "to": 21
    }
  }, {
    "left": {
      "line": "    return boost::none;",
      "lineIdx": 49,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    return boost::none;",
      "lineIdx": 50,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 63,
      "from": 17,
      "to": 37
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 64,
      "from": 17,
      "to": 37
    }
  }, {
    "left": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 87,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 88,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 39,
      "to": 52
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 39,
      "to": 52
    }
  }, {
    "left": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 157,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 158,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 10,
      "to": 28
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 10,
      "to": 28
    }
  }, {
    "left": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 111,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 112,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "      ++digits;",
      "lineIdx": 37,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "      ++digits;",
      "lineIdx": 38,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 131,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 132,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 137,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 138,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 72,
      "to": 77
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 72,
      "to": 77
    }
  }, {
    "left": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 24,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 25,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 53,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 54,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 31,
      "to": 44
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 31,
      "to": 44
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 23,
      "to": 41
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 23,
      "to": 41
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 53,
      "from": 0,
      "to": 10
    },
    "right": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 54,
      "from": 0,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include <QScrollBar>",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QScrollBar>",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 154,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 155,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 33,
      "to": 36
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 33,
      "to": 36
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    } else {",
      "lineIdx": 118,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    } else {",
      "lineIdx": 119,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 63,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 64,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 135,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 136,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 140,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 141,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    return boost::none;",
      "lineIdx": 49,
      "from": 18,
      "to": 22
    },
    "right": {
      "line": "    return boost::none;",
      "lineIdx": 50,
      "from": 18,
      "to": 22
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  int digits = 1;",
      "lineIdx": 33,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "  int digits = 1;",
      "lineIdx": 34,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include <QTextBlock>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QTextBlock>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 66,
      "from": 29,
      "to": 33
    },
    "right": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 67,
      "from": 29,
      "to": 33
    }
  }, {
    "left": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 144,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 145,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 159,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 160,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 29,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 30,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 157,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 158,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 24,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 25,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 97,
      "to": 100
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 97,
      "to": 100
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 58,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 59,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 113,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 114,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 87,
      "from": 18,
      "to": 41
    },
    "right": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 88,
      "from": 18,
      "to": 41
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 142,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 143,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "    block = block.next();",
      "lineIdx": 136,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    block = block.next();",
      "lineIdx": 137,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 48,
      "to": 57
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 48,
      "to": 57
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 56,
      "to": 63
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 56,
      "to": 63
    }
  }, {
    "left": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 71,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 72,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 113,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 114,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include <utility>",
      "lineIdx": 6,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include <utility>",
      "lineIdx": 6,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 71,
      "from": 17,
      "to": 29
    },
    "right": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 72,
      "from": 17,
      "to": 29
    }
  }, {
    "left": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 60,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 61,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 137,
      "from": 34,
      "to": 39
    },
    "right": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 138,
      "from": 34,
      "to": 39
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 53,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 54,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  vector<QTextBlock> allBlocks;",
      "lineIdx": 94,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<QTextBlock> allBlocks;",
      "lineIdx": 95,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 66,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 67,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 96,
      "from": 4,
      "to": 13
    },
    "right": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 97,
      "from": 4,
      "to": 13
    }
  }, {
    "left": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 156,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 157,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 131,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 132,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "  //    updateLineNumberAreaWidth();",
      "lineIdx": 68,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  //    updateLineNumberAreaWidth();",
      "lineIdx": 69,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 12,
      "to": 20
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 12,
      "to": 20
    }
  }, {
    "left": {
      "line": ": QTextEdit(aParent)",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ": QTextEdit(aParent)",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  vector<QTextBlock> allBlocks;",
      "lineIdx": 94,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  vector<QTextBlock> allBlocks;",
      "lineIdx": 95,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 27,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 28,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  }));",
      "lineIdx": 121,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  }));",
      "lineIdx": 122,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 72,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 73,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 66,
      "to": 70
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 66,
      "to": 70
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 40,
      "to": 46
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 40,
      "to": 46
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 104,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 105,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 54,
      "to": 58
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 54,
      "to": 58
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "  while (max >= 10) {",
      "lineIdx": 35,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  while (max >= 10) {",
      "lineIdx": 36,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 27,
      "to": 38
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 27,
      "to": 38
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 96,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 97,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "#include <QMenu>",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QMenu>",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 120,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 121,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "    block = block.next();",
      "lineIdx": 136,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    block = block.next();",
      "lineIdx": 137,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 154,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 155,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  while (max >= 10) {",
      "lineIdx": 35,
      "from": 16,
      "to": 18
    },
    "right": {
      "line": "  while (max >= 10) {",
      "lineIdx": 36,
      "from": 16,
      "to": 18
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 76,
      "to": 81
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 76,
      "to": 81
    }
  }, {
    "left": {
      "line": "  return lines2CoordsResult;",
      "lineIdx": 123,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  return lines2CoordsResult;",
      "lineIdx": 124,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 27,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 28,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 148,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 149,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 128,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 129,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 78,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 79,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 75,
      "from": 16,
      "to": 29
    },
    "right": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 76,
      "from": 16,
      "to": 29
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 131,
      "from": 12,
      "to": 35
    },
    "right": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 132,
      "from": 12,
      "to": 35
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 17,
      "to": 23
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 17,
      "to": 23
    }
  }, {
    "left": {
      "line": "      max /= 10;",
      "lineIdx": 36,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "      max /= 10;",
      "lineIdx": 37,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 30,
      "to": 36
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 30,
      "to": 36
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 78,
      "from": 8,
      "to": 17
    },
    "right": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 79,
      "from": 8,
      "to": 17
    }
  }, {
    "left": {
      "line": ", lineNumberArea(*this)",
      "lineIdx": 17,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": ", lineNumberArea(*this)",
      "lineIdx": 17,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "  int digits = 1;",
      "lineIdx": 33,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  int digits = 1;",
      "lineIdx": 34,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 75,
      "from": 6,
      "to": 13
    },
    "right": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 76,
      "from": 6,
      "to": 13
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 58,
      "to": 71
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 58,
      "to": 71
    }
  }, {
    "left": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 76,
      "from": 41,
      "to": 46
    },
    "right": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 77,
      "from": 41,
      "to": 46
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 156,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 157,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 21,
      "to": 35
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 21,
      "to": 35
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 31,
      "from": 4,
      "to": 14
    },
    "right": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 32,
      "from": 4,
      "to": 14
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 26,
      "to": 31
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 26,
      "to": 31
    }
  }, {
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 157,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 158,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 92,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 93,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 60,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 61,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  return space;",
      "lineIdx": 40,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  return space;",
      "lineIdx": 41,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 38,
      "to": 42
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 38,
      "to": 42
    }
  }, {
    "left": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 55,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 56,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 46,
      "from": 14,
      "to": 19
    },
    "right": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 47,
      "from": 14,
      "to": 19
    }
  }, {
    "left": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 46,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 47,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 50,
      "to": 56
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 50,
      "to": 56
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 102,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 103,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 74,
      "from": 2,
      "to": 13
    },
    "right": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 75,
      "from": 2,
      "to": 13
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  int digits = 1;",
      "lineIdx": 33,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  int digits = 1;",
      "lineIdx": 34,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 72,
      "to": 74
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 72,
      "to": 74
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 47,
      "to": 50
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 47,
      "to": 50
    }
  }, {
    "left": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 76,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 77,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 101,
      "from": 17,
      "to": 28
    },
    "right": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 102,
      "from": 17,
      "to": 28
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include <QMenu>",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QMenu>",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": ", lineNumberArea(*this)",
      "lineIdx": 17,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": ", lineNumberArea(*this)",
      "lineIdx": 17,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 131,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 132,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 92,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 93,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 159,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 160,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 22,
      "to": 28
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 22,
      "to": 28
    }
  }, {
    "left": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 131,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 132,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 104,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 105,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 19,
      "to": 22
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 19,
      "to": 22
    }
  }, {
    "left": {
      "line": "  while (max >= 10) {",
      "lineIdx": 35,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "  while (max >= 10) {",
      "lineIdx": 36,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 31,
      "from": 16,
      "to": 35
    },
    "right": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 32,
      "from": 16,
      "to": 35
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 111,
      "to": 112
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 111,
      "to": 112
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 48,
      "to": 67
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 48,
      "to": 67
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "      max /= 10;",
      "lineIdx": 36,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "      max /= 10;",
      "lineIdx": 37,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 157,
      "from": 23,
      "to": 28
    },
    "right": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 158,
      "from": 23,
      "to": 28
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 28,
      "to": 31
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 28,
      "to": 31
    }
  }, {
    "left": {
      "line": "/**",
      "lineIdx": 84,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "/**",
      "lineIdx": 85,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include <QTextBlock>",
      "lineIdx": 2,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include <QTextBlock>",
      "lineIdx": 2,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 27,
      "from": 27,
      "to": 44
    },
    "right": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 28,
      "from": 27,
      "to": 44
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 78,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 79,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 62,
      "to": 67
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 62,
      "to": 67
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 162,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 163,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 92,
      "from": 40,
      "to": 45
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 93,
      "from": 40,
      "to": 45
    }
  }, {
    "left": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 75,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 76,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 137,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 138,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 7,
      "to": 14
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 7,
      "to": 14
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 56,
      "to": 75
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 56,
      "to": 75
    }
  }, {
    "left": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 128,
      "from": 2,
      "to": 13
    },
    "right": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 129,
      "from": 2,
      "to": 13
    }
  }, {
    "left": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 156,
      "from": 30,
      "to": 36
    },
    "right": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 157,
      "from": 30,
      "to": 36
    }
  }, {
    "left": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 137,
      "from": 10,
      "to": 33
    },
    "right": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 138,
      "from": 10,
      "to": 33
    }
  }, {
    "left": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 24,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 25,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 156,
      "from": 12,
      "to": 18
    },
    "right": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 157,
      "from": 12,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include <QAbstractTextDocumentLayout>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QAbstractTextDocumentLayout>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 1,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 1,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 82,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 83,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 155,
      "from": 45,
      "to": 51
    },
    "right": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 156,
      "from": 45,
      "to": 51
    }
  }, {
    "left": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 75,
      "from": 38,
      "to": 49
    },
    "right": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 76,
      "from": 38,
      "to": 49
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 104,
      "to": 105
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 104,
      "to": 105
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 88,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 89,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    return boost::none;",
      "lineIdx": 49,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    return boost::none;",
      "lineIdx": 50,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 57,
      "to": 62
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 57,
      "to": 62
    }
  }, {
    "left": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 87,
      "from": 60,
      "to": 65
    },
    "right": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 88,
      "from": 60,
      "to": 65
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 64,
      "to": 68
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 64,
      "to": 68
    }
  }, {
    "left": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 154,
      "from": 37,
      "to": 42
    },
    "right": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 155,
      "from": 37,
      "to": 42
    }
  }, {
    "left": {
      "line": " */",
      "lineIdx": 86,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": " */",
      "lineIdx": 87,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 53,
      "from": 31,
      "to": 34
    },
    "right": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 54,
      "from": 31,
      "to": 34
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 160,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 161,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 87,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 88,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 150,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 151,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  updateLineNumberAreaWidth();",
      "lineIdx": 25,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  updateLineNumberAreaWidth();",
      "lineIdx": 26,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 46,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 47,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 131,
      "from": 43,
      "to": 46
    },
    "right": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 132,
      "from": 43,
      "to": 46
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 37,
      "to": 42
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 37,
      "to": 42
    }
  }, {
    "left": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 66,
      "from": 20,
      "to": 28
    },
    "right": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 67,
      "from": 20,
      "to": 28
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 12,
      "to": 15
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 12,
      "to": 15
    }
  }, {
    "left": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 55,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 56,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  setAcceptRichText(false);",
      "lineIdx": 26,
      "from": 2,
      "to": 19
    },
    "right": {
      "line": "  setAcceptRichText(false);",
      "lineIdx": 27,
      "from": 2,
      "to": 19
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 13,
      "to": 19
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 13,
      "to": 19
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 31,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 32,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 60,
      "to": 66
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 60,
      "to": 66
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 111,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 112,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 148,
      "from": 17,
      "to": 41
    },
    "right": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 149,
      "from": 17,
      "to": 41
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 93,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 94,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 73,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 74,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  vector<QTextBlock> visBlocks;",
      "lineIdx": 133,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  vector<QTextBlock> visBlocks;",
      "lineIdx": 134,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 103,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 104,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 61,
      "to": 71
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 61,
      "to": 71
    }
  }, {
    "left": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 87,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 88,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 75,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 76,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 137,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 138,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  while (max >= 10) {",
      "lineIdx": 35,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  while (max >= 10) {",
      "lineIdx": 36,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 8,
      "to": 14
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 8,
      "to": 14
    }
  }, {
    "left": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 73,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 74,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 13,
      "to": 16
    },
    "right": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 13,
      "to": 16
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 24,
      "to": 29
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 24,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 16,
      "to": 24
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 16,
      "to": 24
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 92,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 93,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 37,
      "to": 46
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 37,
      "to": 46
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 127,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 128,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 30,
      "to": 37
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 30,
      "to": 37
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 55,
      "from": 21,
      "to": 42
    },
    "right": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 56,
      "from": 21,
      "to": 42
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 27,
      "to": 32
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 27,
      "to": 32
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 10,
      "to": 14
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 10,
      "to": 14
    }
  }, {
    "left": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 24,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 25,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "#include <QMenu>",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QMenu>",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 155,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 156,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 52,
      "to": 55
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 52,
      "to": 55
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  while (max >= 10) {",
      "lineIdx": 35,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  while (max >= 10) {",
      "lineIdx": 36,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 17,
      "to": 20
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 17,
      "to": 20
    }
  }, {
    "left": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 96,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 97,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    block = block.next();",
      "lineIdx": 136,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "    block = block.next();",
      "lineIdx": 137,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 113,
      "from": 14,
      "to": 37
    },
    "right": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 114,
      "from": 14,
      "to": 37
    }
  }, {
    "left": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 128,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 129,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 76,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 77,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 7,
      "to": 17
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 7,
      "to": 17
    }
  }, {
    "left": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 150,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 151,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 74,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 75,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 56,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 57,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 128,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 129,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 103,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 104,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 103,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 104,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 53,
      "from": 23,
      "to": 30
    },
    "right": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 54,
      "from": 23,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 17,
      "to": 36
    },
    "right": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 17,
      "to": 36
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 63,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 64,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 97,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 98,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 46,
      "to": 48
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 46,
      "to": 48
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 27,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 28,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 79,
      "to": 102
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 79,
      "to": 102
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 17,
      "to": 21
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 17,
      "to": 21
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 82,
      "to": 88
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 82,
      "to": 88
    }
  }, {
    "left": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 135,
      "from": 24,
      "to": 29
    },
    "right": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 136,
      "from": 24,
      "to": 29
    }
  }, {
    "left": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 113,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 114,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 129,
      "from": 21,
      "to": 36
    },
    "right": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 130,
      "from": 21,
      "to": 36
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 119,
      "to": 124
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 119,
      "to": 124
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 120,
      "to": 121
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 120,
      "to": 121
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 14,
      "to": 23
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 14,
      "to": 23
    }
  }, {
    "left": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 74,
      "from": 14,
      "to": 27
    },
    "right": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 75,
      "from": 14,
      "to": 27
    }
  }, {
    "left": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 60,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 61,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 63,
      "from": 52,
      "to": 62
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 64,
      "from": 52,
      "to": 62
    }
  }, {
    "left": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 27,
      "from": 23,
      "to": 25
    },
    "right": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 28,
      "from": 23,
      "to": 25
    }
  }, {
    "left": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 135,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 136,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 73,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 74,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 64,
      "to": 69
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 64,
      "to": 69
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 111,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 112,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 38,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 39,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 78,
      "from": 18,
      "to": 36
    },
    "right": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 79,
      "from": 18,
      "to": 36
    }
  }, {
    "left": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 71,
      "from": 44,
      "to": 48
    },
    "right": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 72,
      "from": 44,
      "to": 48
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  int digits = 1;",
      "lineIdx": 33,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  int digits = 1;",
      "lineIdx": 34,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 148,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 149,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 20,
      "to": 28
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 20,
      "to": 28
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 15,
      "to": 22
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 15,
      "to": 22
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 65,
      "to": 90
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 65,
      "to": 90
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 142,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 143,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include <QAbstractTextDocumentLayout>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QAbstractTextDocumentLayout>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 60,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 61,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "#include <QAction>",
      "lineIdx": 5,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include <QAction>",
      "lineIdx": 5,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 148,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 149,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 35,
      "to": 40
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 35,
      "to": 40
    }
  }, {
    "left": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 78,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 79,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include <utility>",
      "lineIdx": 6,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include <utility>",
      "lineIdx": 6,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 137,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 138,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 11,
      "to": 16
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 11,
      "to": 16
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 20,
      "to": 28
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 20,
      "to": 28
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 39,
      "to": 42
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 39,
      "to": 42
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 16,
      "to": 22
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 16,
      "to": 22
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 47,
      "to": 53
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 47,
      "to": 53
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 56,
      "to": 58
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 56,
      "to": 58
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 64,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 65,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 58,
      "from": 17,
      "to": 42
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberAreaWidth()",
      "lineIdx": 59,
      "from": 17,
      "to": 42
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  vector<QTextBlock> allBlocks;",
      "lineIdx": 94,
      "from": 9,
      "to": 19
    },
    "right": {
      "line": "  vector<QTextBlock> allBlocks;",
      "lineIdx": 95,
      "from": 9,
      "to": 19
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 92,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 93,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 101,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 102,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 137,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 138,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 75,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 76,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 44,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 45,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include <QAction>",
      "lineIdx": 5,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include <QAction>",
      "lineIdx": 5,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 66,
      "from": 36,
      "to": 40
    },
    "right": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 67,
      "from": 36,
      "to": 40
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 69,
      "to": 72
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 69,
      "to": 72
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 63,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 64,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include <QScrollBar>",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QScrollBar>",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 137,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 138,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 35,
      "to": 40
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 35,
      "to": 40
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 32,
      "to": 37
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 32,
      "to": 37
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 43,
      "to": 46
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 43,
      "to": 46
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 55,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 56,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  vector<QTextBlock> allBlocks;",
      "lineIdx": 94,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<QTextBlock> allBlocks;",
      "lineIdx": 95,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 128,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 129,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 21,
      "to": 24
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 21,
      "to": 24
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 113,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 114,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 64,
      "to": 74
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 64,
      "to": 74
    }
  }, {
    "left": {
      "line": "#include <utility>",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <utility>",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 43,
      "to": 61
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 43,
      "to": 61
    }
  }, {
    "left": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 27,
      "from": 2,
      "to": 22
    },
    "right": {
      "line": "  setContextMenuPolicy(Qt::CustomContextMenu);",
      "lineIdx": 28,
      "from": 2,
      "to": 22
    }
  }, {
    "left": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 12,
      "to": 22
    },
    "right": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 12,
      "to": 22
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 59,
      "to": 63
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 59,
      "to": 63
    }
  }, {
    "left": {
      "line": "  //    updateLineNumberAreaWidth();",
      "lineIdx": 68,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  //    updateLineNumberAreaWidth();",
      "lineIdx": 69,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 24,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 25,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 49,
      "to": 55
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 49,
      "to": 55
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 25,
      "to": 29
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 25,
      "to": 29
    }
  }, {
    "left": {
      "line": "  setAcceptRichText(false);",
      "lineIdx": 26,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  setAcceptRichText(false);",
      "lineIdx": 27,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 46,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 47,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 128,
      "from": 14,
      "to": 29
    },
    "right": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 129,
      "from": 14,
      "to": 29
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 159,
      "from": 43,
      "to": 49
    },
    "right": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 160,
      "from": 43,
      "to": 49
    }
  }, {
    "left": {
      "line": "    } else {",
      "lineIdx": 118,
      "from": 6,
      "to": 10
    },
    "right": {
      "line": "    } else {",
      "lineIdx": 119,
      "from": 6,
      "to": 10
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 71,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 72,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 150,
      "from": 11,
      "to": 18
    },
    "right": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 151,
      "from": 11,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 68,
      "to": 77
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 68,
      "to": 77
    }
  }, {
    "left": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 113,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 114,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  vector<QTextBlock> visBlocks;",
      "lineIdx": 133,
      "from": 21,
      "to": 30
    },
    "right": {
      "line": "  vector<QTextBlock> visBlocks;",
      "lineIdx": 134,
      "from": 21,
      "to": 30
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 63,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 64,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 84,
      "to": 88
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 84,
      "to": 88
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 128,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 129,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 87,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 88,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 55,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 56,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  return space;",
      "lineIdx": 40,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "  return space;",
      "lineIdx": 41,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "  }));",
      "lineIdx": 121,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }));",
      "lineIdx": 122,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 51,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 52,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 74,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 75,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 78,
      "to": 82
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 78,
      "to": 82
    }
  }, {
    "left": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 60,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 61,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 96,
      "to": 102
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 96,
      "to": 102
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 111,
      "from": 40,
      "to": 53
    },
    "right": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 112,
      "from": 40,
      "to": 53
    }
  }, {
    "left": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 75,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 76,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 66,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 67,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 13,
      "to": 15
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 13,
      "to": 15
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 25,
      "to": 29
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 25,
      "to": 29
    }
  }, {
    "left": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 55,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 56,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 73,
      "to": 79
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 73,
      "to": 79
    }
  }, {
    "left": {
      "line": "  vector<QTextBlock> visBlocks;",
      "lineIdx": 133,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<QTextBlock> visBlocks;",
      "lineIdx": 134,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "  } else {",
      "lineIdx": 48,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  } else {",
      "lineIdx": 49,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 71,
      "to": 83
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 71,
      "to": 83
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 72,
      "to": 76
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 72,
      "to": 76
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 76,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 77,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  return space;",
      "lineIdx": 40,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return space;",
      "lineIdx": 41,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 113,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 114,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 45,
      "to": 50
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 45,
      "to": 50
    }
  }, {
    "left": {
      "line": "#include <utility>",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <utility>",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 156,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 157,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "    return boost::none;",
      "lineIdx": 49,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return boost::none;",
      "lineIdx": 50,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 54,
      "to": 60
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 54,
      "to": 60
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 156,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 157,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 142,
      "from": 31,
      "to": 44
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 143,
      "from": 31,
      "to": 44
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 30,
      "to": 32
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 30,
      "to": 32
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 116,
      "to": 117
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 116,
      "to": 117
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 31,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "int CodeEditor::lineNumberAreaWidth()",
      "lineIdx": 32,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 42,
      "to": 45
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 42,
      "to": 45
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 137,
      "from": 41,
      "to": 44
    },
    "right": {
      "line": "    top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 138,
      "from": 41,
      "to": 44
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 113,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 114,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "    block = block.next();",
      "lineIdx": 136,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    block = block.next();",
      "lineIdx": 137,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 63,
      "from": 5,
      "to": 15
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 64,
      "from": 5,
      "to": 15
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 103,
      "from": 13,
      "to": 24
    },
    "right": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 104,
      "from": 13,
      "to": 24
    }
  }, {
    "left": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 73,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  QMenu *menu = createStandardContextMenu();",
      "lineIdx": 74,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 69,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 70,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 142,
      "from": 47,
      "to": 52
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 143,
      "from": 47,
      "to": 52
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 106,
      "to": 107
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 106,
      "to": 107
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 74,
      "to": 82
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 74,
      "to": 82
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 90,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 91,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 71,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 72,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 38,
      "to": 41
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 38,
      "to": 41
    }
  }, {
    "left": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 101,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 102,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 104,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  QRect cr = contentsRect();",
      "lineIdx": 105,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 44,
      "to": 54
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 44,
      "to": 54
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 118,
      "to": 119
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 118,
      "to": 119
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 145,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 146,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    block = block.next();",
      "lineIdx": 136,
      "from": 18,
      "to": 22
    },
    "right": {
      "line": "    block = block.next();",
      "lineIdx": 137,
      "from": 18,
      "to": 22
    }
  }, {
    "left": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 53,
      "from": 35,
      "to": 39
    },
    "right": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 54,
      "from": 35,
      "to": 39
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 67,
      "to": 92
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 67,
      "to": 92
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 29,
      "to": 33
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 29,
      "to": 33
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": ": QTextEdit(aParent)",
      "lineIdx": 16,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": ": QTextEdit(aParent)",
      "lineIdx": 16,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 87,
      "from": 67,
      "to": 72
    },
    "right": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 88,
      "from": 67,
      "to": 72
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 157,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 158,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 76,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 77,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 59,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 60,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 37,
      "to": 39
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 37,
      "to": 39
    }
  }, {
    "left": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 46,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 47,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 90,
      "to": 95
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 90,
      "to": 95
    }
  }, {
    "left": {
      "line": "  //    updateLineNumberAreaWidth();",
      "lineIdx": 68,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  //    updateLineNumberAreaWidth();",
      "lineIdx": 69,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 60,
      "to": 67
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 60,
      "to": 67
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 103,
      "to": 108
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 103,
      "to": 108
    }
  }, {
    "left": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 128,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 129,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 63,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 64,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 7,
      "to": 20
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 7,
      "to": 20
    }
  }, {
    "left": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 87,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 88,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 16,
      "to": 21
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 16,
      "to": 21
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "  return allBlocks;",
      "lineIdx": 98,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return allBlocks;",
      "lineIdx": 99,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 156,
      "from": 37,
      "to": 44
    },
    "right": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 157,
      "from": 37,
      "to": 44
    }
  }, {
    "left": {
      "line": "#include <QTextBlock>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QTextBlock>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 129,
      "from": 2,
      "to": 12
    },
    "right": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 130,
      "from": 2,
      "to": 12
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 61,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 62,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 148,
      "from": 5,
      "to": 15
    },
    "right": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 149,
      "from": 5,
      "to": 15
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 66,
      "from": 13,
      "to": 15
    },
    "right": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 67,
      "from": 13,
      "to": 15
    }
  }, {
    "left": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 155,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 156,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 55,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 56,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 63,
      "from": 44,
      "to": 50
    },
    "right": {
      "line": "void CodeEditor::updateLineNumberArea(const QRectF &updateRect)",
      "lineIdx": 64,
      "from": 44,
      "to": 50
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "#include <QAction>",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QAction>",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 76,
      "from": 19,
      "to": 23
    },
    "right": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 77,
      "from": 19,
      "to": 23
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 17,
      "to": 28
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 17,
      "to": 28
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 78,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 79,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 75,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 76,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 75,
      "to": 83
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 75,
      "to": 83
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 33,
      "to": 38
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 33,
      "to": 38
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 53,
      "to": 60
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 53,
      "to": 60
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 80,
      "to": 89
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 80,
      "to": 89
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 119,
      "from": 13,
      "to": 19
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{};",
      "lineIdx": 120,
      "from": 13,
      "to": 19
    }
  }, {
    "left": {
      "line": "    block = block.next();",
      "lineIdx": 136,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    block = block.next();",
      "lineIdx": 137,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 87,
      "from": 42,
      "to": 47
    },
    "right": {
      "line": "QRect CodeEditor::getRectForTextBlockInLC(const QTextBlock& block) const",
      "lineIdx": 88,
      "from": 42,
      "to": 47
    }
  }, {
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 10,
      "to": 27
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 10,
      "to": 27
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 59,
      "to": 64
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 59,
      "to": 64
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 157,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 158,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 144,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 145,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 111,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 112,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 54,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 55,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 70,
      "to": 74
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 70,
      "to": 74
    }
  }, {
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 64,
      "to": 75
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 64,
      "to": 75
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 19,
      "to": 27
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 19,
      "to": 27
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 80,
      "to": 86
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 80,
      "to": 86
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 60,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 61,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 46,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 47,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 75,
      "to": 79
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 75,
      "to": 79
    }
  }, {
    "left": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 47,
      "from": 34,
      "to": 41
    },
    "right": {
      "line": "    return boost::optional<QRect>(line2LC.at(lineNum));",
      "lineIdx": 48,
      "from": 34,
      "to": 41
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 150,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 151,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 23,
      "to": 30
    },
    "right": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 23,
      "to": 30
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 128,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 129,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 33,
      "to": 40
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 33,
      "to": 40
    }
  }, {
    "left": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 111,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 112,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 60,
      "to": 64
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 60,
      "to": 64
    }
  }, {
    "left": {
      "line": "    return boost::none;",
      "lineIdx": 49,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    return boost::none;",
      "lineIdx": 50,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  updateLineNumberAreaWidth();",
      "lineIdx": 25,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  updateLineNumberAreaWidth();",
      "lineIdx": 26,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 31,
      "to": 37
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 31,
      "to": 37
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 23,
      "to": 33
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 23,
      "to": 33
    }
  }, {
    "left": {
      "line": "  //    updateLineNumberAreaWidth();",
      "lineIdx": 68,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  //    updateLineNumberAreaWidth();",
      "lineIdx": 69,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 134,
      "from": 28,
      "to": 31
    },
    "right": {
      "line": "  while (block.isValid() && top <= visibleAreaLC.bottom()) {",
      "lineIdx": 135,
      "from": 28,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 55,
      "from": 43,
      "to": 47
    },
    "right": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 56,
      "from": 43,
      "to": 47
    }
  }, {
    "left": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 129,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 130,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 46,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  if (line2LC.count(lineNum) != 0) {",
      "lineIdx": 47,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 82,
      "to": 88
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 82,
      "to": 88
    }
  }, {
    "left": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 27,
      "to": 37
    },
    "right": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 27,
      "to": 37
    }
  }, {
    "left": {
      "line": "  while (max >= 10) {",
      "lineIdx": 35,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  while (max >= 10) {",
      "lineIdx": 36,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 157,
      "from": 19,
      "to": 21
    },
    "right": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 158,
      "from": 19,
      "to": 21
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 105,
      "to": 106
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 105,
      "to": 106
    }
  }, {
    "left": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 101,
      "from": 29,
      "to": 41
    },
    "right": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 102,
      "from": 29,
      "to": 41
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 19,
      "to": 29
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 19,
      "to": 29
    }
  }, {
    "left": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  logger.info(\"CodeEditor::CodeEditor\");",
      "lineIdx": 19,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 75,
      "to": 95
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 75,
      "to": 95
    }
  }, {
    "left": {
      "line": "  return allBlocks;",
      "lineIdx": 98,
      "from": 9,
      "to": 18
    },
    "right": {
      "line": "  return allBlocks;",
      "lineIdx": 99,
      "from": 9,
      "to": 18
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": ", lineNumberArea(*this)",
      "lineIdx": 17,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": ", lineNumberArea(*this)",
      "lineIdx": 17,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  int digits = 1;",
      "lineIdx": 33,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  int digits = 1;",
      "lineIdx": 34,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "/**",
      "lineIdx": 84,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "/**",
      "lineIdx": 85,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 103,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  QTextEdit::resizeEvent(e);",
      "lineIdx": 104,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 20,
      "to": 28
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 20,
      "to": 28
    }
  }, {
    "left": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 148,
      "from": 55,
      "to": 63
    },
    "right": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 149,
      "from": 55,
      "to": 63
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 92,
      "to": 96
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 92,
      "to": 96
    }
  }, {
    "left": {
      "line": "  vector<QTextBlock> visBlocks;",
      "lineIdx": 133,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  vector<QTextBlock> visBlocks;",
      "lineIdx": 134,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 20,
      "to": 23
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 20,
      "to": 23
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 11,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 5,
      "to": 18
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 5,
      "to": 18
    }
  }, {
    "left": {
      "line": "  return lines2CoordsResult;",
      "lineIdx": 123,
      "from": 9,
      "to": 27
    },
    "right": {
      "line": "  return lines2CoordsResult;",
      "lineIdx": 124,
      "from": 9,
      "to": 27
    }
  }, {
    "left": {
      "line": ": QTextEdit(aParent)",
      "lineIdx": 16,
      "from": 12,
      "to": 19
    },
    "right": {
      "line": ": QTextEdit(aParent)",
      "lineIdx": 16,
      "from": 12,
      "to": 19
    }
  }, {
    "left": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 101,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 102,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 24,
      "to": 36
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 24,
      "to": 36
    }
  }, {
    "left": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 74,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 75,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "      max /= 10;",
      "lineIdx": 36,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "      max /= 10;",
      "lineIdx": 37,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 39,
      "from": 18,
      "to": 29
    },
    "right": {
      "line": "  int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits;",
      "lineIdx": 40,
      "from": 18,
      "to": 29
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 33,
      "to": 51
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 33,
      "to": 51
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 135,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 136,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 50,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 51,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 113,
      "from": 45,
      "to": 48
    },
    "right": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 114,
      "from": 45,
      "to": 48
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 155,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    const QRect& boundingRect = lineAndCoord.second;",
      "lineIdx": 156,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 55,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return document()->findBlockByLineNumber(line);",
      "lineIdx": 56,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 65,
      "to": 70
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 65,
      "to": 70
    }
  }, {
    "left": {
      "line": "#include <QAction>",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QAction>",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include <QTextBlock>",
      "lineIdx": 2,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include <QTextBlock>",
      "lineIdx": 2,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 64,
      "to": 70
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 64,
      "to": 70
    }
  }, {
    "left": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 78,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 79,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "#include <QAbstractTextDocumentLayout>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QAbstractTextDocumentLayout>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 96,
      "from": 24,
      "to": 29
    },
    "right": {
      "line": "    allBlocks.push_back(block);",
      "lineIdx": 97,
      "from": 24,
      "to": 29
    }
  }, {
    "left": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 71,
      "from": 36,
      "to": 42
    },
    "right": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 72,
      "from": 36,
      "to": 42
    }
  }, {
    "left": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 156,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 157,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 71,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "void CodeEditor::rightClicked(const QPoint &aPos)",
      "lineIdx": 72,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 85,
      "from": 22,
      "to": 24
    },
    "right": {
      "line": " *  Warning! no check is made if the block is belonging to this editor, be extremly careful",
      "lineIdx": 86,
      "from": 22,
      "to": 24
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 41,
      "to": 53
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 41,
      "to": 53
    }
  }, {
    "left": {
      "line": ": QTextEdit(aParent)",
      "lineIdx": 16,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": ": QTextEdit(aParent)",
      "lineIdx": 16,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 131,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 132,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 101,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 102,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 78,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  menu->addAction(setAlignmentAction);",
      "lineIdx": 79,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  while (max >= 10) {",
      "lineIdx": 35,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  while (max >= 10) {",
      "lineIdx": 36,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 53,
      "from": 41,
      "to": 46
    },
    "right": {
      "line": "QTextBlock CodeEditor::getLine(int line) const",
      "lineIdx": 54,
      "from": 41,
      "to": 46
    }
  }, {
    "left": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 111,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  const auto& visBlocks = visibleBlocks(visibleAreaLC);",
      "lineIdx": 112,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 77,
      "from": 98,
      "to": 105
    },
    "right": {
      "line": "  QActionWithPosition* setAlignmentAction = new QActionWithPosition(\"Set manual alignment\", this, lineNum);",
      "lineIdx": 78,
      "from": 98,
      "to": 105
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 35,
      "to": 51
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 35,
      "to": 51
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 144,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 145,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 124,
      "to": 125
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 124,
      "to": 125
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "#include <QScrollBar>",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QScrollBar>",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 113,
      "to": 119
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 113,
      "to": 119
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 113,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 114,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 131,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 132,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 128,
      "from": 32,
      "to": 49
    },
    "right": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 129,
      "from": 32,
      "to": 49
    }
  }, {
    "left": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 156,
      "from": 21,
      "to": 28
    },
    "right": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 157,
      "from": 21,
      "to": 28
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 49,
      "to": 52
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 49,
      "to": 52
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 47,
      "to": 52
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 47,
      "to": 52
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 92,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 93,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  setAcceptRichText(false);",
      "lineIdx": 26,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  setAcceptRichText(false);",
      "lineIdx": 27,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 128,
      "from": 50,
      "to": 56
    },
    "right": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 129,
      "from": 50,
      "to": 56
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": " */",
      "lineIdx": 86,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": " */",
      "lineIdx": 87,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 2,
      "to": 16
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 2,
      "to": 16
    }
  }, {
    "left": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 128,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  QTextCursor cursorAtTopLeft = cursorForPosition(QPoint(0, 0));",
      "lineIdx": 129,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 43,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "boost::optional<QRect> CodeEditor::getRectForLineLC(int lineNum) const",
      "lineIdx": 44,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 144,
      "from": 9,
      "to": 22
    },
    "right": {
      "line": "  return visibleBlocks(rect());",
      "lineIdx": 145,
      "from": 9,
      "to": 22
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 66,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 67,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 76,
      "from": 37,
      "to": 40
    },
    "right": {
      "line": "  //TODO make this text depending on the state",
      "lineIdx": 77,
      "from": 37,
      "to": 40
    }
  }, {
    "left": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 101,
      "from": 5,
      "to": 15
    },
    "right": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 102,
      "from": 5,
      "to": 15
    }
  }, {
    "left": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  connect(document(), SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth()));",
      "lineIdx": 21,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 159,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "                           Qt::AlignRight, number);",
      "lineIdx": 160,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 105,
      "from": 46,
      "to": 48
    },
    "right": {
      "line": "  lineNumberArea.setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));",
      "lineIdx": 106,
      "from": 46,
      "to": 48
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 22,
      "to": 27
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 22,
      "to": 27
    }
  }, {
    "left": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 74,
      "from": 30,
      "to": 47
    },
    "right": {
      "line": "  QTextCursor clickedCursor = cursorForPosition(aPos);",
      "lineIdx": 75,
      "from": 30,
      "to": 47
    }
  }, {
    "left": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 60,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);",
      "lineIdx": 61,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 23,
      "to": 49
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 23,
      "to": 49
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 142,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 143,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 32,
      "to": 39
    },
    "right": {
      "line": "CodeEditor::CodeEditor(QWidget* aParent)",
      "lineIdx": 15,
      "from": 32,
      "to": 39
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 68,
      "to": 73
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 68,
      "to": 73
    }
  }, {
    "left": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "#include \"../mix/qactionwithposition.h\"",
      "lineIdx": 10,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 24,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 25,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 142,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 143,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 121,
      "to": 122
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 121,
      "to": 122
    }
  }, {
    "left": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 151,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  painter.fillRect(theEvent->rect(), Qt::lightGray);",
      "lineIdx": 152,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 65,
      "from": 122,
      "to": 123
    },
    "right": {
      "line": "  lineNumberArea.update(0, static_cast<int>(updateRect.y()), lineNumberArea.width(), static_cast<int>(updateRect.height()));",
      "lineIdx": 66,
      "from": 122,
      "to": 123
    }
  }, {
    "left": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 157,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    painter.setPen(Qt::black);",
      "lineIdx": 158,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 138,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 139,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "#include <utility>",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <utility>",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 109,
      "from": 75,
      "to": 88
    },
    "right": {
      "line": "std::unordered_map<int, QRect> CodeEditor::getVisibleLines2LC(const QRect& visibleAreaLC) const",
      "lineIdx": 110,
      "from": 75,
      "to": 88
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 22,
      "to": 36
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 22,
      "to": 36
    }
  }, {
    "left": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 67,
      "from": 5,
      "to": 7
    },
    "right": {
      "line": "  // if (updateRect.contains(viewport()->rect()))",
      "lineIdx": 68,
      "from": 5,
      "to": 7
    }
  }, {
    "left": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 135,
      "from": 14,
      "to": 23
    },
    "right": {
      "line": "    visBlocks.push_back(block);",
      "lineIdx": 136,
      "from": 14,
      "to": 23
    }
  }, {
    "left": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 154,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    const int lineNum = lineAndCoord.first;",
      "lineIdx": 155,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 23,
      "to": 46
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 23,
      "to": 46
    }
  }, {
    "left": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 129,
      "from": 37,
      "to": 42
    },
    "right": {
      "line": "  QTextBlock block = cursorAtTopLeft.block();",
      "lineIdx": 130,
      "from": 37,
      "to": 42
    }
  }, {
    "left": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 116,
      "from": 29,
      "to": 35
    },
    "right": {
      "line": "    if (block.isVisible() && bottom >= visibleAreaLC.top()) {",
      "lineIdx": 117,
      "from": 29,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 66,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "  //this was in the original code I have no idea why",
      "lineIdx": 67,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 150,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  QPainter painter(&lineNumberArea);",
      "lineIdx": 151,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 101,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "void CodeEditor::resizeEvent(QResizeEvent *e)",
      "lineIdx": 102,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  } else {",
      "lineIdx": 48,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "  } else {",
      "lineIdx": 49,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 54,
      "to": 59
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 54,
      "to": 59
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 27,
      "to": 29
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 27,
      "to": 29
    }
  }, {
    "left": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 95,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "  for (QTextBlock block = document()->begin(); block.isValid(); block = block.next()) {",
      "lineIdx": 96,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "  vector<QTextBlock> visBlocks;",
      "lineIdx": 133,
      "from": 9,
      "to": 19
    },
    "right": {
      "line": "  vector<QTextBlock> visBlocks;",
      "lineIdx": 134,
      "from": 9,
      "to": 19
    }
  }, {
    "left": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 15,
      "to": 19
    },
    "right": {
      "line": "//code adapted from http://qt-project.org/doc/qt-4.8/widgets-codeeditor.html",
      "lineIdx": 13,
      "from": 15,
      "to": 19
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 143,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 144,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 126,
      "from": 7,
      "to": 17
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks(const QRect &visibleAreaLC) const",
      "lineIdx": 127,
      "from": 7,
      "to": 17
    }
  }, {
    "left": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 148,
      "from": 42,
      "to": 53
    },
    "right": {
      "line": "void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *theEvent)",
      "lineIdx": 149,
      "from": 42,
      "to": 53
    }
  }, {
    "left": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 24,
      "from": 37,
      "to": 43
    },
    "right": {
      "line": "  this->setWordWrapMode(QTextOption::NoWrap);",
      "lineIdx": 25,
      "from": 37,
      "to": 43
    }
  }, {
    "left": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 158,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    painter.drawText(0, boundingRect.top(), lineNumberArea.width(), fontMetrics().height(),",
      "lineIdx": 159,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 10,
      "to": 15
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 7,
      "from": 10,
      "to": 15
    }
  }, {
    "left": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 114,
      "from": 47,
      "to": 52
    },
    "right": {
      "line": "    int bottom = top + getRectForTextBlockInLC(block).height();",
      "lineIdx": 115,
      "from": 47,
      "to": 52
    }
  }, {
    "left": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 28,
      "from": 84,
      "to": 90
    },
    "right": {
      "line": "  connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(rightClicked(QPoint)));",
      "lineIdx": 29,
      "from": 84,
      "to": 90
    }
  }, {
    "left": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 34,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  int max = qMax(1, document()->blockCount());",
      "lineIdx": 35,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 80,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  connect(setAlignmentAction, SIGNAL(triggered(int)), this, SIGNAL(setManualAlignmentClicked(int)));",
      "lineIdx": 81,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 75,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 76,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 153,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "  for(const std::pair<const int, QRect>& lineAndCoord: getVisibleLines2LC(theEvent->rect())) {",
      "lineIdx": 154,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 92,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::blocks() const",
      "lineIdx": 93,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 81,
      "from": 32,
      "to": 43
    },
    "right": {
      "line": "  menu->popup(this->viewport()->mapToGlobal(aPos));",
      "lineIdx": 82,
      "from": 32,
      "to": 43
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 156,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    QString number = QString::number(lineNum + 1);",
      "lineIdx": 157,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 142,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "vector<QTextBlock> CodeEditor::visibleBlocks() const",
      "lineIdx": 143,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 131,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 132,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 110,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 111,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 38,
      "to": 50
    },
    "right": {
      "line": "  connect(verticalScrollBar(), SIGNAL(valueChanged(int)), &lineNumberArea, SLOT(update()));",
      "lineIdx": 23,
      "from": 38,
      "to": 50
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 112,
      "from": 107,
      "to": 117
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> lines2CoordsResult = toMap(flatMap(visBlocks, [this, visibleAreaLC](const QTextBlock& block) {",
      "lineIdx": 113,
      "from": 107,
      "to": 117
    }
  }, {
    "left": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 89,
      "from": 117,
      "to": 118
    },
    "right": {
      "line": "  return document()->documentLayout()->blockBoundingRect(block).translated(0, - verticalScrollBar()->value()).toRect();",
      "lineIdx": 90,
      "from": 117,
      "to": 118
    }
  }, {
    "left": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "  connect(document()->documentLayout(), SIGNAL(update(QRectF)), this, SLOT(updateLineNumberArea(QRectF)));",
      "lineIdx": 22,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 75,
      "from": 30,
      "to": 35
    },
    "right": {
      "line": "  int lineNum = clickedCursor.block().blockNumber();",
      "lineIdx": 76,
      "from": 30,
      "to": 35
    }
  }, {
    "left": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 131,
      "from": 36,
      "to": 41
    },
    "right": {
      "line": "  int top = getRectForTextBlockInLC(block).top();",
      "lineIdx": 132,
      "from": 36,
      "to": 41
    }
  }, {
    "left": {
      "line": "    block = block.next();",
      "lineIdx": 136,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "    block = block.next();",
      "lineIdx": 137,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 45,
      "from": 21,
      "to": 24
    },
    "right": {
      "line": "  std::unordered_map<int, QRect> line2LC = getVisibleLines2LC(rect());",
      "lineIdx": 46,
      "from": 21,
      "to": 24
    }
  }, {
    "left": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 117,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "      return vector<std::pair<int, QRect>>{std::make_pair(block.blockNumber(), getRectForTextBlockInLC(block))};",
      "lineIdx": 118,
      "from": 46,
      "to": 47
    }
  }]
}