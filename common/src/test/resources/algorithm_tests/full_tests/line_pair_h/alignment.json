{
  "matches": [{
    "left": {
      "line": "#define LINEPAIR_H",
      "lineIdx": 1,
      "from": 8,
      "to": 18
    },
    "right": {
      "line": "#define LINEPAIR_H",
      "lineIdx": 1,
      "from": 8,
      "to": 18
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 105,
      "to": 114
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 105,
      "to": 114
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "struct LinePair{",
      "lineIdx": 5,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "struct LinePair{",
      "lineIdx": 5,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "  const int mRightIdx;",
      "lineIdx": 7,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const int mRightIdx;",
      "lineIdx": 7,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 56,
      "to": 64
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 56,
      "to": 64
    }
  }, {
    "left": {
      "line": "class QString;",
      "lineIdx": 3,
      "from": 6,
      "to": 13
    },
    "right": {
      "line": "class QString;",
      "lineIdx": 3,
      "from": 6,
      "to": 13
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 39,
      "to": 47
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 39,
      "to": 47
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "#define LINEPAIR_H",
      "lineIdx": 1,
      "from": 1,
      "to": 7
    },
    "right": {
      "line": "#define LINEPAIR_H",
      "lineIdx": 1,
      "from": 1,
      "to": 7
    }
  }, {
    "left": {
      "line": "  const int mRightIdx;",
      "lineIdx": 7,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "  const int mRightIdx;",
      "lineIdx": 7,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 12,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 24,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#define LINEPAIR_H",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#define LINEPAIR_H",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 48,
      "to": 55
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 48,
      "to": 55
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 99,
      "to": 104
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 99,
      "to": 104
    }
  }, {
    "left": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 12,
      "from": 0,
      "to": 7
    },
    "right": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 24,
      "from": 0,
      "to": 7
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 24,
      "to": 32
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 24,
      "to": 32
    }
  }, {
    "left": {
      "line": "#endif // LINEPAIR_H",
      "lineIdx": 14,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "#endif // LINEPAIR_H",
      "lineIdx": 26,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 104,
      "to": 105
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 104,
      "to": 105
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "#endif // LINEPAIR_H",
      "lineIdx": 14,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#endif // LINEPAIR_H",
      "lineIdx": 26,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "  const int mLeftIdx;",
      "lineIdx": 6,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "  const int mLeftIdx;",
      "lineIdx": 6,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "  const int mRightIdx;",
      "lineIdx": 7,
      "from": 12,
      "to": 21
    },
    "right": {
      "line": "  const int mRightIdx;",
      "lineIdx": 7,
      "from": 12,
      "to": 21
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 86,
      "to": 95
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 86,
      "to": 95
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 34,
      "to": 39
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 34,
      "to": 39
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 68,
      "to": 76
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 68,
      "to": 76
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "#ifndef LINEPAIR_H",
      "lineIdx": 0,
      "from": 8,
      "to": 18
    },
    "right": {
      "line": "#ifndef LINEPAIR_H",
      "lineIdx": 0,
      "from": 8,
      "to": 18
    }
  }, {
    "left": {
      "line": "struct LinePair{",
      "lineIdx": 5,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "struct LinePair{",
      "lineIdx": 5,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 12,
      "from": 14,
      "to": 19
    },
    "right": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 24,
      "from": 14,
      "to": 19
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 10,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "};",
      "lineIdx": 10,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  const int mLeftIdx;",
      "lineIdx": 6,
      "from": 12,
      "to": 20
    },
    "right": {
      "line": "  const int mLeftIdx;",
      "lineIdx": 6,
      "from": 12,
      "to": 20
    }
  }, {
    "left": {
      "line": "#ifndef LINEPAIR_H",
      "lineIdx": 0,
      "from": 1,
      "to": 7
    },
    "right": {
      "line": "#ifndef LINEPAIR_H",
      "lineIdx": 0,
      "from": 1,
      "to": 7
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 49,
      "to": 55
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 49,
      "to": 55
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 12,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 24,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "struct LinePair{",
      "lineIdx": 5,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "struct LinePair{",
      "lineIdx": 5,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 41,
      "to": 46
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 41,
      "to": 46
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 24,
      "to": 27
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 24,
      "to": 27
    }
  }, {
    "left": {
      "line": "#endif // LINEPAIR_H",
      "lineIdx": 14,
      "from": 1,
      "to": 6
    },
    "right": {
      "line": "#endif // LINEPAIR_H",
      "lineIdx": 26,
      "from": 1,
      "to": 6
    }
  }, {
    "left": {
      "line": "class QString;",
      "lineIdx": 3,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "class QString;",
      "lineIdx": 3,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "#endif // LINEPAIR_H",
      "lineIdx": 14,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#endif // LINEPAIR_H",
      "lineIdx": 26,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "};",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  const int mRightIdx;",
      "lineIdx": 7,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  const int mRightIdx;",
      "lineIdx": 7,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 74,
      "to": 82
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 74,
      "to": 82
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "#endif // LINEPAIR_H",
      "lineIdx": 14,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "#endif // LINEPAIR_H",
      "lineIdx": 26,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 58,
      "to": 67
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 58,
      "to": 67
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 68,
      "to": 73
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 68,
      "to": 73
    }
  }, {
    "left": {
      "line": "  const int mLeftIdx;",
      "lineIdx": 6,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  const int mLeftIdx;",
      "lineIdx": 6,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 114,
      "to": 115
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 114,
      "to": 115
    }
  }, {
    "left": {
      "line": "  const int mLeftIdx;",
      "lineIdx": 6,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const int mLeftIdx;",
      "lineIdx": 6,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 12,
      "from": 20,
      "to": 28
    },
    "right": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 24,
      "from": 20,
      "to": 28
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 116,
      "to": 117
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 116,
      "to": 117
    }
  }, {
    "left": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 12,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 24,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "#ifndef LINEPAIR_H",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#ifndef LINEPAIR_H",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "  bool operator==(const LinePair& other) const { return mLeftIdx == other.mLeftIdx && mRightIdx == other.mRightIdx; }",
      "lineIdx": 9,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "class QString;",
      "lineIdx": 3,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "class QString;",
      "lineIdx": 3,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 12,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 24,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 12,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "QString toStr(const LinePair&);",
      "lineIdx": 24,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 15,
      "to": 22
    },
    "right": {
      "line": "  LinePair(int leftIdx, int rightIdx): mLeftIdx(leftIdx), mRightIdx(rightIdx) {}",
      "lineIdx": 8,
      "from": 15,
      "to": 22
    }
  }]
}