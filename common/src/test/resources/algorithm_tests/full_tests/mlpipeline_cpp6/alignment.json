{
  "matches": [{
    "left": {
      "line": "  });",
      "lineIdx": 121,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  });",
      "lineIdx": 134,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 81,
      "to": 88
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 81,
      "to": 88
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 38,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 47,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 30,
      "to": 38
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 30,
      "to": 38
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 27,
      "to": 43
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 27,
      "to": 43
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 111,
      "from": 9,
      "to": 19
    },
    "right": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 124,
      "from": 9,
      "to": 19
    }
  }, {
    "left": {
      "line": "          int columnIdx = 1;",
      "lineIdx": 134,
      "from": 14,
      "to": 23
    },
    "right": {
      "line": "          int columnIdx = 1;",
      "lineIdx": 147,
      "from": 14,
      "to": 23
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 172,
      "to": 184
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 172,
      "to": 184
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "  vector<LinePair> wrongs;",
      "lineIdx": 75,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  vector<LinePair> wrongs;",
      "lineIdx": 88,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 53,
      "to": 60
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 53,
      "to": 60
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 81,
      "to": 85
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 81,
      "to": 85
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "          vector<svm_node> nodes;",
      "lineIdx": 133,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "          vector<svm_node> nodes;",
      "lineIdx": 146,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 15,
      "to": 24
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 15,
      "to": 24
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 53,
      "to": 70
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 53,
      "to": 70
    }
  }, {
    "left": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 106,
      "from": 15,
      "to": 21
    },
    "right": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 119,
      "from": 15,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 136,
      "to": 144
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 136,
      "to": 144
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 18,
      "to": 25
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 18,
      "to": 25
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 38,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 47,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 77,
      "to": 81
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 77,
      "to": 81
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 42,
      "to": 52
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 42,
      "to": 52
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 130,
      "to": 135
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 130,
      "to": 135
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 133,
      "to": 134
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 133,
      "to": 134
    }
  }, {
    "left": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 46,
      "to": 54
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 46,
      "to": 54
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "  vector<FeatureRange> ranges;",
      "lineIdx": 173,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<FeatureRange> ranges;",
      "lineIdx": 186,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 126,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 139,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 31,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 40,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 109,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 122,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 53,
      "to": 61
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 53,
      "to": 61
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 13,
      "to": 22
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 13,
      "to": 22
    }
  }, {
    "left": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 128,
      "from": 14,
      "to": 21
    },
    "right": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 141,
      "from": 14,
      "to": 21
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 11,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 12,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 57,
      "to": 66
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 57,
      "to": 66
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 80,
      "to": 84
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 80,
      "to": 84
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 73,
      "to": 78
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 73,
      "to": 78
    }
  }, {
    "left": {
      "line": "            ++columnIdx;",
      "lineIdx": 138,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "            ++columnIdx;",
      "lineIdx": 151,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 132,
      "to": 133
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 132,
      "to": 133
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 112,
      "to": 116
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 112,
      "to": 116
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 13,
      "to": 16
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 13,
      "to": 16
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 172,
      "from": 18,
      "to": 22
    },
    "right": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 185,
      "from": 18,
      "to": 22
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "            double value = features.at(column);",
      "lineIdx": 136,
      "from": 36,
      "to": 38
    },
    "right": {
      "line": "            double value = features.at(column);",
      "lineIdx": 149,
      "from": 36,
      "to": 38
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "            ++columnIdx;",
      "lineIdx": 138,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "            ++columnIdx;",
      "lineIdx": 151,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  return learnedMatches - wrongs;",
      "lineIdx": 96,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  return learnedMatches - wrongs;",
      "lineIdx": 109,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 153,
      "to": 154
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 153,
      "to": 154
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 36,
      "to": 55
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 36,
      "to": 55
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 171,
      "to": 172
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 171,
      "to": 172
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 14,
      "to": 26
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 14,
      "to": 26
    }
  }, {
    "left": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 104,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 117,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": ", mSame(same)",
      "lineIdx": 21,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": ", mSame(same)",
      "lineIdx": 22,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 146,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 159,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 175,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 188,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 146,
      "from": 10,
      "to": 12
    },
    "right": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 159,
      "from": 10,
      "to": 12
    }
  }, {
    "left": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 111,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 124,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 42,
      "to": 51
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 42,
      "to": 51
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 60,
      "to": 79
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 60,
      "to": 79
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 126,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 139,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 41,
      "to": 49
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 41,
      "to": 49
    }
  }, {
    "left": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 107,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 120,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 7,
      "to": 17
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 7,
      "to": 17
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 22,
      "to": 31
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 22,
      "to": 31
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 63,
      "to": 71
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 63,
      "to": 71
    }
  }, {
    "left": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 106,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 119,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 109,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 122,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 147,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 160,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 113,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 126,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 54,
      "to": 58
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 54,
      "to": 58
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 11,
      "to": 30
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 11,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 159,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 172,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 177,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 190,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 36,
      "to": 46
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 36,
      "to": 46
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 58,
      "from": 42,
      "to": 60
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 71,
      "from": 42,
      "to": 60
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 29,
      "to": 43
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 29,
      "to": 43
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": " * Adapted from svm_scale",
      "lineIdx": 100,
      "from": 16,
      "to": 25
    },
    "right": {
      "line": " * Adapted from svm_scale",
      "lineIdx": 113,
      "from": 16,
      "to": 25
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 106,
      "to": 107
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 106,
      "to": 107
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 126,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 139,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 128,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 141,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 151,
      "to": 152
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 151,
      "to": 152
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 133,
      "to": 138
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 133,
      "to": 138
    }
  }, {
    "left": {
      "line": " */",
      "lineIdx": 101,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": " */",
      "lineIdx": 114,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 135,
      "to": 136
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 135,
      "to": 136
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 62,
      "to": 78
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 62,
      "to": 78
    }
  }, {
    "left": {
      "line": "      continue;",
      "lineIdx": 90,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "      continue;",
      "lineIdx": 103,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 82,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 95,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "          int columnIdx = 1;",
      "lineIdx": 134,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "          int columnIdx = 1;",
      "lineIdx": 147,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 177,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 190,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 13,
      "to": 25
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 13,
      "to": 25
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 124,
      "to": 133
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 124,
      "to": 133
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 155,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 168,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "            double value = features.at(column);",
      "lineIdx": 136,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "            double value = features.at(column);",
      "lineIdx": 149,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 70,
      "to": 78
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 70,
      "to": 78
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 170,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 183,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 13,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "            double value = features.at(column);",
      "lineIdx": 136,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "            double value = features.at(column);",
      "lineIdx": 149,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 33,
      "to": 43
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 33,
      "to": 43
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 14,
      "to": 19
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 14,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 113,
      "from": 24,
      "to": 29
    },
    "right": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 126,
      "from": 24,
      "to": 29
    }
  }, {
    "left": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 158,
      "from": 22,
      "to": 30
    },
    "right": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 171,
      "from": 22,
      "to": 30
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 39,
      "to": 46
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 39,
      "to": 46
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 38,
      "from": 36,
      "to": 50
    },
    "right": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 47,
      "from": 36,
      "to": 50
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 112,
      "to": 117
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 112,
      "to": 117
    }
  }, {
    "left": {
      "line": "  vector<LinePair> learnedMatches;",
      "lineIdx": 127,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "  vector<LinePair> learnedMatches;",
      "lineIdx": 140,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 64,
      "to": 76
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 64,
      "to": 76
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 85,
      "to": 93
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 85,
      "to": 93
    }
  }, {
    "left": {
      "line": "  vector<LinePair> learnedMatches;",
      "lineIdx": 127,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<LinePair> learnedMatches;",
      "lineIdx": 140,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 26,
      "to": 35
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 26,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 14,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 15,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 13,
      "to": 22
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 13,
      "to": 22
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 90,
      "to": 98
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 90,
      "to": 98
    }
  }, {
    "left": {
      "line": "    (value-featureMin)/",
      "lineIdx": 114,
      "from": 5,
      "to": 10
    },
    "right": {
      "line": "    (value-featureMin)/",
      "lineIdx": 127,
      "from": 5,
      "to": 10
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 147,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 160,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 56,
      "to": 63
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 56,
      "to": 63
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 69,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 82,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "          int columnIdx = 1;",
      "lineIdx": 134,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "          int columnIdx = 1;",
      "lineIdx": 147,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 37,
      "to": 46
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 37,
      "to": 46
    }
  }, {
    "left": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 113,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 126,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 77,
      "to": 81
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 77,
      "to": 81
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 47,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 56,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 158,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 171,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 139,
      "to": 148
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 139,
      "to": 148
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 78,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 91,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 105,
      "to": 106
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 105,
      "to": 106
    }
  }, {
    "left": {
      "line": "    (value-featureMin)/",
      "lineIdx": 114,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    (value-featureMin)/",
      "lineIdx": 127,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 32,
      "to": 40
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 32,
      "to": 40
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 177,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 190,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 47,
      "to": 49
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 47,
      "to": 49
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 181,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 194,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": ": mFeatures(features)",
      "lineIdx": 20,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": ": mFeatures(features)",
      "lineIdx": 21,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 14,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 15,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 75,
      "to": 79
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 75,
      "to": 79
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 37,
      "to": 56
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 37,
      "to": 56
    }
  }, {
    "left": {
      "line": "    (featureMax-featureMin);",
      "lineIdx": 115,
      "from": 5,
      "to": 15
    },
    "right": {
      "line": "    (featureMax-featureMin);",
      "lineIdx": 128,
      "from": 5,
      "to": 15
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 38,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 47,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 66,
      "to": 72
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 66,
      "to": 72
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 146,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 159,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 47,
      "to": 59
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 47,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 11,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 12,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  return features;",
      "lineIdx": 50,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return features;",
      "lineIdx": 63,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 181,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 194,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 14,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 15,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "          vector<svm_node> nodes;",
      "lineIdx": 133,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "          vector<svm_node> nodes;",
      "lineIdx": 146,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 20,
      "to": 23
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 20,
      "to": 23
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 30,
      "to": 46
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 30,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 13,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 176,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 189,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 34,
      "to": 36
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 34,
      "to": 36
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 119,
      "to": 128
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 119,
      "to": 128
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 160,
      "to": 169
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 160,
      "to": 169
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 65,
      "to": 67
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 65,
      "to": 67
    }
  }, {
    "left": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 104,
      "from": 22,
      "to": 27
    },
    "right": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 117,
      "from": 22,
      "to": 27
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 26,
      "to": 33
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 26,
      "to": 33
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 91,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 104,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 17,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 18,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 105,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 118,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 62,
      "to": 70
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 62,
      "to": 70
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 51,
      "to": 55
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 51,
      "to": 55
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 23,
      "to": 35
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 23,
      "to": 35
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 126,
      "from": 2,
      "to": 19
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 139,
      "from": 2,
      "to": 19
    }
  }, {
    "left": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 146,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 159,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "            double value = features.at(column);",
      "lineIdx": 136,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "            double value = features.at(column);",
      "lineIdx": 149,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 78,
      "to": 83
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 78,
      "to": 83
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  return ranges;",
      "lineIdx": 182,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  return ranges;",
      "lineIdx": 195,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 170,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 183,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 49,
      "to": 51
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 49,
      "to": 51
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 17,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 18,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "      continue;",
      "lineIdx": 90,
      "from": 6,
      "to": 14
    },
    "right": {
      "line": "      continue;",
      "lineIdx": 103,
      "from": 6,
      "to": 14
    }
  }, {
    "left": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 158,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 171,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 137,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 150,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 152,
      "to": 153
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 152,
      "to": 153
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 111,
      "from": 22,
      "to": 32
    },
    "right": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 124,
      "from": 22,
      "to": 32
    }
  }, {
    "left": {
      "line": ": mFeatures(features)",
      "lineIdx": 20,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": ": mFeatures(features)",
      "lineIdx": 21,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 126,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 139,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 78,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 91,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 177,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 190,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "  vector<FeatureRange> ranges;",
      "lineIdx": 173,
      "from": 9,
      "to": 21
    },
    "right": {
      "line": "  vector<FeatureRange> ranges;",
      "lineIdx": 186,
      "from": 9,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 176,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 189,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": ", mSame(same)",
      "lineIdx": 21,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": ", mSame(same)",
      "lineIdx": 22,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    (featureMax-featureMin);",
      "lineIdx": 115,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    (featureMax-featureMin);",
      "lineIdx": 128,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "  vector<MLSample> result;",
      "lineIdx": 59,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<MLSample> result;",
      "lineIdx": 72,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 147,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 160,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 123,
      "to": 124
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 123,
      "to": 124
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 36,
      "to": 51
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 36,
      "to": 51
    }
  }, {
    "left": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 38,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 47,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 58,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 71,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 97,
      "to": 102
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 97,
      "to": 102
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 62,
      "to": 70
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 62,
      "to": 70
    }
  }, {
    "left": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 53,
      "from": 53,
      "to": 72
    },
    "right": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 66,
      "from": 53,
      "to": 72
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 44,
      "to": 52
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 44,
      "to": 52
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 17,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 18,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 98,
      "to": 105
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 98,
      "to": 105
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 45,
      "to": 51
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 45,
      "to": 51
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 25,
      "to": 31
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 25,
      "to": 31
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 47,
      "from": 35,
      "to": 39
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 56,
      "from": 35,
      "to": 39
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 72,
      "to": 77
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 72,
      "to": 77
    }
  }, {
    "left": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 174,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 187,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 174,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 187,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 77,
      "from": 31,
      "to": 40
    },
    "right": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 90,
      "from": 31,
      "to": 40
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 149,
      "to": 150
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 149,
      "to": 150
    }
  }, {
    "left": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 169,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 182,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 38,
      "to": 54
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 38,
      "to": 54
    }
  }, {
    "left": {
      "line": "            double value = features.at(column);",
      "lineIdx": 136,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "            double value = features.at(column);",
      "lineIdx": 149,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 137,
      "from": 48,
      "to": 53
    },
    "right": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 150,
      "from": 48,
      "to": 53
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 14,
      "to": 22
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 14,
      "to": 22
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 172,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 185,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 158,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 171,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 170,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 183,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 141,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 154,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 53,
      "to": 70
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 53,
      "to": 70
    }
  }, {
    "left": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 141,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 154,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 85,
      "to": 97
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 85,
      "to": 97
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": " * Adapted from svm_scale",
      "lineIdx": 100,
      "from": 3,
      "to": 10
    },
    "right": {
      "line": " * Adapted from svm_scale",
      "lineIdx": 113,
      "from": 3,
      "to": 10
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 78,
      "to": 83
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 78,
      "to": 83
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 114,
      "to": 119
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 114,
      "to": 119
    }
  }, {
    "left": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 14,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 15,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 110,
      "to": 111
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 110,
      "to": 111
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 47,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 56,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 0,
      "to": 17
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 0,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 17,
      "to": 23
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 17,
      "to": 23
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 147,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 160,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 19,
      "to": 34
    },
    "right": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 19,
      "to": 34
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 58,
      "to": 63
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 58,
      "to": 63
    }
  }, {
    "left": {
      "line": "  svm_free_and_destroy_model(&ptr);",
      "lineIdx": 160,
      "from": 2,
      "to": 28
    },
    "right": {
      "line": "  svm_free_and_destroy_model(&ptr);",
      "lineIdx": 173,
      "from": 2,
      "to": 28
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 31,
      "to": 45
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 31,
      "to": 45
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 40,
      "to": 45
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 40,
      "to": 45
    }
  }, {
    "left": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 76,
      "to": 81
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 76,
      "to": 81
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 48,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 57,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 92,
      "to": 99
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 92,
      "to": 99
    }
  }, {
    "left": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 146,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 159,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include <QFile>",
      "lineIdx": 15,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QFile>",
      "lineIdx": 16,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "            double value = features.at(column);",
      "lineIdx": 136,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "            double value = features.at(column);",
      "lineIdx": 149,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 53,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 66,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 13,
      "to": 22
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 13,
      "to": 22
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 56,
      "to": 58
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 56,
      "to": 58
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 58,
      "from": 20,
      "to": 39
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 71,
      "from": 20,
      "to": 39
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 128,
      "to": 129
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 128,
      "to": 129
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 48,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 57,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  return learnedMatches - wrongs;",
      "lineIdx": 96,
      "from": 9,
      "to": 23
    },
    "right": {
      "line": "  return learnedMatches - wrongs;",
      "lineIdx": 109,
      "from": 9,
      "to": 23
    }
  }, {
    "left": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 128,
      "from": 2,
      "to": 4
    },
    "right": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 141,
      "from": 2,
      "to": 4
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 176,
      "from": 16,
      "to": 22
    },
    "right": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 189,
      "from": 16,
      "to": 22
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 47,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 56,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 48,
      "from": 4,
      "to": 24
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 57,
      "from": 4,
      "to": 24
    }
  }, {
    "left": {
      "line": "  vector<LinePair> wrongs;",
      "lineIdx": 75,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<LinePair> wrongs;",
      "lineIdx": 88,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 177,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 190,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 44,
      "to": 51
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 44,
      "to": 51
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 15,
      "to": 28
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 15,
      "to": 28
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 60,
      "to": 74
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 60,
      "to": 74
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 36,
      "to": 55
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 36,
      "to": 55
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 17,
      "to": 22
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 25,
      "to": 34
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 25,
      "to": 34
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 57,
      "to": 62
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 57,
      "to": 62
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 35,
      "to": 40
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 35,
      "to": 40
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  QFile file(path);",
      "lineIdx": 168,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  QFile file(path);",
      "lineIdx": 181,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 92,
      "to": 108
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 92,
      "to": 108
    }
  }, {
    "left": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 104,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 117,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "    (value-featureMin)/",
      "lineIdx": 114,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    (value-featureMin)/",
      "lineIdx": 127,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  vector<LinePair> wrongs;",
      "lineIdx": 75,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  vector<LinePair> wrongs;",
      "lineIdx": 88,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 35,
      "to": 39
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 35,
      "to": 39
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 56,
      "to": 64
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 56,
      "to": 64
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 2,
      "to": 15
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 2,
      "to": 15
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 89,
      "from": 13,
      "to": 22
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 102,
      "from": 13,
      "to": 22
    }
  }, {
    "left": {
      "line": "#include <QFile>",
      "lineIdx": 15,
      "from": 10,
      "to": 15
    },
    "right": {
      "line": "#include <QFile>",
      "lineIdx": 16,
      "from": 10,
      "to": 15
    }
  }, {
    "left": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 170,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 183,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 175,
      "from": 19,
      "to": 21
    },
    "right": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 188,
      "from": 19,
      "to": 21
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 122,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 135,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 78,
      "to": 84
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 78,
      "to": 84
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 11,
      "from": 14,
      "to": 27
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 12,
      "from": 14,
      "to": 27
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 141,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 154,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 138,
      "to": 139
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 138,
      "to": 139
    }
  }, {
    "left": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 177,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 190,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 158,
      "from": 44,
      "to": 47
    },
    "right": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 171,
      "from": 44,
      "to": 47
    }
  }, {
    "left": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 169,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 182,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 63,
      "to": 70
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 63,
      "to": 70
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 48,
      "to": 52
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 48,
      "to": 52
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 38,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 47,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 111,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 124,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 44,
      "to": 49
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 44,
      "to": 49
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "          int columnIdx = 1;",
      "lineIdx": 134,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "          int columnIdx = 1;",
      "lineIdx": 147,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 172,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 185,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 59,
      "to": 67
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 59,
      "to": 67
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 159,
      "to": 164
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 159,
      "to": 164
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 97,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 110,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 72,
      "to": 75
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 72,
      "to": 75
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 74,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 87,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 13,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 53,
      "to": 70
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 53,
      "to": 70
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 12,
      "to": 19
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 12,
      "to": 19
    }
  }, {
    "left": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": ": mFeatures(features)",
      "lineIdx": 20,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": ": mFeatures(features)",
      "lineIdx": 21,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "            double value = features.at(column);",
      "lineIdx": 136,
      "from": 39,
      "to": 45
    },
    "right": {
      "line": "            double value = features.at(column);",
      "lineIdx": 149,
      "from": 39,
      "to": 45
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 100,
      "to": 111
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 100,
      "to": 111
    }
  }, {
    "left": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 176,
      "from": 4,
      "to": 15
    },
    "right": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 189,
      "from": 4,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 12,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 13,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 54,
      "to": 60
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 54,
      "to": 60
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 76,
      "to": 79
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 76,
      "to": 79
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 169,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 182,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 82,
      "to": 86
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 82,
      "to": 86
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 25,
      "to": 33
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 25,
      "to": 33
    }
  }, {
    "left": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 105,
      "from": 15,
      "to": 21
    },
    "right": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 118,
      "from": 15,
      "to": 21
    }
  }, {
    "left": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 111,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 124,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 78,
      "to": 97
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 78,
      "to": 97
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 158,
      "from": 33,
      "to": 42
    },
    "right": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 171,
      "from": 33,
      "to": 42
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 65,
      "to": 72
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 65,
      "to": 72
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 76,
      "to": 90
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 76,
      "to": 90
    }
  }, {
    "left": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 31,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 40,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  return features;",
      "lineIdx": 50,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "  return features;",
      "lineIdx": 63,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": " */",
      "lineIdx": 101,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": " */",
      "lineIdx": 114,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 19,
      "to": 33
    },
    "right": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 19,
      "to": 33
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 12,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 13,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 176,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 189,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 170,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 183,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 129,
      "to": 130
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 129,
      "to": 130
    }
  }, {
    "left": {
      "line": "  vector<LinePair> learnedMatches;",
      "lineIdx": 127,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  vector<LinePair> learnedMatches;",
      "lineIdx": 140,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 36,
      "to": 51
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 36,
      "to": 51
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "          vector<svm_node> nodes;",
      "lineIdx": 133,
      "from": 27,
      "to": 32
    },
    "right": {
      "line": "          vector<svm_node> nodes;",
      "lineIdx": 146,
      "from": 27,
      "to": 32
    }
  }, {
    "left": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 137,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 150,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 19,
      "to": 38
    },
    "right": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 19,
      "to": 38
    }
  }, {
    "left": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 176,
      "from": 30,
      "to": 35
    },
    "right": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 189,
      "from": 30,
      "to": 35
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 12,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 13,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include <QFile>",
      "lineIdx": 15,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QFile>",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 46,
      "to": 50
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 46,
      "to": 50
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 174,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 187,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 29,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 30,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 35,
      "to": 40
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 35,
      "to": 40
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 109,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 122,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 48,
      "from": 25,
      "to": 33
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 57,
      "from": 25,
      "to": 33
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 146,
      "from": 13,
      "to": 19
    },
    "right": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 159,
      "from": 13,
      "to": 19
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 77,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 90,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 176,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 189,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "          vector<svm_node> nodes;",
      "lineIdx": 133,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "          vector<svm_node> nodes;",
      "lineIdx": 146,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 17,
      "from": 14,
      "to": 20
    },
    "right": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 18,
      "from": 14,
      "to": 20
    }
  }, {
    "left": {
      "line": " * Adapted from svm_scale",
      "lineIdx": 100,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": " * Adapted from svm_scale",
      "lineIdx": 113,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 41,
      "to": 49
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 41,
      "to": 49
    }
  }, {
    "left": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 146,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 159,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 76,
      "to": 79
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 76,
      "to": 79
    }
  }, {
    "left": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 109,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 122,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "      }",
      "lineIdx": 150,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "      }",
      "lineIdx": 163,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 94,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 107,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 106,
      "to": 122
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 106,
      "to": 122
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 40,
      "to": 45
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 40,
      "to": 45
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 76,
      "to": 79
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 76,
      "to": 79
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 83,
      "to": 85
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 83,
      "to": 85
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 37,
      "to": 40
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 37,
      "to": 40
    }
  }, {
    "left": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 158,
      "from": 5,
      "to": 20
    },
    "right": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 171,
      "from": 5,
      "to": 20
    }
  }, {
    "left": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 33,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 42,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  svm_free_and_destroy_model(&ptr);",
      "lineIdx": 160,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  svm_free_and_destroy_model(&ptr);",
      "lineIdx": 173,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 85,
      "to": 91
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 85,
      "to": 91
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 111,
      "to": 112
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 111,
      "to": 112
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 121,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  });",
      "lineIdx": 134,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 64,
      "to": 72
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 64,
      "to": 72
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 98,
      "to": 103
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 98,
      "to": 103
    }
  }, {
    "left": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 170,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 183,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 58,
      "from": 62,
      "to": 69
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 71,
      "from": 62,
      "to": 69
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 121,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  });",
      "lineIdx": 134,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 158,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 171,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 53,
      "to": 64
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 53,
      "to": 64
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 68,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 81,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 105,
      "from": 22,
      "to": 27
    },
    "right": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 118,
      "from": 22,
      "to": 27
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 31,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 40,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 122,
      "to": 123
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 122,
      "to": 123
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 57,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 70,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 48,
      "to": 56
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 48,
      "to": 56
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "    (featureMax-featureMin);",
      "lineIdx": 115,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    (featureMax-featureMin);",
      "lineIdx": 128,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 93,
      "to": 98
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 93,
      "to": 98
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 27,
      "to": 34
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 27,
      "to": 34
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 81,
      "to": 83
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 81,
      "to": 83
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 50,
      "to": 57
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 50,
      "to": 57
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 11,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 12,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 41,
      "to": 47
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 41,
      "to": 47
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 120,
      "to": 121
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 120,
      "to": 121
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 77,
      "to": 81
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 77,
      "to": 81
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 8,
      "to": 10
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 8,
      "to": 10
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 21,
      "to": 29
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 21,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 33,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 42,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 17,
      "to": 27
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 17,
      "to": 27
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 169,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 182,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 185,
      "to": 186
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 185,
      "to": 186
    }
  }, {
    "left": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "#include <QTextStream>",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QTextStream>",
      "lineIdx": 17,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 12,
      "to": 16
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 12,
      "to": 16
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 117,
      "to": 118
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 117,
      "to": 118
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 47,
      "from": 4,
      "to": 24
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 56,
      "from": 4,
      "to": 24
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 79,
      "to": 88
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 79,
      "to": 88
    }
  }, {
    "left": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 36,
      "to": 41
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 36,
      "to": 41
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 7,
      "to": 16
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 7,
      "to": 16
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 119,
      "to": 120
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 119,
      "to": 120
    }
  }, {
    "left": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 57,
      "to": 62
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 57,
      "to": 62
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 59,
      "to": 63
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 59,
      "to": 63
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 109,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 122,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  vector<FeatureRange> ranges;",
      "lineIdx": 173,
      "from": 23,
      "to": 29
    },
    "right": {
      "line": "  vector<FeatureRange> ranges;",
      "lineIdx": 186,
      "from": 23,
      "to": 29
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 58,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 71,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 76,
      "to": 79
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 76,
      "to": 79
    }
  }, {
    "left": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 158,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 171,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 58,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 71,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 151,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 164,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 14,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 15,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 13,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 172,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 185,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 106,
      "from": 22,
      "to": 29
    },
    "right": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 119,
      "from": 22,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": " * Adapted from svm_scale",
      "lineIdx": 100,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": " * Adapted from svm_scale",
      "lineIdx": 113,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 137,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 150,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 126,
      "from": 70,
      "to": 78
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 139,
      "from": 70,
      "to": 78
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 2,
      "to": 4
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 2,
      "to": 4
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 36,
      "to": 51
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 36,
      "to": 51
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 107,
      "to": 108
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 107,
      "to": 108
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 180,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 193,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 141,
      "from": 52,
      "to": 57
    },
    "right": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 154,
      "from": 52,
      "to": 57
    }
  }, {
    "left": {
      "line": "    (featureMax-featureMin);",
      "lineIdx": 115,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    (featureMax-featureMin);",
      "lineIdx": 128,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 53,
      "to": 61
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 53,
      "to": 61
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 122,
      "to": 138
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 122,
      "to": 138
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 181,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 194,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 150,
      "to": 151
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 150,
      "to": 151
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 172,
      "from": 14,
      "to": 16
    },
    "right": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 185,
      "from": 14,
      "to": 16
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 115,
      "to": 116
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 115,
      "to": 116
    }
  }, {
    "left": {
      "line": ", mSame(same)",
      "lineIdx": 21,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": ", mSame(same)",
      "lineIdx": 22,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "  return learnedMatches - wrongs;",
      "lineIdx": 96,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return learnedMatches - wrongs;",
      "lineIdx": 109,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 174,
      "from": 9,
      "to": 11
    },
    "right": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 187,
      "from": 9,
      "to": 11
    }
  }, {
    "left": {
      "line": "      continue;",
      "lineIdx": 83,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "      continue;",
      "lineIdx": 96,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 176,
      "from": 25,
      "to": 29
    },
    "right": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 189,
      "from": 25,
      "to": 29
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 50,
      "to": 61
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 50,
      "to": 61
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 7,
      "to": 19
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 7,
      "to": 19
    }
  }, {
    "left": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 147,
      "from": 27,
      "to": 36
    },
    "right": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 160,
      "from": 27,
      "to": 36
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 22,
      "to": 24
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 22,
      "to": 24
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 9,
      "to": 28
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 9,
      "to": 28
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 28,
      "to": 38
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 28,
      "to": 38
    }
  }, {
    "left": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 141,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 154,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 57,
      "to": 74
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 57,
      "to": 74
    }
  }, {
    "left": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 141,
      "from": 41,
      "to": 51
    },
    "right": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 154,
      "from": 41,
      "to": 51
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  QFile file(path);",
      "lineIdx": 168,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  QFile file(path);",
      "lineIdx": 181,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 175,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 188,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 100,
      "to": 106
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 100,
      "to": 106
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 48,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 57,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 175,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 188,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 44,
      "to": 47
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 44,
      "to": 47
    }
  }, {
    "left": {
      "line": "  vector<MLSample> result;",
      "lineIdx": 59,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<MLSample> result;",
      "lineIdx": 72,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  vector<FeatureRange> ranges;",
      "lineIdx": 173,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<FeatureRange> ranges;",
      "lineIdx": 186,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 106,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 119,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 77,
      "to": 79
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 77,
      "to": 79
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 133,
      "to": 138
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 133,
      "to": 138
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 109,
      "to": 117
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 109,
      "to": 117
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 89,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 102,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 105,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 118,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 17,
      "to": 23
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 17,
      "to": 23
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 57,
      "to": 64
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 57,
      "to": 64
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 25,
      "to": 32
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 25,
      "to": 32
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 128,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 141,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 106,
      "to": 107
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 106,
      "to": 107
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 105,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 118,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 18,
      "to": 26
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 18,
      "to": 26
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 10,
      "to": 21
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 10,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 104,
      "to": 120
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 104,
      "to": 120
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 85,
      "to": 93
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 85,
      "to": 93
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 82,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 95,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 23,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 24,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 175,
      "from": 4,
      "to": 11
    },
    "right": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 188,
      "from": 4,
      "to": 11
    }
  }, {
    "left": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 31,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 40,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 25,
      "to": 28
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 25,
      "to": 28
    }
  }, {
    "left": {
      "line": "            double value = features.at(column);",
      "lineIdx": 136,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "            double value = features.at(column);",
      "lineIdx": 149,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 36,
      "to": 51
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 36,
      "to": 51
    }
  }, {
    "left": {
      "line": "  vector<LinePair> wrongs;",
      "lineIdx": 75,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<LinePair> wrongs;",
      "lineIdx": 88,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 46,
      "to": 54
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 46,
      "to": 54
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "      }",
      "lineIdx": 65,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "      }",
      "lineIdx": 78,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 181,
      "from": 16,
      "to": 20
    },
    "right": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 194,
      "from": 16,
      "to": 20
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 53,
      "to": 58
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 53,
      "to": 58
    }
  }, {
    "left": {
      "line": "  svm_free_and_destroy_model(&ptr);",
      "lineIdx": 160,
      "from": 30,
      "to": 33
    },
    "right": {
      "line": "  svm_free_and_destroy_model(&ptr);",
      "lineIdx": 173,
      "from": 30,
      "to": 33
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 52,
      "to": 55
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 52,
      "to": 55
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 82,
      "from": 13,
      "to": 22
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 95,
      "from": 13,
      "to": 22
    }
  }, {
    "left": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 31,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 40,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 13,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 174,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 187,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 117,
      "to": 118
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 117,
      "to": 118
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 177,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 190,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 30,
      "to": 43
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 30,
      "to": 43
    }
  }, {
    "left": {
      "line": "          int columnIdx = 1;",
      "lineIdx": 134,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "          int columnIdx = 1;",
      "lineIdx": 147,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 43,
      "to": 46
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 43,
      "to": 46
    }
  }, {
    "left": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 128,
      "from": 5,
      "to": 10
    },
    "right": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 141,
      "from": 5,
      "to": 10
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 87,
      "to": 94
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 87,
      "to": 94
    }
  }, {
    "left": {
      "line": ", mSame(same)",
      "lineIdx": 21,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": ", mSame(same)",
      "lineIdx": 22,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 47,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 56,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 65,
      "to": 73
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 65,
      "to": 73
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 110,
      "to": 111
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 110,
      "to": 111
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 48,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 57,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 35,
      "to": 54
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 35,
      "to": 54
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 151,
      "to": 152
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 151,
      "to": 152
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 78,
      "to": 85
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 78,
      "to": 85
    }
  }, {
    "left": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 31,
      "from": 18,
      "to": 25
    },
    "right": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 40,
      "from": 18,
      "to": 25
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 184,
      "to": 185
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 184,
      "to": 185
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 77,
      "to": 79
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 77,
      "to": 79
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "  vector<MLSample> result;",
      "lineIdx": 59,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  vector<MLSample> result;",
      "lineIdx": 72,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 169,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 182,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 158,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 171,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 16,
      "to": 21
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 16,
      "to": 21
    }
  }, {
    "left": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 107,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 120,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 179,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 192,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 137,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 150,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 48,
      "to": 58
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 48,
      "to": 58
    }
  }, {
    "left": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 53,
      "from": 23,
      "to": 33
    },
    "right": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 66,
      "from": 23,
      "to": 33
    }
  }, {
    "left": {
      "line": "/*",
      "lineIdx": 99,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "/*",
      "lineIdx": 112,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 77,
      "to": 93
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 77,
      "to": 93
    }
  }, {
    "left": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 147,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 160,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 100,
      "to": 105
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 100,
      "to": 105
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 104,
      "to": 105
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 104,
      "to": 105
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 29,
      "to": 38
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 29,
      "to": 38
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 77,
      "to": 81
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 77,
      "to": 81
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 48,
      "to": 56
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 48,
      "to": 56
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 106,
      "to": 107
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 106,
      "to": 107
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 193,
      "to": 194
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 193,
      "to": 194
    }
  }, {
    "left": {
      "line": "            ++columnIdx;",
      "lineIdx": 138,
      "from": 14,
      "to": 23
    },
    "right": {
      "line": "            ++columnIdx;",
      "lineIdx": 151,
      "from": 14,
      "to": 23
    }
  }, {
    "left": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 31,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 40,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 95,
      "to": 99
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 95,
      "to": 99
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 104,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 117,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 147,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 160,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 51,
      "to": 56
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 51,
      "to": 56
    }
  }, {
    "left": {
      "line": "  vector<LinePair> learnedMatches;",
      "lineIdx": 127,
      "from": 19,
      "to": 33
    },
    "right": {
      "line": "  vector<LinePair> learnedMatches;",
      "lineIdx": 140,
      "from": 19,
      "to": 33
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 20,
      "to": 27
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 20,
      "to": 27
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 27,
      "to": 34
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 27,
      "to": 34
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 43,
      "to": 48
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 43,
      "to": 48
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 53,
      "to": 70
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 53,
      "to": 70
    }
  }, {
    "left": {
      "line": "          }",
      "lineIdx": 148,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "          }",
      "lineIdx": 161,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 13,
      "to": 16
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 13,
      "to": 16
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 111,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 124,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 47,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 56,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 31,
      "from": 7,
      "to": 17
    },
    "right": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 40,
      "from": 7,
      "to": 17
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 59,
      "to": 67
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 59,
      "to": 67
    }
  }, {
    "left": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 172,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 185,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 146,
      "to": 151
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 146,
      "to": 151
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 26
    },
    "right": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 26
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 121,
      "to": 122
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 121,
      "to": 122
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "  svm_free_and_destroy_model(&ptr);",
      "lineIdx": 160,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  svm_free_and_destroy_model(&ptr);",
      "lineIdx": 173,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 174,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 187,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 20,
      "to": 36
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 20,
      "to": 36
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 116,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 129,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 78,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 91,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 113,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 126,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 50,
      "to": 57
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 50,
      "to": 57
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 16,
      "to": 19
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 16,
      "to": 19
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 81,
      "to": 83
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 81,
      "to": 83
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 15,
      "to": 21
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 15,
      "to": 21
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 44,
      "to": 59
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 44,
      "to": 59
    }
  }, {
    "left": {
      "line": "  QFile file(path);",
      "lineIdx": 168,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "  QFile file(path);",
      "lineIdx": 181,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 33,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 42,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 38,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 47,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 126,
      "from": 20,
      "to": 39
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 139,
      "from": 20,
      "to": 39
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 85,
      "to": 90
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 85,
      "to": 90
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 35,
      "to": 39
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 35,
      "to": 39
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 13,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 21,
      "to": 24
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 21,
      "to": 24
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 40,
      "to": 44
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 40,
      "to": 44
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 6,
      "to": 8
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 6,
      "to": 8
    }
  }, {
    "left": {
      "line": "  svm_free_and_destroy_model(&ptr);",
      "lineIdx": 160,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  svm_free_and_destroy_model(&ptr);",
      "lineIdx": 173,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 14,
      "to": 22
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 14,
      "to": 22
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 11,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 12,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 139,
      "to": 145
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 139,
      "to": 145
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 22,
      "to": 27
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 22,
      "to": 27
    }
  }, {
    "left": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 78,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 91,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 39,
      "to": 58
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 39,
      "to": 58
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 57,
      "to": 74
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 57,
      "to": 74
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 4,
      "to": 12
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 4,
      "to": 12
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 107,
      "from": 5,
      "to": 9
    },
    "right": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 120,
      "from": 5,
      "to": 9
    }
  }, {
    "left": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 147,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 160,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 128,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 141,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 78,
      "to": 86
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 78,
      "to": 86
    }
  }, {
    "left": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 106,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 119,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 78,
      "from": 29,
      "to": 43
    },
    "right": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 91,
      "from": 29,
      "to": 43
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 137,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 150,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 181,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 194,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 187,
      "to": 193
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 187,
      "to": 193
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 146,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 159,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "#include <QTextStream>",
      "lineIdx": 16,
      "from": 10,
      "to": 21
    },
    "right": {
      "line": "#include <QTextStream>",
      "lineIdx": 17,
      "from": 10,
      "to": 21
    }
  }, {
    "left": {
      "line": "            double value = features.at(column);",
      "lineIdx": 136,
      "from": 12,
      "to": 18
    },
    "right": {
      "line": "            double value = features.at(column);",
      "lineIdx": 149,
      "from": 12,
      "to": 18
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 13,
      "to": 17
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 13,
      "to": 17
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 46,
      "to": 52
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 46,
      "to": 52
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 81,
      "to": 85
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 81,
      "to": 85
    }
  }, {
    "left": {
      "line": "  vector<LinePair> wrongs;",
      "lineIdx": 75,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "  vector<LinePair> wrongs;",
      "lineIdx": 88,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 52,
      "to": 57
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 52,
      "to": 57
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 29,
      "to": 56
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 29,
      "to": 56
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 67,
      "to": 82
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 67,
      "to": 82
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 36,
      "to": 55
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 36,
      "to": 55
    }
  }, {
    "left": {
      "line": ": mFeatures(features)",
      "lineIdx": 20,
      "from": 12,
      "to": 20
    },
    "right": {
      "line": ": mFeatures(features)",
      "lineIdx": 21,
      "from": 12,
      "to": 20
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 12,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 13,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 146,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 159,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 47,
      "to": 50
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 47,
      "to": 50
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 125,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 138,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 13,
      "to": 19
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 13,
      "to": 19
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 35,
      "to": 39
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 35,
      "to": 39
    }
  }, {
    "left": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 177,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 190,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 126,
      "from": 80,
      "to": 89
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 139,
      "from": 80,
      "to": 89
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 35,
      "to": 39
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 35,
      "to": 39
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 122,
      "to": 127
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 122,
      "to": 127
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  vector<FeatureRange> ranges;",
      "lineIdx": 173,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  vector<FeatureRange> ranges;",
      "lineIdx": 186,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 49,
      "to": 55
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 49,
      "to": 55
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 128,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 141,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 23,
      "to": 31
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 23,
      "to": 31
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 72,
      "to": 75
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 72,
      "to": 75
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 26,
      "to": 37
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 26,
      "to": 37
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 73,
      "to": 78
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 73,
      "to": 78
    }
  }, {
    "left": {
      "line": "  svm_free_and_destroy_model(&ptr);",
      "lineIdx": 160,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  svm_free_and_destroy_model(&ptr);",
      "lineIdx": 173,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "        }",
      "lineIdx": 149,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "        }",
      "lineIdx": 162,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 144,
      "to": 145
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 144,
      "to": 145
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 7,
      "to": 11
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 7,
      "to": 11
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    (value-featureMin)/",
      "lineIdx": 114,
      "from": 11,
      "to": 21
    },
    "right": {
      "line": "    (value-featureMin)/",
      "lineIdx": 127,
      "from": 11,
      "to": 21
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 34,
      "to": 43
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 34,
      "to": 43
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 147,
      "from": 37,
      "to": 45
    },
    "right": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 160,
      "from": 37,
      "to": 45
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 69,
      "to": 73
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 69,
      "to": 73
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 32,
      "to": 40
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 32,
      "to": 40
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 58,
      "to": 64
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 58,
      "to": 64
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 175,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 188,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  return features;",
      "lineIdx": 50,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  return features;",
      "lineIdx": 63,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "          }",
      "lineIdx": 139,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "          }",
      "lineIdx": 152,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 17,
      "from": 22,
      "to": 32
    },
    "right": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 18,
      "from": 22,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 62,
      "to": 70
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 62,
      "to": 70
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 23,
      "to": 29
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 23,
      "to": 29
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 8,
      "to": 14
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 8,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 12,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 13,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 43,
      "to": 48
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 43,
      "to": 48
    }
  }, {
    "left": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "  QFile file(path);",
      "lineIdx": 168,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  QFile file(path);",
      "lineIdx": 181,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 174,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 187,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include <QTextStream>",
      "lineIdx": 16,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include <QTextStream>",
      "lineIdx": 17,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 145,
      "to": 146
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 145,
      "to": 146
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 65,
      "to": 71
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 65,
      "to": 71
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 77,
      "from": 21,
      "to": 29
    },
    "right": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 90,
      "from": 21,
      "to": 29
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 104,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 117,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 112,
      "to": 113
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 112,
      "to": 113
    }
  }, {
    "left": {
      "line": "  vector<LinePair> wrongs;",
      "lineIdx": 75,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "  vector<LinePair> wrongs;",
      "lineIdx": 88,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 47,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 56,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 79,
      "to": 82
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 79,
      "to": 82
    }
  }, {
    "left": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 53,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 66,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 11,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 12,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 109,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 122,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 11,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 12,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 81,
      "to": 83
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 81,
      "to": 83
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 146,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 159,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 104,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 117,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 92,
      "to": 100
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 92,
      "to": 100
    }
  }, {
    "left": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 14,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 15,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 68,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 81,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "  return learnedMatches - wrongs;",
      "lineIdx": 96,
      "from": 26,
      "to": 32
    },
    "right": {
      "line": "  return learnedMatches - wrongs;",
      "lineIdx": 109,
      "from": 26,
      "to": 32
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 174,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 187,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 141,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 154,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 48,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 57,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 23,
      "to": 30
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 23,
      "to": 30
    }
  }, {
    "left": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 33,
      "from": 20,
      "to": 27
    },
    "right": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 42,
      "from": 20,
      "to": 27
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 22,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 23,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 53,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 66,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 55,
      "to": 60
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 55,
      "to": 60
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 26,
      "to": 34
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 26,
      "to": 34
    }
  }, {
    "left": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 137,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 150,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 26,
      "to": 37
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 26,
      "to": 37
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  vector<FeatureRange> ranges;",
      "lineIdx": 173,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  vector<FeatureRange> ranges;",
      "lineIdx": 186,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 175,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 188,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 72,
      "to": 76
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 72,
      "to": 76
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 103,
      "to": 108
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 103,
      "to": 108
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 68,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 81,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 58,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 71,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 141,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 154,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 61,
      "to": 65
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 61,
      "to": 65
    }
  }, {
    "left": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 106,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 119,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 181,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 194,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 118,
      "to": 126
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 118,
      "to": 126
    }
  }, {
    "left": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 126,
      "from": 62,
      "to": 69
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 139,
      "from": 62,
      "to": 69
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 120,
      "to": 129
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 120,
      "to": 129
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 58,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 71,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 29,
      "to": 36
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 29,
      "to": 36
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 58,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 71,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 48,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 57,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 72,
      "to": 77
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 72,
      "to": 77
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 121,
      "to": 122
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 121,
      "to": 122
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 5,
      "to": 15
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 5,
      "to": 15
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 183,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 196,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 90,
      "to": 98
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 90,
      "to": 98
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 31,
      "to": 39
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 31,
      "to": 39
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 36,
      "to": 48
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 36,
      "to": 48
    }
  }, {
    "left": {
      "line": "  vector<MLSample> result;",
      "lineIdx": 59,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "  vector<MLSample> result;",
      "lineIdx": 72,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 138,
      "to": 139
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 138,
      "to": 139
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 23,
      "to": 28
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 23,
      "to": 28
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 76,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  unordered_map<int, LinePair> leftUsed; //value is the original pairing",
      "lineIdx": 89,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 177,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 190,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 68,
      "to": 75
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 68,
      "to": 75
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 37,
      "to": 42
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 37,
      "to": 42
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 135,
      "to": 140
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 135,
      "to": 140
    }
  }, {
    "left": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 146,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 159,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 18,
      "to": 28
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 18,
      "to": 28
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 129,
      "to": 130
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 129,
      "to": 130
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 126,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 139,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 146,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "          if(result > 0) { //==1",
      "lineIdx": 159,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 141,
      "to": 158
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 141,
      "to": 158
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 33,
      "to": 35
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 33,
      "to": 35
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 12,
      "to": 20
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 12,
      "to": 20
    }
  }, {
    "left": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 107,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 120,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 78,
      "from": 22,
      "to": 27
    },
    "right": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 91,
      "from": 22,
      "to": 27
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 58,
      "from": 76,
      "to": 81
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 71,
      "from": 76,
      "to": 81
    }
  }, {
    "left": {
      "line": "    (featureMax-featureMin);",
      "lineIdx": 115,
      "from": 16,
      "to": 26
    },
    "right": {
      "line": "    (featureMax-featureMin);",
      "lineIdx": 128,
      "from": 16,
      "to": 26
    }
  }, {
    "left": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 181,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 194,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 84,
      "to": 86
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 84,
      "to": 86
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 129,
      "to": 130
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 129,
      "to": 130
    }
  }, {
    "left": {
      "line": "  return ranges;",
      "lineIdx": 182,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return ranges;",
      "lineIdx": 195,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 77,
      "to": 79
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 77,
      "to": 79
    }
  }, {
    "left": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 113,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 126,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 176,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 189,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 42,
      "to": 51
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 42,
      "to": 51
    }
  }, {
    "left": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 78,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 91,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 89,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 102,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 104,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 117,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 130,
      "to": 132
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 130,
      "to": 132
    }
  }, {
    "left": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 33,
      "from": 9,
      "to": 19
    },
    "right": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 42,
      "from": 9,
      "to": 19
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 38,
      "to": 44
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 38,
      "to": 44
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 89,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 102,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 36,
      "to": 41
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 36,
      "to": 41
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 95,
      "to": 102
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 95,
      "to": 102
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 48,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 57,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 105,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 118,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 47,
      "from": 41,
      "to": 49
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 56,
      "from": 41,
      "to": 49
    }
  }, {
    "left": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 158,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 171,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "      continue;",
      "lineIdx": 83,
      "from": 6,
      "to": 14
    },
    "right": {
      "line": "      continue;",
      "lineIdx": 96,
      "from": 6,
      "to": 14
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 19,
      "to": 35
    },
    "right": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 19,
      "to": 35
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 45,
      "to": 49
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 45,
      "to": 49
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 135,
      "from": 29,
      "to": 35
    },
    "right": {
      "line": "          for(const QString& column: extractor.orderedNames()) {",
      "lineIdx": 148,
      "from": 29,
      "to": 35
    }
  }, {
    "left": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 92,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    leftUsed.insert(std::make_pair(match.mLeftIdx, match));",
      "lineIdx": 105,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 170,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 183,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 161,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 174,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 11,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 12,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 31,
      "to": 37
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 31,
      "to": 37
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 33,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 42,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 137,
      "from": 18,
      "to": 27
    },
    "right": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 150,
      "from": 18,
      "to": 27
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 25,
      "to": 29
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 25,
      "to": 29
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 37,
      "to": 59
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 37,
      "to": 59
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 13,
      "from": 14,
      "to": 25
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 14,
      "to": 25
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 113,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 126,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 77,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 90,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 38,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 47,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": ": mFeatures(features)",
      "lineIdx": 20,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ": mFeatures(features)",
      "lineIdx": 21,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 170,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 183,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 55,
      "to": 62
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 55,
      "to": 62
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 5,
      "to": 25
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 5,
      "to": 25
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 148,
      "to": 149
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 148,
      "to": 149
    }
  }, {
    "left": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 175,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 188,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 84,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 97,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 21,
      "to": 31
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 21,
      "to": 31
    }
  }, {
    "left": {
      "line": "            double value = features.at(column);",
      "lineIdx": 136,
      "from": 27,
      "to": 35
    },
    "right": {
      "line": "            double value = features.at(column);",
      "lineIdx": 149,
      "from": 27,
      "to": 35
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 174,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 187,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 169,
      "to": 170
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 169,
      "to": 170
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 58,
      "from": 2,
      "to": 19
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 71,
      "from": 2,
      "to": 19
    }
  }, {
    "left": {
      "line": "  QFile file(path);",
      "lineIdx": 168,
      "from": 13,
      "to": 17
    },
    "right": {
      "line": "  QFile file(path);",
      "lineIdx": 181,
      "from": 13,
      "to": 17
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 87,
      "to": 95
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 87,
      "to": 95
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  vector<MLSample> result;",
      "lineIdx": 59,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "  vector<MLSample> result;",
      "lineIdx": 72,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 47,
      "from": 25,
      "to": 33
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 56,
      "from": 25,
      "to": 33
    }
  }, {
    "left": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 175,
      "from": 22,
      "to": 30
    },
    "right": {
      "line": "    QString line = in.readLine();",
      "lineIdx": 188,
      "from": 22,
      "to": 30
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 152,
      "to": 157
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 152,
      "to": 157
    }
  }, {
    "left": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 104,
      "from": 15,
      "to": 21
    },
    "right": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 117,
      "from": 15,
      "to": 21
    }
  }, {
    "left": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 106,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 119,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 127,
      "to": 129
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 127,
      "to": 129
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 18,
      "to": 25
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 18,
      "to": 25
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 4,
      "to": 12
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 4,
      "to": 12
    }
  }, {
    "left": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 53,
      "from": 6,
      "to": 22
    },
    "right": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 66,
      "from": 6,
      "to": 22
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 104,
      "to": 111
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 104,
      "to": 111
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 13,
      "to": 19
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 13,
      "to": 19
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 55,
      "to": 65
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 55,
      "to": 65
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 71,
      "to": 75
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 71,
      "to": 75
    }
  }, {
    "left": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 141,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 154,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 33,
      "to": 52
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 33,
      "to": 52
    }
  }, {
    "left": {
      "line": "  QFile file(path);",
      "lineIdx": 168,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  QFile file(path);",
      "lineIdx": 181,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 48,
      "from": 35,
      "to": 40
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 57,
      "from": 35,
      "to": 40
    }
  }, {
    "left": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 181,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 194,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 31,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 40,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 58,
      "to": 62
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 58,
      "to": 62
    }
  }, {
    "left": {
      "line": "            ++columnIdx;",
      "lineIdx": 138,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "            ++columnIdx;",
      "lineIdx": 151,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  return ranges;",
      "lineIdx": 182,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return ranges;",
      "lineIdx": 195,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 107,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 120,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 45,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::LEFT));",
      "lineIdx": 54,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 141,
      "from": 27,
      "to": 38
    },
    "right": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 154,
      "from": 27,
      "to": 38
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 53,
      "to": 70
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 53,
      "to": 70
    }
  }, {
    "left": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 17,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 18,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 59,
      "to": 63
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 59,
      "to": 63
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 50,
      "to": 53
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 50,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 13,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 176,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 189,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 106,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 119,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 33,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 42,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 41,
      "to": 49
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 41,
      "to": 49
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 126,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 139,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 68,
      "to": 75
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 68,
      "to": 75
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "#include <QFile>",
      "lineIdx": 15,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QFile>",
      "lineIdx": 16,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 26,
      "to": 34
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 26,
      "to": 34
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 87,
      "to": 96
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 87,
      "to": 96
    }
  }, {
    "left": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 14,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 15,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 131,
      "to": 132
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 131,
      "to": 132
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 159,
      "to": 160
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 159,
      "to": 160
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 172,
      "from": 2,
      "to": 13
    },
    "right": {
      "line": "  QTextStream in(&file);",
      "lineIdx": 185,
      "from": 2,
      "to": 13
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 71,
      "to": 81
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 71,
      "to": 81
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 61,
      "to": 69
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 61,
      "to": 69
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 36,
      "to": 51
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 36,
      "to": 51
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 169,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 182,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 58,
      "from": 70,
      "to": 74
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 71,
      "from": 70,
      "to": 74
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 103,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 116,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 47,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 56,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 170,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 183,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 113,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 126,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 19,
      "to": 34
    },
    "right": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 19,
      "to": 34
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 58,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(left, right);",
      "lineIdx": 71,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 82,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 95,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 59,
      "to": 63
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 59,
      "to": 63
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 17,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 18,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 107,
      "from": 17,
      "to": 23
    },
    "right": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 120,
      "from": 17,
      "to": 23
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 51,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 64,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 89,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 102,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 28,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 29,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 157,
      "to": 158
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 157,
      "to": 158
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 77,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 90,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 137,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 150,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 17,
      "to": 27
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 17,
      "to": 27
    }
  }, {
    "left": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 53,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 66,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"features/equalcharcount.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 53,
      "to": 59
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 53,
      "to": 59
    }
  }, {
    "left": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 104,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 117,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 77,
      "to": 83
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 77,
      "to": 83
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "#include \"features/abovebelowlinecount.h\"",
      "lineIdx": 6,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 85,
      "to": 92
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 85,
      "to": 92
    }
  }, {
    "left": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 141,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 154,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "          vector<svm_node> nodes;",
      "lineIdx": 133,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "          vector<svm_node> nodes;",
      "lineIdx": 146,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 59,
      "to": 64
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 59,
      "to": 64
    }
  }, {
    "left": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 53,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 66,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 31,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 40,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 53,
      "from": 35,
      "to": 52
    },
    "right": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 66,
      "from": 35,
      "to": 52
    }
  }, {
    "left": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 14,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 15,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 181,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 194,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 107,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 120,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 53,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 66,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 19,
      "to": 30
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 19,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 12,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 13,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 147,
      "to": 148
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 147,
      "to": 148
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 101,
      "to": 107
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 101,
      "to": 107
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 52,
      "to": 62
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 52,
      "to": 62
    }
  }, {
    "left": {
      "line": "  return learnedMatches - wrongs;",
      "lineIdx": 96,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return learnedMatches - wrongs;",
      "lineIdx": 109,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 17,
      "to": 27
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 17,
      "to": 27
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 139,
      "to": 150
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 139,
      "to": 150
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 38,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 47,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": ", mSame(same)",
      "lineIdx": 21,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ", mSame(same)",
      "lineIdx": 22,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 57,
      "to": 74
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 57,
      "to": 74
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 12,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 13,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 169,
      "from": 14,
      "to": 20
    },
    "right": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 182,
      "from": 14,
      "to": 20
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 67,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 80,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 97,
      "to": 101
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 97,
      "to": 101
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 64,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "        result.push_back(MLSample(extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx), isSame));",
      "lineIdx": 77,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 181,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 194,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 19,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "MLSample::MLSample(const std::unordered_map<QString, double> &features, bool same)",
      "lineIdx": 20,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 111,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  VERIFY(featureMin < featureMax);",
      "lineIdx": 124,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 53,
      "to": 60
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 53,
      "to": 60
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 170,
      "from": 30,
      "to": 38
    },
    "right": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 183,
      "from": 30,
      "to": 38
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 53,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 66,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 53,
      "to": 70
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 53,
      "to": 70
    }
  }, {
    "left": {
      "line": "    (value-featureMin)/",
      "lineIdx": 114,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    (value-featureMin)/",
      "lineIdx": 127,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 147,
      "from": 12,
      "to": 26
    },
    "right": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 160,
      "from": 12,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 14,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 15,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 92,
      "to": 93
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 92,
      "to": 93
    }
  }, {
    "left": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 60,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 73,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 108,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  if(featureMax - epsilon < featureMin && featureMin < featureMax + epsilon)",
      "lineIdx": 121,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 177,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 190,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 4,
      "to": 13
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 4,
      "to": 13
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 107,
      "from": 24,
      "to": 33
    },
    "right": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 120,
      "from": 24,
      "to": 33
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 53,
      "to": 58
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 53,
      "to": 58
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 146,
      "to": 147
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 146,
      "to": 147
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 95,
      "to": 100
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 95,
      "to": 100
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 174,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  while(!in.atEnd()) {",
      "lineIdx": 187,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 79,
      "to": 84
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 79,
      "to": 84
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 126,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 139,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 75,
      "to": 80
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 75,
      "to": 80
    }
  }, {
    "left": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 106,
      "from": 34,
      "to": 38
    },
    "right": {
      "line": "  static const double epsilon = 0.0001;",
      "lineIdx": 119,
      "from": 34,
      "to": 38
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 47,
      "to": 52
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 47,
      "to": 52
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 66,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 79,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 147,
      "from": 55,
      "to": 63
    },
    "right": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 160,
      "from": 55,
      "to": 63
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 14,
      "to": 20
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 14,
      "to": 20
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 72,
      "to": 75
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 72,
      "to": 75
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 82,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 95,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 128,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  if(model != nullptr) {",
      "lineIdx": 141,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 48,
      "from": 42,
      "to": 50
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 57,
      "from": 42,
      "to": 50
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 76,
      "to": 78
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 76,
      "to": 78
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 37,
      "to": 42
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 37,
      "to": 42
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 177,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 190,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 170,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 183,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 170,
      "from": 19,
      "to": 28
    },
    "right": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 183,
      "from": 19,
      "to": 28
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 31,
      "from": 28,
      "to": 47
    },
    "right": {
      "line": "vector<unique_ptr<Feature>> createFeatureVector() {",
      "lineIdx": 40,
      "from": 28,
      "to": 47
    }
  }, {
    "left": {
      "line": "  vector<MLSample> result;",
      "lineIdx": 59,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  vector<MLSample> result;",
      "lineIdx": 72,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 38,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 47,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 170,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "  VERIFY(file.open(QIODevice::ReadOnly));",
      "lineIdx": 183,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 141,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 154,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 30,
      "to": 48
    },
    "right": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 30,
      "to": 48
    }
  }, {
    "left": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 176,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    QStringList fields = line.split(\" \");",
      "lineIdx": 189,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 83,
      "to": 102
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 83,
      "to": 102
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 169,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 182,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 165,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 178,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 38,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 47,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 122,
      "to": 131
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 122,
      "to": 131
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 13,
      "to": 17
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 13,
      "to": 17
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 107,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  /* skip single-valued attribute */",
      "lineIdx": 120,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 158,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void SVMModelDeleter::operator()(svm_model *ptr)",
      "lineIdx": 171,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 41,
      "to": 46
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 41,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 12,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 13,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 12,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 13,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 48,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::RIGHT, features);",
      "lineIdx": 57,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 17,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 18,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include <QTextStream>",
      "lineIdx": 16,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QTextStream>",
      "lineIdx": 17,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 84,
      "to": 91
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 84,
      "to": 91
    }
  }, {
    "left": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 27,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "    features.emplace_back(make_unique<CharacterFeature>(i, side));",
      "lineIdx": 28,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 169,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  VERIFY(file.exists());",
      "lineIdx": 182,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 181,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  VERIFY(ranges.size() > 0);",
      "lineIdx": 194,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 63,
      "to": 75
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 63,
      "to": 75
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 12,
      "from": 26,
      "to": 29
    },
    "right": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 13,
      "from": 26,
      "to": 29
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 39,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 1));",
      "lineIdx": 48,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 126,
      "from": 42,
      "to": 60
    },
    "right": {
      "line": "  OneToOneAlignment nonLearnedAlignment = NonLearningAligner::compute(leftText, rightText);",
      "lineIdx": 139,
      "from": 42,
      "to": 60
    }
  }, {
    "left": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 17,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "static Logger logger(\"MLPipeline\");",
      "lineIdx": 18,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "/*",
      "lineIdx": 99,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "/*",
      "lineIdx": 112,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "    (featureMax-featureMin);",
      "lineIdx": 115,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    (featureMax-featureMin);",
      "lineIdx": 128,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 33,
      "from": 30,
      "to": 38
    },
    "right": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 42,
      "from": 30,
      "to": 38
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 18,
      "to": 25
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 18,
      "to": 25
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 89,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 102,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 117,
      "to": 121
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 117,
      "to": 121
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 77,
      "from": 16,
      "to": 19
    },
    "right": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 90,
      "from": 16,
      "to": 19
    }
  }, {
    "left": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 147,
      "from": 46,
      "to": 53
    },
    "right": {
      "line": "            learnedMatches.push_back(LinePair(leftIdx, rightIdx));",
      "lineIdx": 160,
      "from": 46,
      "to": 53
    }
  }, {
    "left": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 105,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 118,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "          vector<svm_node> nodes;",
      "lineIdx": 133,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "          vector<svm_node> nodes;",
      "lineIdx": 146,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 18,
      "to": 29
    },
    "right": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 18,
      "to": 29
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 61,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "    for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 74,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 104,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  static const double lower = -1.0;",
      "lineIdx": 117,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 25,
      "from": 59,
      "to": 66
    },
    "right": {
      "line": "void addCharacterFeatures(DiffSide side, vector<unique_ptr<Feature>>& features) {",
      "lineIdx": 26,
      "from": 59,
      "to": 66
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 81,
      "from": 32,
      "to": 34
    },
    "right": {
      "line": "      wrongs.push_back(leftUsed.at(match.mLeftIdx));",
      "lineIdx": 94,
      "from": 32,
      "to": 34
    }
  }, {
    "left": {
      "line": "  vector<LinePair> learnedMatches;",
      "lineIdx": 127,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<LinePair> learnedMatches;",
      "lineIdx": 140,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 62,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "      if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 75,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 36,
      "to": 55
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 36,
      "to": 55
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 32,
      "from": 17,
      "to": 22
    },
    "right": {
      "line": "  //we need this ultra stupid function because of the mega dumb c++ because it can't handle fucking unique_ptrs with init lists",
      "lineIdx": 41,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 82,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 95,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 36,
      "to": 46
    },
    "right": {
      "line": "  features.emplace_back(make_unique<LineLength>(DiffSide::RIGHT));",
      "lineIdx": 55,
      "from": 36,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"aligner/nonlearning/nonlearningaligner.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 131,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "        if(nonLearnedAlignment.containsEither(LinePair(leftIdx, rightIdx)) == false) {",
      "lineIdx": 144,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 137,
      "from": 37,
      "to": 46
    },
    "right": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 150,
      "from": 37,
      "to": 46
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 87,
      "to": 95
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 87,
      "to": 95
    }
  }, {
    "left": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 177,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    if(fields.size() == 3) {",
      "lineIdx": 190,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 87,
      "from": 150,
      "to": 151
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used right line: \") + QString::number(match.mRightIdx) + \". Current match: \" + toStr(rightUsed.at(match.mRightIdx)));",
      "lineIdx": 100,
      "from": 150,
      "to": 151
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 57,
      "to": 74
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 57,
      "to": 74
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 72,
      "to": 75
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 72,
      "to": 75
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 78,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 91,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 23,
      "to": 32
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 23,
      "to": 32
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 109,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 122,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 105,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 118,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 93,
      "to": 100
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 93,
      "to": 100
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include \"mlpipeline.h\"",
      "lineIdx": 0,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 37,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::RIGHT));",
      "lineIdx": 46,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 72,
      "to": 77
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 72,
      "to": 77
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 9,
      "to": 26
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 9,
      "to": 26
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 22,
      "to": 31
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 22,
      "to": 31
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 77,
      "from": 2,
      "to": 15
    },
    "right": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 90,
      "from": 2,
      "to": 15
    }
  }, {
    "left": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 145,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "          double result = svm_predict(model.get(), &(scaledNodes.at(0)));",
      "lineIdx": 158,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 137,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 150,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 152,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 165,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 113,
      "to": 121
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 113,
      "to": 121
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 89,
      "from": 23,
      "to": 28
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 102,
      "from": 23,
      "to": 28
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 126,
      "to": 127
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 126,
      "to": 127
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 113,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 126,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 166,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  logger.info(\"Trying to open: \" + path);",
      "lineIdx": 179,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include <QTextStream>",
      "lineIdx": 16,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QTextStream>",
      "lineIdx": 17,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 129,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "    for(int leftIdx = 0; leftIdx < nonLearnedAlignment.lines(DiffSide::LEFT).size(); ++leftIdx) {",
      "lineIdx": 142,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 38,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  features.emplace_back(make_unique<EqualCharCount>());",
      "lineIdx": 47,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 11,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 12,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 137,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "            nodes.push_back(svm_node{columnIdx, value});",
      "lineIdx": 150,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "#include <QFile>",
      "lineIdx": 15,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "#include <QFile>",
      "lineIdx": 16,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 43,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 5));",
      "lineIdx": 52,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 44,
      "from": 72,
      "to": 75
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 10));",
      "lineIdx": 53,
      "from": 72,
      "to": 75
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 13,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/make_unique.h\"",
      "lineIdx": 14,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"features/trivialfeatures.h\"",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 113,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return lower + (upper-lower) *",
      "lineIdx": 126,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 102,
      "from": 64,
      "to": 70
    },
    "right": {
      "line": "double MLPipeline::singleScale(double value, double featureMin, double featureMax)",
      "lineIdx": 115,
      "from": 64,
      "to": 70
    }
  }, {
    "left": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 79,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    if(leftUsed.count(match.mLeftIdx) != 0) {",
      "lineIdx": 92,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 11,
      "to": 19
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 11,
      "to": 19
    }
  }, {
    "left": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 143,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "          scaledNodes.push_back(svm_node{-1, -1.0});//ending node",
      "lineIdx": 156,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 77,
      "to": 81
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 77,
      "to": 81
    }
  }, {
    "left": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 14,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 15,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "  vector<LinePair> learnedMatches;",
      "lineIdx": 127,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  vector<LinePair> learnedMatches;",
      "lineIdx": 140,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 88,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "      wrongs.push_back(rightUsed.at(match.mRightIdx));",
      "lineIdx": 101,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "#include \"features/hardmatchesnear.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 65,
      "to": 73
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 65,
      "to": 73
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 29,
      "to": 39
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 29,
      "to": 39
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 36,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::RIGHT));",
      "lineIdx": 45,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 178,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "      ranges.push_back(FeatureRange{safeToDouble(fields.at(1)), safeToDouble(fields.at(2))});",
      "lineIdx": 191,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 29,
      "to": 51
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 29,
      "to": 51
    }
  }, {
    "left": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 56,
      "from": 72,
      "to": 76
    },
    "right": {
      "line": "vector<MLSample> MLPipeline::extractSamplesFromReference(const QString& left, const QString& right, const FeatureExtractor &extractor, const OneToOneAlignment &reference)",
      "lineIdx": 69,
      "from": 72,
      "to": 76
    }
  }, {
    "left": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 141,
      "from": 59,
      "to": 65
    },
    "right": {
      "line": "          vector<svm_node> scaledNodes = scaleNodes(nodes, ranges);",
      "lineIdx": 154,
      "from": 59,
      "to": 65
    }
  }, {
    "left": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 73,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "vector<LinePair> MLPipeline::withoutInconsistencies(const vector<LinePair>& learnedMatches)",
      "lineIdx": 86,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 118,
      "from": 64,
      "to": 70
    },
    "right": {
      "line": "vector<svm_node> MLPipeline::scaleNodes(const vector<svm_node>& sample, const vector<FeatureRange>& ranges) {",
      "lineIdx": 131,
      "from": 64,
      "to": 70
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 164,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "vector<FeatureRange> MLPipeline::loadRanges(const QString& path)",
      "lineIdx": 177,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"featureextractor.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 14,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/func/zipper.h\"",
      "lineIdx": 15,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    (value-featureMin)/",
      "lineIdx": 114,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    (value-featureMin)/",
      "lineIdx": 127,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 47,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  //addCharacterFeatures(DiffSide::LEFT, features);",
      "lineIdx": 56,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 145,
      "to": 146
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 145,
      "to": 146
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 72,
      "to": 75
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 72,
      "to": 75
    }
  }, {
    "left": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/qstringutils.h\"",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 53,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "const FeatureExtractor MLPipeline::standardExtractor(createFeatureVector());",
      "lineIdx": 66,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 36,
      "to": 51
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 36,
      "to": 51
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 63,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "        bool isSame = reference.contains(LinePair(leftIdx, rightIdx));",
      "lineIdx": 76,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  for(int i = 0; i < 100; ++i) {",
      "lineIdx": 26,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  for(int i = 0; i < 30; ++i) {",
      "lineIdx": 27,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 35,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::DOWN, DiffSide::LEFT));",
      "lineIdx": 44,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 116,
      "to": 120
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 116,
      "to": 120
    }
  }, {
    "left": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 80,
      "from": 101,
      "to": 106
    },
    "right": {
      "line": "      logger.warn(QString(\"Already used left line: \") + QString::number(match.mLeftIdx) + \". Current match: \" + toStr(leftUsed.at(match.mLeftIdx)));",
      "lineIdx": 93,
      "from": 101,
      "to": 106
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 42,
      "from": 24,
      "to": 35
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::DOWN, 1));",
      "lineIdx": 51,
      "from": 24,
      "to": 35
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 41,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 10));",
      "lineIdx": 50,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 33,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  vector<unique_ptr<Feature>> features;",
      "lineIdx": 42,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"features/characterfeature.h\"",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 78,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 91,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 12,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"3rdparty/libsvm/svm.h\"",
      "lineIdx": 13,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 78,
      "from": 12,
      "to": 20
    },
    "right": {
      "line": "  for(const LinePair& match: learnedMatches) {",
      "lineIdx": 91,
      "from": 12,
      "to": 20
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 77,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  unordered_map<int, LinePair> rightUsed;",
      "lineIdx": 90,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 105,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  static const double upper = 1.0;",
      "lineIdx": 118,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 34,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  features.emplace_back(make_unique<AboveBelowLineCount>(AboveBelowFeature::Dir::UP, DiffSide::LEFT));",
      "lineIdx": 43,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 130,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "      for(int rightIdx = 0; rightIdx < nonLearnedAlignment.lines(DiffSide::RIGHT).size(); ++rightIdx) {",
      "lineIdx": 143,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 82,
      "from": 23,
      "to": 28
    },
    "right": {
      "line": "      wrongs.push_back(match);",
      "lineIdx": 95,
      "from": 23,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 120,
      "from": 109,
      "to": 115
    },
    "right": {
      "line": "    return svm_node{featureWithRange.first.index, singleScale(featureWithRange.first.value, featureWithRange.second.mLow, featureWithRange.second.mHigh)};",
      "lineIdx": 133,
      "from": 109,
      "to": 115
    }
  }, {
    "left": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 93,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    rightUsed.insert(std::make_pair(match.mRightIdx, match));",
      "lineIdx": 106,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 109,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    FAIL(\"invalid range\");",
      "lineIdx": 122,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 154,
      "from": 107,
      "to": 108
    },
    "right": {
      "line": "  return OneToOneAlignment::fromInts(withoutInconsistencies(learnedMatches) + nonLearnedAlignment.matches(), leftText, rightText);",
      "lineIdx": 167,
      "from": 107,
      "to": 108
    }
  }, {
    "left": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 124,
      "from": 165,
      "to": 171
    },
    "right": {
      "line": "OneToOneAlignment MLPipeline::computeAlignment(const QString &leftText, const QString &rightText, const FeatureExtractor &extractor, const SVMModelPtr& model, const vector<FeatureRange>& ranges)",
      "lineIdx": 137,
      "from": 165,
      "to": 171
    }
  }, {
    "left": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 167,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  //I assume the features ordered in the right way from 1..x",
      "lineIdx": 180,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 119,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  return map(zip(sample, ranges), [](const std::pair<svm_node, FeatureRange> featureWithRange) {",
      "lineIdx": 132,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 40,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "  features.emplace_back(make_unique<HardMatchesNear>(AboveBelowFeature::Dir::UP, 5));",
      "lineIdx": 49,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 132,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "          std::unordered_map<QString, double> features = extractor.computeFeatures(nonLearnedAlignment, leftIdx, rightIdx);",
      "lineIdx": 145,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 86,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    if(rightUsed.count(match.mRightIdx) != 0) {",
      "lineIdx": 99,
      "from": 43,
      "to": 44
    }
  }]
}