{
  "matches": [{
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 97,
      "to": 104
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 97,
      "to": 104
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 106,
      "to": 114
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 106,
      "to": 114
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 34,
      "to": 42
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 34,
      "to": 42
    }
  }, {
    "left": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 39,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 40,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": ", mLeftText(aLeftText)",
      "lineIdx": 17,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": ", mLeftText(aLeftText)",
      "lineIdx": 18,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 73,
      "from": 21,
      "to": 27
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 83,
      "from": 21,
      "to": 27
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 18,
      "to": 35
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 18,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 41,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 42,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 29,
      "from": 15,
      "to": 32
    },
    "right": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 30,
      "from": 15,
      "to": 32
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 41,
      "to": 51
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 41,
      "to": 51
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 73,
      "from": 5,
      "to": 20
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 83,
      "from": 5,
      "to": 20
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 87,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 97,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 96,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 106,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 142,
      "to": 143
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 142,
      "to": 143
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 29,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 30,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 87,
      "from": 18,
      "to": 35
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 97,
      "from": 18,
      "to": 35
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 41,
      "from": 34,
      "to": 44
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 42,
      "from": 34,
      "to": 44
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 50,
      "from": 39,
      "to": 47
    },
    "right": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 51,
      "from": 39,
      "to": 47
    }
  }, {
    "left": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 96,
      "from": 9,
      "to": 16
    },
    "right": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 106,
      "from": 9,
      "to": 16
    }
  }, {
    "left": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 47,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 48,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 49,
      "to": 54
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 49,
      "to": 54
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 128,
      "to": 137
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 128,
      "to": 137
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 95,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 105,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 135,
      "to": 140
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 135,
      "to": 140
    }
  }, {
    "left": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 89,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 99,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 72,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  });",
      "lineIdx": 82,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 29,
      "from": 6,
      "to": 13
    },
    "right": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 30,
      "from": 6,
      "to": 13
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 62,
      "to": 75
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 62,
      "to": 75
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 41,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 42,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 12,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 13,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 84,
      "from": 47,
      "to": 55
    },
    "right": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 94,
      "from": 47,
      "to": 55
    }
  }, {
    "left": {
      "line": ", mRightText(aRightText)",
      "lineIdx": 18,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ", mRightText(aRightText)",
      "lineIdx": 19,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 5,
      "to": 22
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 5,
      "to": 22
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 37,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 38,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 21,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 22,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 38,
      "to": 40
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 38,
      "to": 40
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 48,
      "to": 57
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 48,
      "to": 57
    }
  }, {
    "left": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 31,
      "from": 9,
      "to": 20
    },
    "right": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 32,
      "from": 9,
      "to": 20
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "    return match.mLeft;",
      "lineIdx": 64,
      "from": 11,
      "to": 16
    },
    "right": {
      "line": "    return match.mLeft;",
      "lineIdx": 74,
      "from": 11,
      "to": 16
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 131,
      "to": 140
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 131,
      "to": 140
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 17,
      "to": 26
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 17,
      "to": 26
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": ": mMatches(aMatches)",
      "lineIdx": 16,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": ": mMatches(aMatches)",
      "lineIdx": 17,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 63,
      "to": 76
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 63,
      "to": 76
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 72,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  });",
      "lineIdx": 82,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 0,
      "to": 17
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 0,
      "to": 17
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 50,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 51,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 43,
      "to": 45
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 43,
      "to": 45
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 115,
      "to": 116
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 115,
      "to": 116
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  } else {",
      "lineIdx": 97,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "  } else {",
      "lineIdx": 107,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 114,
      "to": 115
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 114,
      "to": 115
    }
  }, {
    "left": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 26,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 27,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 24,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 25,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 96,
      "from": 24,
      "to": 28
    },
    "right": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 106,
      "from": 24,
      "to": 28
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 69,
      "to": 72
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 69,
      "to": 72
    }
  }, {
    "left": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 89,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 99,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 133,
      "to": 134
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 133,
      "to": 134
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 66,
      "from": 5,
      "to": 20
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 76,
      "from": 5,
      "to": 20
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 29,
      "from": 34,
      "to": 43
    },
    "right": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 30,
      "from": 34,
      "to": 43
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 66,
      "from": 31,
      "to": 36
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 76,
      "from": 31,
      "to": 36
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 67,
      "to": 72
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 67,
      "to": 72
    }
  }, {
    "left": {
      "line": ", mLeftText(aLeftText)",
      "lineIdx": 17,
      "from": 12,
      "to": 21
    },
    "right": {
      "line": ", mLeftText(aLeftText)",
      "lineIdx": 18,
      "from": 12,
      "to": 21
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 51,
      "to": 57
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 51,
      "to": 57
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 12,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 13,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": ", mRightText(aRightText)",
      "lineIdx": 18,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": ", mRightText(aRightText)",
      "lineIdx": 19,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 131,
      "to": 132
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 131,
      "to": 132
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 131,
      "to": 139
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 131,
      "to": 139
    }
  }, {
    "left": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 96,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 106,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 14,
      "to": 20
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 14,
      "to": 20
    }
  }, {
    "left": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 20,
      "from": 25,
      "to": 32
    },
    "right": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 21,
      "from": 25,
      "to": 32
    }
  }, {
    "left": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 84,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 94,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    return match.mLeft;",
      "lineIdx": 64,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    return match.mLeft;",
      "lineIdx": 74,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 31,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 32,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 19,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 20,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 89,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 99,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 58,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 68,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 123,
      "to": 124
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 123,
      "to": 124
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 58,
      "to": 60
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 58,
      "to": 60
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 151,
      "to": 152
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 151,
      "to": 152
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 113,
      "to": 118
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 113,
      "to": 118
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 77,
      "to": 82
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 77,
      "to": 82
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 70,
      "to": 78
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 70,
      "to": 78
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 30,
      "to": 35
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 30,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 2,
      "to": 4
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 2,
      "to": 4
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 22,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 23,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 29,
      "from": 51,
      "to": 56
    },
    "right": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 30,
      "from": 51,
      "to": 56
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 64,
      "to": 68
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 64,
      "to": 68
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 89,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 99,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 65,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  });",
      "lineIdx": 75,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "    return checked.right();",
      "lineIdx": 98,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    return checked.right();",
      "lineIdx": 108,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 58,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 68,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 31,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 32,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 13,
      "to": 16
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 13,
      "to": 16
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 74,
      "to": 77
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 74,
      "to": 77
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 66,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 76,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 41,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 42,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 66,
      "to": 74
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 66,
      "to": 74
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 130,
      "to": 131
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 130,
      "to": 131
    }
  }, {
    "left": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 47,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 48,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 25,
      "to": 42
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 25,
      "to": 42
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 50,
      "from": 5,
      "to": 22
    },
    "right": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 51,
      "from": 5,
      "to": 22
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 12,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 13,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 21,
      "to": 27
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 21,
      "to": 27
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 68,
      "to": 77
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 68,
      "to": 77
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 7,
      "from": 10,
      "to": 23
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 7,
      "from": 10,
      "to": 23
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 37,
      "to": 45
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 37,
      "to": 45
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 90,
      "to": 103
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 90,
      "to": 103
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 144,
      "to": 150
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 144,
      "to": 150
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 90,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 100,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 58,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 68,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 33,
      "to": 37
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 33,
      "to": 37
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 90,
      "to": 94
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 90,
      "to": 94
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 87,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 97,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 30,
      "to": 35
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 30,
      "to": 35
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 50,
      "from": 55,
      "to": 60
    },
    "right": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 51,
      "from": 55,
      "to": 60
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 54,
      "to": 57
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 54,
      "to": 57
    }
  }, {
    "left": {
      "line": "    return checked.right();",
      "lineIdx": 98,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "    return checked.right();",
      "lineIdx": 108,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 91,
      "to": 96
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 91,
      "to": 96
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 47,
      "from": 13,
      "to": 21
    },
    "right": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 48,
      "from": 13,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 140,
      "to": 141
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 140,
      "to": 141
    }
  }, {
    "left": {
      "line": "    return match.mRight;",
      "lineIdx": 71,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return match.mRight;",
      "lineIdx": 81,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 95,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 105,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 50,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 51,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 60,
      "to": 66
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 60,
      "to": 66
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 60,
      "to": 65
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 60,
      "to": 65
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 39,
      "from": 53,
      "to": 57
    },
    "right": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 40,
      "from": 53,
      "to": 57
    }
  }, {
    "left": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 96,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 106,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 11,
      "to": 31
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 11,
      "to": 31
    }
  }, {
    "left": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 20,
      "from": 33,
      "to": 43
    },
    "right": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 21,
      "from": 33,
      "to": 43
    }
  }, {
    "left": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 39,
      "from": 44,
      "to": 52
    },
    "right": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 40,
      "from": 44,
      "to": 52
    }
  }, {
    "left": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 84,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 94,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 52,
      "to": 58
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 52,
      "to": 58
    }
  }, {
    "left": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 19,
      "from": 32,
      "to": 41
    },
    "right": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 20,
      "from": 32,
      "to": 41
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 26,
      "from": 20,
      "to": 22
    },
    "right": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 27,
      "from": 20,
      "to": 22
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 41,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 42,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 43,
      "to": 49
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 43,
      "to": 49
    }
  }, {
    "left": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 39,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 40,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 60,
      "to": 65
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 60,
      "to": 65
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 41,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 42,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": ": mMatches(aMatches)",
      "lineIdx": 16,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": ": mMatches(aMatches)",
      "lineIdx": 17,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 19,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 20,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 89,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 99,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 99,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 109,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 87,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 97,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 84,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 94,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 54,
      "to": 57
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 54,
      "to": 57
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 50,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 51,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 32,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 33,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 120,
      "to": 121
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 120,
      "to": 121
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 127,
      "to": 128
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 127,
      "to": 128
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 0,
      "to": 17
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 0,
      "to": 17
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 24,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 25,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": ": mMatches(aMatches)",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ": mMatches(aMatches)",
      "lineIdx": 17,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 87,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 97,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 22,
      "to": 27
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 22,
      "to": 27
    }
  }, {
    "left": {
      "line": ", mRightText(aRightText)",
      "lineIdx": 18,
      "from": 2,
      "to": 12
    },
    "right": {
      "line": ", mRightText(aRightText)",
      "lineIdx": 19,
      "from": 2,
      "to": 12
    }
  }, {
    "left": {
      "line": "  } else {",
      "lineIdx": 97,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  } else {",
      "lineIdx": 107,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 36,
      "to": 49
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 36,
      "to": 49
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 20,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 21,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 46,
      "to": 51
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 46,
      "to": 51
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 67,
      "to": 72
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 67,
      "to": 72
    }
  }, {
    "left": {
      "line": "    return match.mRight;",
      "lineIdx": 71,
      "from": 11,
      "to": 16
    },
    "right": {
      "line": "    return match.mRight;",
      "lineIdx": 81,
      "from": 11,
      "to": 16
    }
  }, {
    "left": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 19,
      "from": 13,
      "to": 22
    },
    "right": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 20,
      "from": 13,
      "to": 22
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 41,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 42,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 39,
      "from": 59,
      "to": 64
    },
    "right": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 40,
      "from": 59,
      "to": 64
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 140,
      "to": 141
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 140,
      "to": 141
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 57,
      "to": 67
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 57,
      "to": 67
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 26,
      "from": 9,
      "to": 19
    },
    "right": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 27,
      "from": 9,
      "to": 19
    }
  }, {
    "left": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 19,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 20,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 66,
      "from": 21,
      "to": 26
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 76,
      "from": 21,
      "to": 26
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 42,
      "to": 55
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 42,
      "to": 55
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 80,
      "to": 83
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 80,
      "to": 83
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 102,
      "to": 107
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 102,
      "to": 107
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 65,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  });",
      "lineIdx": 75,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 82,
      "to": 89
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 82,
      "to": 89
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 29,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 30,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 84,
      "from": 9,
      "to": 18
    },
    "right": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 94,
      "from": 9,
      "to": 18
    }
  }, {
    "left": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 47,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 48,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 59,
      "to": 62
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 59,
      "to": 62
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    return match.mLeft;",
      "lineIdx": 64,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return match.mLeft;",
      "lineIdx": 74,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 105,
      "to": 109
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 105,
      "to": 109
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": ", mLeftText(aLeftText)",
      "lineIdx": 17,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": ", mLeftText(aLeftText)",
      "lineIdx": 18,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 46,
      "to": 49
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 46,
      "to": 49
    }
  }, {
    "left": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 19,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 20,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 67,
      "to": 72
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 67,
      "to": 72
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 87,
      "from": 37,
      "to": 42
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 97,
      "from": 37,
      "to": 42
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 103,
      "to": 108
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 103,
      "to": 108
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 58,
      "from": 35,
      "to": 43
    },
    "right": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 68,
      "from": 35,
      "to": 43
    }
  }, {
    "left": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 19,
      "to": 36
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 19,
      "to": 36
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 155,
      "to": 156
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 155,
      "to": 156
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 110,
      "to": 119
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 110,
      "to": 119
    }
  }, {
    "left": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 31,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 32,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 61,
      "to": 66
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 61,
      "to": 66
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 43,
      "to": 57
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 43,
      "to": 57
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 59,
      "to": 65
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 59,
      "to": 65
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 76,
      "to": 81
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 76,
      "to": 81
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 22,
      "to": 25
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 22,
      "to": 25
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 61,
      "to": 66
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 61,
      "to": 66
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 87,
      "from": 0,
      "to": 17
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::empty()",
      "lineIdx": 97,
      "from": 0,
      "to": 17
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 9,
      "to": 25
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 9,
      "to": 25
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 35,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 36,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 111,
      "to": 112
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 111,
      "to": 112
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 88,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 98,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 12,
      "from": 11,
      "to": 24
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 13,
      "from": 11,
      "to": 24
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 134,
      "to": 137
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 134,
      "to": 137
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 50,
      "to": 56
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 50,
      "to": 56
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 39,
      "to": 43
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 39,
      "to": 43
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 44,
      "to": 46
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 44,
      "to": 46
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 165,
      "to": 166
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 165,
      "to": 166
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 55,
      "to": 60
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 55,
      "to": 60
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 40,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 41,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 133,
      "to": 134
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 133,
      "to": 134
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 24,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 25,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 6,
      "to": 13
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 6,
      "to": 13
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 45,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 46,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 138,
      "to": 139
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 138,
      "to": 139
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 53,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 56,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 14,
      "to": 23
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 14,
      "to": 23
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 66,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 76,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 42,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 43,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 150,
      "to": 151
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 150,
      "to": 151
    }
  }, {
    "left": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 47,
      "from": 26,
      "to": 32
    },
    "right": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 48,
      "from": 26,
      "to": 32
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 46,
      "to": 48
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 46,
      "to": 48
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 9,
      "to": 18
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 9,
      "to": 18
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 39,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 40,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 73,
      "from": 32,
      "to": 37
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 83,
      "from": 32,
      "to": 37
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 41,
      "from": 47,
      "to": 58
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 42,
      "from": 47,
      "to": 58
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 105,
      "to": 106
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 105,
      "to": 106
    }
  }, {
    "left": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 58,
      "from": 45,
      "to": 54
    },
    "right": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 68,
      "from": 45,
      "to": 54
    }
  }, {
    "left": {
      "line": ", mLeftText(aLeftText)",
      "lineIdx": 17,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ", mLeftText(aLeftText)",
      "lineIdx": 18,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 61,
      "to": 66
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 61,
      "to": 66
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 143,
      "to": 144
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 143,
      "to": 144
    }
  }, {
    "left": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 58,
      "from": 21,
      "to": 33
    },
    "right": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 68,
      "from": 21,
      "to": 33
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 90,
      "to": 99
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 90,
      "to": 99
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 73,
      "from": 2,
      "to": 4
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 83,
      "from": 2,
      "to": 4
    }
  }, {
    "left": {
      "line": "    return checked.right();",
      "lineIdx": 98,
      "from": 11,
      "to": 18
    },
    "right": {
      "line": "    return checked.right();",
      "lineIdx": 108,
      "from": 11,
      "to": 18
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 41,
      "to": 46
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 41,
      "to": 46
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 59,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 69,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 83,
      "to": 89
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 83,
      "to": 89
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 33,
      "to": 38
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 33,
      "to": 38
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 27,
      "to": 31
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 27,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 26,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 27,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 61,
      "to": 67
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 61,
      "to": 67
    }
  }, {
    "left": {
      "line": ": mMatches(aMatches)",
      "lineIdx": 16,
      "from": 11,
      "to": 19
    },
    "right": {
      "line": ": mMatches(aMatches)",
      "lineIdx": 17,
      "from": 11,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 38,
      "to": 42
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 38,
      "to": 42
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 37,
      "to": 45
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 37,
      "to": 45
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 96,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 106,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 85,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 95,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "    return match.mRight;",
      "lineIdx": 71,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "    return match.mRight;",
      "lineIdx": 81,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 24,
      "from": 15,
      "to": 32
    },
    "right": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 25,
      "from": 15,
      "to": 32
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 48,
      "to": 52
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 48,
      "to": 52
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 24,
      "from": 6,
      "to": 13
    },
    "right": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 25,
      "from": 6,
      "to": 13
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 14,
      "to": 22
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 14,
      "to": 22
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 51,
      "to": 56
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 51,
      "to": 56
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 14,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 14,
      "to": 20
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 14,
      "to": 20
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 24,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 25,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 84,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 94,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 7,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 7,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 53,
      "to": 56
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 53,
      "to": 56
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 47,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 48,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 95,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 105,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 37,
      "to": 48
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 37,
      "to": 48
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    return checked.right();",
      "lineIdx": 98,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return checked.right();",
      "lineIdx": 108,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 95,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 105,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 22,
      "to": 25
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 22,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 29,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 30,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 84,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 94,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 91,
      "to": 100
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 91,
      "to": 100
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 11,
      "to": 31
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 11,
      "to": 31
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 50,
      "to": 53
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 50,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 14,
      "to": 30
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 14,
      "to": 30
    }
  }, {
    "left": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 89,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 99,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 41,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 42,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 51,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 52,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 29,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 30,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 89,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 99,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 24,
      "from": 34,
      "to": 42
    },
    "right": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 25,
      "from": 34,
      "to": 42
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 31,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 32,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 60,
      "to": 66
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 60,
      "to": 66
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 47,
      "to": 50
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 47,
      "to": 50
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 39,
      "from": 6,
      "to": 17
    },
    "right": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 40,
      "from": 6,
      "to": 17
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 50,
      "from": 24,
      "to": 32
    },
    "right": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 51,
      "from": 24,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 46,
      "to": 53
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 46,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 98,
      "to": 111
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 98,
      "to": 111
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 48,
      "to": 57
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 48,
      "to": 57
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 116,
      "to": 121
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 116,
      "to": 121
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 5,
      "to": 11
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 5,
      "to": 11
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 73,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 83,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 112,
      "to": 120
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 112,
      "to": 120
    }
  }, {
    "left": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 47,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 48,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 20,
      "from": 2,
      "to": 13
    },
    "right": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 21,
      "from": 2,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 84,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 94,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 61,
      "to": 71
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 61,
      "to": 71
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 120,
      "to": 121
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 120,
      "to": 121
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 41,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 42,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 41,
      "to": 58
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 41,
      "to": 58
    }
  }, {
    "left": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/diffside.h\"",
      "lineIdx": 9,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 26,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 27,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 65,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  });",
      "lineIdx": 75,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 41,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 42,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 20,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 21,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 51,
      "to": 56
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 51,
      "to": 56
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 56,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 66,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 20,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 21,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 47,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 48,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 28,
      "to": 33
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 28,
      "to": 33
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 130,
      "to": 131
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 130,
      "to": 131
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 153,
      "to": 154
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 153,
      "to": 154
    }
  }, {
    "left": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 26,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 27,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 45,
      "to": 58
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 45,
      "to": 58
    }
  }, {
    "left": {
      "line": "    return match.mRight;",
      "lineIdx": 71,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    return match.mRight;",
      "lineIdx": 81,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    return checked.right();",
      "lineIdx": 98,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    return checked.right();",
      "lineIdx": 108,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 73,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 83,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 58,
      "from": 9,
      "to": 20
    },
    "right": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 68,
      "from": 9,
      "to": 20
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 73,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 83,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 50,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 51,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 66,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 76,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 28,
      "to": 33
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 28,
      "to": 33
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 89,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 99,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 20,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 21,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 84,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 94,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 39,
      "to": 47
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 39,
      "to": 47
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": ", mRightText(aRightText)",
      "lineIdx": 18,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": ", mRightText(aRightText)",
      "lineIdx": 19,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 119,
      "to": 120
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 119,
      "to": 120
    }
  }, {
    "left": {
      "line": "    return match.mLeft;",
      "lineIdx": 64,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    return match.mLeft;",
      "lineIdx": 74,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 108,
      "to": 115
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 108,
      "to": 115
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 41,
      "to": 45
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 41,
      "to": 45
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 14,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  });",
      "lineIdx": 72,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  });",
      "lineIdx": 82,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 66,
      "to": 74
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 66,
      "to": 74
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 34,
      "to": 38
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 34,
      "to": 38
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 93,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 103,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 152,
      "to": 153
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 152,
      "to": 153
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 122,
      "to": 123
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 122,
      "to": 123
    }
  }, {
    "left": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 89,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 99,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 95,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 105,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 141,
      "to": 146
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 141,
      "to": 146
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 39,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 40,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": ", mLeftText(aLeftText)",
      "lineIdx": 17,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": ", mLeftText(aLeftText)",
      "lineIdx": 18,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 78,
      "to": 86
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 78,
      "to": 86
    }
  }, {
    "left": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 96,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 106,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 114,
      "to": 115
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 114,
      "to": 115
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 80,
      "to": 88
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 80,
      "to": 88
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 14,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 26,
      "to": 34
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 26,
      "to": 34
    }
  }, {
    "left": {
      "line": "    return checked.right();",
      "lineIdx": 98,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    return checked.right();",
      "lineIdx": 108,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 33,
      "to": 37
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 33,
      "to": 37
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 29,
      "from": 44,
      "to": 47
    },
    "right": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 30,
      "from": 44,
      "to": 47
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 99,
      "to": 104
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 99,
      "to": 104
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 28,
      "to": 37
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 28,
      "to": 37
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 73,
      "to": 83
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 73,
      "to": 83
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 29,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 30,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 24,
      "from": 50,
      "to": 55
    },
    "right": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 25,
      "from": 50,
      "to": 55
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 73,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 83,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 38,
      "to": 40
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 38,
      "to": 40
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 39,
      "from": 19,
      "to": 36
    },
    "right": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 40,
      "from": 19,
      "to": 36
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 29,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 30,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 24,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 25,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 17,
      "to": 25
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 17,
      "to": 25
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 66,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 76,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 84,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 94,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 103,
      "to": 111
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 103,
      "to": 111
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 13,
      "to": 16
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 13,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 19,
      "to": 27
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 19,
      "to": 27
    }
  }, {
    "left": {
      "line": ": mMatches(aMatches)",
      "lineIdx": 16,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": ": mMatches(aMatches)",
      "lineIdx": 17,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 75,
      "to": 78
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 75,
      "to": 78
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 73,
      "to": 82
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 73,
      "to": 82
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 73,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 83,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 73,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(rights) == false)",
      "lineIdx": 83,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 96,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 106,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 53,
      "to": 66
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 53,
      "to": 66
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 24,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 25,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 20,
      "from": 14,
      "to": 23
    },
    "right": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 21,
      "from": 14,
      "to": 23
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 34,
      "to": 41
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 34,
      "to": 41
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 2,
      "to": 4
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 2,
      "to": 4
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 27,
      "to": 44
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 27,
      "to": 44
    }
  }, {
    "left": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 19,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 20,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 12,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 13,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 84,
      "from": 57,
      "to": 66
    },
    "right": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 94,
      "from": 57,
      "to": 66
    }
  }, {
    "left": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 10,
      "to": 27
    },
    "right": {
      "line": "#include \"onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 10,
      "to": 27
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 84,
      "from": 19,
      "to": 36
    },
    "right": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 94,
      "from": 19,
      "to": 36
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 17,
      "to": 27
    },
    "right": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 17,
      "to": 27
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 50,
      "from": 49,
      "to": 53
    },
    "right": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 51,
      "from": 49,
      "to": 53
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 30,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 31,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 95,
      "from": 2,
      "to": 4
    },
    "right": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 105,
      "from": 2,
      "to": 4
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 57,
      "to": 59
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 57,
      "to": 59
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 108,
      "to": 109
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 108,
      "to": 109
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 29,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "const QString &OneToOneAlignment::rightLine(int i) const",
      "lineIdx": 30,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 47,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 48,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 37,
      "to": 42
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 37,
      "to": 42
    }
  }, {
    "left": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 20,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 21,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 47,
      "to": 49
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 47,
      "to": 49
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 18,
      "to": 35
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 18,
      "to": 35
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 70,
      "to": 74
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 70,
      "to": 74
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 14,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 6,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 0,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 40,
      "to": 45
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 40,
      "to": 45
    }
  }, {
    "left": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 19,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 20,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 41,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 42,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 89,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 99,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 44,
      "to": 61
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 44,
      "to": 61
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 11,
      "to": 31
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 11,
      "to": 31
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 55,
      "to": 61
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 55,
      "to": 61
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 26,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 27,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 119,
      "to": 126
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 119,
      "to": 126
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 14,
      "to": 20
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 14,
      "to": 20
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 14,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 88,
      "to": 93
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 88,
      "to": 93
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 100,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 110,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 82,
      "to": 89
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 82,
      "to": 89
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 147,
      "to": 154
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 147,
      "to": 154
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 117,
      "to": 127
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 117,
      "to": 127
    }
  }, {
    "left": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 19,
      "from": 24,
      "to": 31
    },
    "right": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 20,
      "from": 24,
      "to": 31
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 67,
      "to": 76
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 67,
      "to": 76
    }
  }, {
    "left": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 96,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 106,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 11,
      "to": 31
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 11,
      "to": 31
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 50,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 51,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "    return match.mRight;",
      "lineIdx": 71,
      "from": 17,
      "to": 23
    },
    "right": {
      "line": "    return match.mRight;",
      "lineIdx": 81,
      "from": 17,
      "to": 23
    }
  }, {
    "left": {
      "line": ", mRightText(aRightText)",
      "lineIdx": 18,
      "from": 13,
      "to": 23
    },
    "right": {
      "line": ", mRightText(aRightText)",
      "lineIdx": 19,
      "from": 13,
      "to": 23
    }
  }, {
    "left": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 26,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return mLeftLines.at(i);",
      "lineIdx": 27,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 13,
      "to": 16
    },
    "right": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 13,
      "to": 16
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 59,
      "to": 64
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 59,
      "to": 64
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 13,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 14,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 58,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 68,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 58,
      "to": 68
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 58,
      "to": 68
    }
  }, {
    "left": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 95,
      "from": 6,
      "to": 13
    },
    "right": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 105,
      "from": 6,
      "to": 13
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 50,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 51,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 154,
      "to": 155
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 154,
      "to": 155
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 13,
      "to": 16
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 13,
      "to": 16
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 31,
      "from": 21,
      "to": 23
    },
    "right": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 32,
      "from": 21,
      "to": 23
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 49,
      "to": 52
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 49,
      "to": 52
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 27,
      "to": 35
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 27,
      "to": 35
    }
  }, {
    "left": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 95,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 105,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 96,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 106,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 19,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 20,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 27,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 28,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 62,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 72,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 39,
      "from": 38,
      "to": 43
    },
    "right": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 40,
      "from": 38,
      "to": 43
    }
  }, {
    "left": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 47,
      "from": 39,
      "to": 47
    },
    "right": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 48,
      "from": 39,
      "to": 47
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 125,
      "to": 133
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 125,
      "to": 133
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 122,
      "to": 131
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 122,
      "to": 131
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 111,
      "to": 112
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 111,
      "to": 112
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 7,
      "to": 19
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 7,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 46,
      "to": 49
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 46,
      "to": 49
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "    return checked.right();",
      "lineIdx": 98,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    return checked.right();",
      "lineIdx": 108,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  } else {",
      "lineIdx": 97,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  } else {",
      "lineIdx": 107,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 24,
      "to": 32
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 24,
      "to": 32
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 137,
      "to": 138
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 137,
      "to": 138
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 7,
      "to": 23
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 7,
      "to": 23
    }
  }, {
    "left": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 47,
      "from": 33,
      "to": 38
    },
    "right": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 48,
      "from": 33,
      "to": 38
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 33,
      "to": 40
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 33,
      "to": 40
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 0,
      "to": 17
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 0,
      "to": 17
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 12,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 13,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 78,
      "to": 88
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 78,
      "to": 88
    }
  }, {
    "left": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 89,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 99,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 48,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 49,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    return match.mLeft;",
      "lineIdx": 64,
      "from": 17,
      "to": 22
    },
    "right": {
      "line": "    return match.mLeft;",
      "lineIdx": 74,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 104,
      "to": 105
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 104,
      "to": 105
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 33,
      "to": 37
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 33,
      "to": 37
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 26,
      "to": 33
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 26,
      "to": 33
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 17,
      "to": 24
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 17,
      "to": 24
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 105,
      "to": 106
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 105,
      "to": 106
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 122,
      "to": 129
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 122,
      "to": 129
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 94,
      "to": 101
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 94,
      "to": 101
    }
  }, {
    "left": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 31,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 32,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 20,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 21,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 46,
      "to": 59
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 46,
      "to": 59
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 95,
      "from": 14,
      "to": 20
    },
    "right": {
      "line": "  if (checked.isLeft()) {",
      "lineIdx": 105,
      "from": 14,
      "to": 20
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 5,
      "to": 11
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 5,
      "to": 11
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 14,
      "to": 19
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 14,
      "to": 19
    }
  }, {
    "left": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 20,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": ", mRightLines(LineUtils::toLines(aRightText))",
      "lineIdx": 21,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 24,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 25,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 37,
      "to": 45
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 37,
      "to": 45
    }
  }, {
    "left": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 46,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  return mLeftText == other.mLeftText && mRightText == other.mRightText &&",
      "lineIdx": 47,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 44,
      "from": 35,
      "to": 40
    },
    "right": {
      "line": "bool OneToOneAlignment::operator==(const OneToOneAlignment &other) const",
      "lineIdx": 45,
      "from": 35,
      "to": 40
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 78,
      "to": 91
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 78,
      "to": 91
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 76,
      "from": 36,
      "to": 49
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mLeftText; } ),",
      "lineIdx": 86,
      "from": 36,
      "to": 49
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 127,
      "to": 128
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 127,
      "to": 128
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 15,
      "to": 32
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 15,
      "to": 32
    }
  }, {
    "left": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 77,
      "from": 27,
      "to": 32
    },
    "right": {
      "line": "                [leftText](const QString& leftMatchText) { return leftText == leftMatchText; }) == false)",
      "lineIdx": 87,
      "from": 27,
      "to": 32
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 122,
      "to": 129
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 122,
      "to": 129
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 58,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 68,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 31,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return mRightLines.at(i);",
      "lineIdx": 32,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 19,
      "from": 2,
      "to": 12
    },
    "right": {
      "line": ", mLeftLines(LineUtils::toLines(aLeftText))",
      "lineIdx": 20,
      "from": 2,
      "to": 12
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 60,
      "to": 65
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 60,
      "to": 65
    }
  }, {
    "left": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"../mix/functional.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 65,
      "to": 68
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 65,
      "to": 68
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 89,
      "from": 9,
      "to": 20
    },
    "right": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 99,
      "from": 9,
      "to": 20
    }
  }, {
    "left": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 58,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  return fromTrusted(boxedMatches, leftText, rightText);",
      "lineIdx": 68,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 91,
      "to": 97
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 91,
      "to": 97
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 139,
      "to": 140
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 139,
      "to": 140
    }
  }, {
    "left": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 39,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 40,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 47,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 48,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 34,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "const QString &OneToOneAlignment::line(DiffSide side, int i) const",
      "lineIdx": 35,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 39,
      "to": 44
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 39,
      "to": 44
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 139,
      "to": 140
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 139,
      "to": 140
    }
  }, {
    "left": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 50,
      "from": 33,
      "to": 38
    },
    "right": {
      "line": "bool OneToOneAlignment::contains(const LinePair& pair) const",
      "lineIdx": 51,
      "from": 33,
      "to": 38
    }
  }, {
    "left": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 89,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  return fromTrusted({}, \"\", \"\");",
      "lineIdx": 99,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 78,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on left is not not conclusive\");",
      "lineIdx": 88,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 66,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 76,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 80,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  if(forall( map(aMatches, [](const OneToOneMatch& match) { return match.mRightText; } ),",
      "lineIdx": 90,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 14,
      "to": 27
    },
    "right": {
      "line": "#include \"mix/setoperations.h\"",
      "lineIdx": 8,
      "from": 14,
      "to": 27
    }
  }, {
    "left": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 47,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "      toUSet(mMatches) == toUSet(other.mMatches);",
      "lineIdx": 48,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 134,
      "to": 135
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 134,
      "to": 135
    }
  }, {
    "left": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 70,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  vector<int> rights = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 80,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 24,
      "from": 43,
      "to": 46
    },
    "right": {
      "line": "const QString &OneToOneAlignment::leftLine(int i) const",
      "lineIdx": 25,
      "from": 43,
      "to": 46
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 116,
      "to": 121
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 116,
      "to": 121
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 74,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "    return displayableErrorLeft(\"right side is not unique or empty\");",
      "lineIdx": 84,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 10,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 67,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    return displayableErrorLeft(\"left side is not unique or empty\");",
      "lineIdx": 77,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 94,
      "from": 56,
      "to": 69
    },
    "right": {
      "line": "  Either<DisplayableError, OneToOneAlignment> checked = fromUntrusted(aMatches, leftText, rightText);",
      "lineIdx": 104,
      "from": 56,
      "to": 69
    }
  }, {
    "left": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 63,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  vector<int> lefts = map(aMatches, [](const OneToOneMatch& match) {",
      "lineIdx": 73,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 66,
      "from": 2,
      "to": 4
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 76,
      "from": 2,
      "to": 4
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 36,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? leftLine(i) : rightLine(i);",
      "lineIdx": 37,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 84,
      "from": 37,
      "to": 45
    },
    "right": {
      "line": "  return makeRight(OneToOneAlignment(aMatches, leftText, rightText));",
      "lineIdx": 94,
      "from": 37,
      "to": 45
    }
  }, {
    "left": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 66,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  if(isUniqueOrEmpty(lefts) == false)",
      "lineIdx": 76,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 156,
      "to": 165
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 156,
      "to": 165
    }
  }, {
    "left": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 61,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "Either<DisplayableError, OneToOneAlignment> OneToOneAlignment::fromUntrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 71,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 41,
      "from": 27,
      "to": 31
    },
    "right": {
      "line": "  return side == DiffSide::LEFT ? mLeftLines : mRightLines;",
      "lineIdx": 42,
      "from": 27,
      "to": 31
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 92,
      "from": 137,
      "to": 138
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromTrusted(const vector<OneToOneMatch> &aMatches, const QString &leftText, const QString &rightText)",
      "lineIdx": 102,
      "from": 137,
      "to": 138
    }
  }, {
    "left": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 82,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "    return displayableErrorLeft(\"text on right is not not conclusive\");",
      "lineIdx": 92,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 39,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "const QStringList& OneToOneAlignment::lines(DiffSide side) const",
      "lineIdx": 40,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 81,
      "from": 81,
      "to": 95
    },
    "right": {
      "line": "                [rightText](const QString& rightMatchText) { return rightText == rightMatchText; }) == false)",
      "lineIdx": 91,
      "from": 81,
      "to": 95
    }
  }, {
    "left": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 57,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  auto boxedMatches = map(matches, [&leftText, &rightText](const std::pair<int, int>& m) { return OneToOneMatch(leftText, rightText, m.first, m.second);});",
      "lineIdx": 67,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 15,
      "from": 50,
      "to": 63
    },
    "right": {
      "line": "OneToOneAlignment::OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& aLeftText, const QString& aRightText)",
      "lineIdx": 16,
      "from": 50,
      "to": 63
    }
  }, {
    "left": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 55,
      "from": 106,
      "to": 114
    },
    "right": {
      "line": "OneToOneAlignment OneToOneAlignment::fromInts(const vector<std::pair<int, int> >& matches, const QString &leftText, const QString &rightText)",
      "lineIdx": 65,
      "from": 106,
      "to": 114
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 5,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 96,
      "from": 17,
      "to": 21
    },
    "right": {
      "line": "    FAIL(checked.left().mMsg);",
      "lineIdx": 106,
      "from": 17,
      "to": 21
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 25,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 26,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 52,
      "from": 95,
      "to": 103
    },
    "right": {
      "line": "  return std::find(mMatches.begin(), mMatches.end(), OneToOneMatch(mLeftText, mRightText, pair.mLeftIdx, pair.mRightIdx)) != mMatches.end();",
      "lineIdx": 55,
      "from": 95,
      "to": 103
    }
  }]
}