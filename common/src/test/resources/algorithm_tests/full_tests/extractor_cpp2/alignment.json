{
  "matches": [{
    "left": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 16,
      "to": 20
    },
    "right": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 16,
      "to": 20
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 15,
      "to": 28
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 15,
      "to": 28
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 18,
      "to": 26
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 18,
      "to": 26
    }
  }, {
    "left": {
      "line": "  unsigned i = 0;",
      "lineIdx": 70,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  unsigned i = 0;",
      "lineIdx": 70,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 32,
      "to": 45
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 32,
      "to": 45
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "    run();",
      "lineIdx": 91,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    run();",
      "lineIdx": 91,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 92,
      "to": 105
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 92,
      "to": 105
    }
  }, {
    "left": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 15,
      "to": 19
    },
    "right": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 15,
      "to": 19
    }
  }, {
    "left": {
      "line": "    //TODO logging",
      "lineIdx": 94,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "    //TODO logging",
      "lineIdx": 94,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 7,
      "to": 12
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 7,
      "to": 12
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 104,
      "to": 105
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 104,
      "to": 105
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 18,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 18,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include <QFile>",
      "lineIdx": 12,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QFile>",
      "lineIdx": 12,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 47,
      "to": 54
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 47,
      "to": 54
    }
  }, {
    "left": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "      stream << data;",
      "lineIdx": 31,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      stream << data;",
      "lineIdx": 31,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "    ++i;",
      "lineIdx": 79,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "    ++i;",
      "lineIdx": 79,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 28,
      "to": 32
    },
    "right": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 28,
      "to": 32
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 109,
      "to": 110
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 109,
      "to": 110
    }
  }, {
    "left": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  {",
      "lineIdx": 29,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  {",
      "lineIdx": 29,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 17,
      "to": 24
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 17,
      "to": 24
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 39,
      "to": 48
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 39,
      "to": 48
    }
  }, {
    "left": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 91,
      "to": 95
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 91,
      "to": 95
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 14,
      "to": 30
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 14,
      "to": 30
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 116,
      "to": 117
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 116,
      "to": 117
    }
  }, {
    "left": {
      "line": "  QFile file(path);",
      "lineIdx": 27,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  QFile file(path);",
      "lineIdx": 27,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 69,
      "to": 86
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 69,
      "to": 86
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 46,
      "to": 50
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 46,
      "to": 50
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 10,
      "to": 15
    },
    "right": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 10,
      "to": 15
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "void run()",
      "lineIdx": 36,
      "from": 5,
      "to": 8
    },
    "right": {
      "line": "void run()",
      "lineIdx": 36,
      "from": 5,
      "to": 8
    }
  }, {
    "left": {
      "line": "      else {",
      "lineIdx": 50,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "      else {",
      "lineIdx": 50,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  unsigned i = 0;",
      "lineIdx": 70,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  unsigned i = 0;",
      "lineIdx": 70,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 78,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 78,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 46,
      "to": 49
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 46,
      "to": 49
    }
  }, {
    "left": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 15,
      "to": 22
    },
    "right": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 15,
      "to": 22
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 70,
      "to": 80
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 70,
      "to": 80
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 106,
      "to": 109
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 106,
      "to": 109
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 89,
      "to": 92
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 89,
      "to": 92
    }
  }, {
    "left": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 100,
      "to": 101
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 35,
      "to": 39
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 35,
      "to": 39
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 32,
      "to": 44
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 32,
      "to": 44
    }
  }, {
    "left": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    //TODO logging",
      "lineIdx": 94,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    //TODO logging",
      "lineIdx": 94,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 161,
      "to": 162
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 161,
      "to": 162
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 51,
      "to": 62
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 51,
      "to": 62
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 31,
      "to": 37
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 31,
      "to": 37
    }
  }, {
    "left": {
      "line": "  QFile file(path);",
      "lineIdx": 27,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "  QFile file(path);",
      "lineIdx": 27,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "    }",
      "lineIdx": 59,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    }",
      "lineIdx": 59,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 111,
      "to": 112
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 111,
      "to": 112
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 26,
      "to": 33
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 26,
      "to": 33
    }
  }, {
    "left": {
      "line": "#include <iostream>",
      "lineIdx": 9,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "#include <iostream>",
      "lineIdx": 9,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    ++i;",
      "lineIdx": 79,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "    ++i;",
      "lineIdx": 79,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  vector<QString> testingList;",
      "lineIdx": 69,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<QString> testingList;",
      "lineIdx": 69,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  QFile file(path);",
      "lineIdx": 27,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  QFile file(path);",
      "lineIdx": 27,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 47,
      "to": 50
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 47,
      "to": 50
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 117,
      "to": 118
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 117,
      "to": 118
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 36,
      "to": 39
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 36,
      "to": 39
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 52,
      "to": 57
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 52,
      "to": 57
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 66,
      "to": 73
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 66,
      "to": 73
    }
  }, {
    "left": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 6,
      "to": 18
    },
    "right": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 6,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  unsigned i = 0;",
      "lineIdx": 70,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  unsigned i = 0;",
      "lineIdx": 70,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 13,
      "to": 25
    },
    "right": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 13,
      "to": 25
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 18,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 18,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  vector<QString> trainingList;",
      "lineIdx": 68,
      "from": 18,
      "to": 30
    },
    "right": {
      "line": "  vector<QString> trainingList;",
      "lineIdx": 68,
      "from": 18,
      "to": 30
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 81,
      "to": 85
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 81,
      "to": 85
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  QFile file(path);",
      "lineIdx": 27,
      "from": 13,
      "to": 17
    },
    "right": {
      "line": "  QFile file(path);",
      "lineIdx": 27,
      "from": 13,
      "to": 17
    }
  }, {
    "left": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 8,
      "to": 15
    },
    "right": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 8,
      "to": 15
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 2,
      "to": 4
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 2,
      "to": 4
    }
  }, {
    "left": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 39,
      "to": 46
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 39,
      "to": 46
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  unsigned i = 0;",
      "lineIdx": 70,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  unsigned i = 0;",
      "lineIdx": 70,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include <QDir>",
      "lineIdx": 14,
      "from": 10,
      "to": 14
    },
    "right": {
      "line": "#include <QDir>",
      "lineIdx": 14,
      "from": 10,
      "to": 14
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 32,
      "to": 35
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 32,
      "to": 35
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 9,
      "to": 19
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 9,
      "to": 19
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 113,
      "to": 114
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 113,
      "to": 114
    }
  }, {
    "left": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 106,
      "to": 107
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 106,
      "to": 107
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 32,
      "to": 46
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 32,
      "to": 46
    }
  }, {
    "left": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 47,
      "to": 51
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 47,
      "to": 51
    }
  }, {
    "left": {
      "line": "  vector<QString> testingList;",
      "lineIdx": 69,
      "from": 9,
      "to": 16
    },
    "right": {
      "line": "  vector<QString> testingList;",
      "lineIdx": 69,
      "from": 9,
      "to": 16
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 131,
      "to": 132
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 131,
      "to": 132
    }
  }, {
    "left": {
      "line": "    run();",
      "lineIdx": 91,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    run();",
      "lineIdx": 91,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 118,
      "to": 119
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 118,
      "to": 119
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 25,
      "to": 32
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 25,
      "to": 32
    }
  }, {
    "left": {
      "line": "    initExceptionHandler();",
      "lineIdx": 90,
      "from": 4,
      "to": 24
    },
    "right": {
      "line": "    initExceptionHandler();",
      "lineIdx": 90,
      "from": 4,
      "to": 24
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 80,
      "to": 84
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 80,
      "to": 84
    }
  }, {
    "left": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 44,
      "to": 49
    },
    "right": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 44,
      "to": 49
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 59,
      "to": 71
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 59,
      "to": 71
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 19,
      "to": 26
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 19,
      "to": 26
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 110,
      "to": 111
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 110,
      "to": 111
    }
  }, {
    "left": {
      "line": "  vector<QString> trainingList;",
      "lineIdx": 68,
      "from": 9,
      "to": 16
    },
    "right": {
      "line": "  vector<QString> trainingList;",
      "lineIdx": 68,
      "from": 9,
      "to": 16
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 100,
      "to": 112
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 100,
      "to": 112
    }
  }, {
    "left": {
      "line": "void run()",
      "lineIdx": 36,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "void run()",
      "lineIdx": 36,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    //TODO logging",
      "lineIdx": 94,
      "from": 6,
      "to": 10
    },
    "right": {
      "line": "    //TODO logging",
      "lineIdx": 94,
      "from": 6,
      "to": 10
    }
  }, {
    "left": {
      "line": "  vector<QString> testingList;",
      "lineIdx": 69,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  vector<QString> testingList;",
      "lineIdx": 69,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 22,
      "to": 24
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 22,
      "to": 24
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 13,
      "to": 16
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 13,
      "to": 16
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 50,
      "to": 52
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 50,
      "to": 52
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 11,
      "to": 20
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 11,
      "to": 20
    }
  }, {
    "left": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "      else {",
      "lineIdx": 50,
      "from": 6,
      "to": 10
    },
    "right": {
      "line": "      else {",
      "lineIdx": 50,
      "from": 6,
      "to": 10
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 80,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 80,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 43,
      "to": 46
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 43,
      "to": 46
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 107,
      "to": 116
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 107,
      "to": 116
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 39,
      "to": 43
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 39,
      "to": 43
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 83,
      "to": 84
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 54,
      "to": 57
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 54,
      "to": 57
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 85,
      "to": 88
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 85,
      "to": 88
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 17,
      "to": 20
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 17,
      "to": 20
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "      stream << data;",
      "lineIdx": 31,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "      stream << data;",
      "lineIdx": 31,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 27,
      "to": 30
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 27,
      "to": 30
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 75,
      "to": 84
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 75,
      "to": 84
    }
  }, {
    "left": {
      "line": "  vector<QString> testingList;",
      "lineIdx": 69,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  vector<QString> testingList;",
      "lineIdx": 69,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "void run()",
      "lineIdx": 36,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "void run()",
      "lineIdx": 36,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 13,
      "to": 24
    },
    "right": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 13,
      "to": 24
    }
  }, {
    "left": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "void run()",
      "lineIdx": 36,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void run()",
      "lineIdx": 36,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  vector<QString> trainingList;",
      "lineIdx": 68,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  vector<QString> trainingList;",
      "lineIdx": 68,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 8,
      "to": 13
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 8,
      "to": 13
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 28,
      "to": 36
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 28,
      "to": 36
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 15,
      "to": 23
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 15,
      "to": 23
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 69,
      "to": 82
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 69,
      "to": 82
    }
  }, {
    "left": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 55,
      "to": 61
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 55,
      "to": 61
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 6,
      "to": 13
    },
    "right": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 6,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 16,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 16,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "#include <QTextStream>",
      "lineIdx": 13,
      "from": 10,
      "to": 21
    },
    "right": {
      "line": "#include <QTextStream>",
      "lineIdx": 13,
      "from": 10,
      "to": 21
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include <QFile>",
      "lineIdx": 12,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "#include <QFile>",
      "lineIdx": 12,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 18,
      "to": 27
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 18,
      "to": 27
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 65,
      "to": 70
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 65,
      "to": 70
    }
  }, {
    "left": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 66,
      "to": 87
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 66,
      "to": 87
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> testSamples;",
      "lineIdx": 67,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  unordered_set<MLSample> testSamples;",
      "lineIdx": 67,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 25,
      "to": 29
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 25,
      "to": 29
    }
  }, {
    "left": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 35,
      "to": 48
    },
    "right": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 35,
      "to": 48
    }
  }, {
    "left": {
      "line": "    return 0;",
      "lineIdx": 92,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "    return 0;",
      "lineIdx": 92,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 33,
      "to": 37
    },
    "right": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 33,
      "to": 37
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 15,
      "to": 28
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 15,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include <iostream>",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <iostream>",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 18,
      "to": 35
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 18,
      "to": 35
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 14,
      "to": 21
    },
    "right": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 14,
      "to": 21
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 32,
      "to": 38
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 32,
      "to": 38
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "#include <QTextStream>",
      "lineIdx": 13,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QTextStream>",
      "lineIdx": 13,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 16,
      "from": 10,
      "to": 23
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 16,
      "from": 10,
      "to": 23
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 42,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 42,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> testSamples;",
      "lineIdx": 67,
      "from": 26,
      "to": 37
    },
    "right": {
      "line": "  unordered_set<MLSample> testSamples;",
      "lineIdx": 67,
      "from": 26,
      "to": 37
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 16,
      "to": 24
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 16,
      "to": 24
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "    ++i;",
      "lineIdx": 79,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    ++i;",
      "lineIdx": 79,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 22,
      "to": 31
    },
    "right": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 22,
      "to": 31
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "      stream << data;",
      "lineIdx": 31,
      "from": 16,
      "to": 20
    },
    "right": {
      "line": "      stream << data;",
      "lineIdx": 31,
      "from": 16,
      "to": 20
    }
  }, {
    "left": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 16,
      "to": 25
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 16,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "#include <QTextStream>",
      "lineIdx": 13,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QTextStream>",
      "lineIdx": 13,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "      }",
      "lineIdx": 58,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "      }",
      "lineIdx": 58,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 7,
      "to": 21
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 7,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 14,
      "to": 20
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 14,
      "to": 20
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 45,
      "to": 48
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 45,
      "to": 48
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 8,
      "to": 14
    },
    "right": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 8,
      "to": 14
    }
  }, {
    "left": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    } else {",
      "lineIdx": 75,
      "from": 6,
      "to": 10
    },
    "right": {
      "line": "    } else {",
      "lineIdx": 75,
      "from": 6,
      "to": 10
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 39,
      "to": 47
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 39,
      "to": 47
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  vector<QString> trainingList;",
      "lineIdx": 68,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<QString> trainingList;",
      "lineIdx": 68,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 14,
      "to": 20
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 14,
      "to": 20
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 105,
      "to": 106
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 105,
      "to": 106
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 35,
      "to": 43
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 35,
      "to": 43
    }
  }, {
    "left": {
      "line": "#include <QFile>",
      "lineIdx": 12,
      "from": 10,
      "to": 15
    },
    "right": {
      "line": "#include <QFile>",
      "lineIdx": 12,
      "from": 10,
      "to": 15
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 32,
      "to": 43
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 32,
      "to": 43
    }
  }, {
    "left": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 6,
      "to": 11
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 6,
      "to": 11
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 27,
      "to": 36
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 27,
      "to": 36
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 86,
      "to": 89
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 86,
      "to": 89
    }
  }, {
    "left": {
      "line": "    initExceptionHandler();",
      "lineIdx": 90,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "    initExceptionHandler();",
      "lineIdx": 90,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 53,
      "to": 59
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 53,
      "to": 59
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 6,
      "to": 10
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 6,
      "to": 10
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 47,
      "to": 51
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 47,
      "to": 51
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 21,
      "to": 27
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 21,
      "to": 27
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  QFile file(path);",
      "lineIdx": 27,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  QFile file(path);",
      "lineIdx": 27,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "    initExceptionHandler();",
      "lineIdx": 90,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    initExceptionHandler();",
      "lineIdx": 90,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 8,
      "to": 15
    },
    "right": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 8,
      "to": 15
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 28,
      "to": 34
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 28,
      "to": 34
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 58,
      "to": 70
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 58,
      "to": 70
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 44,
      "to": 48
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 44,
      "to": 48
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 45,
      "to": 50
    },
    "right": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 45,
      "to": 50
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 11,
      "to": 16
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 11,
      "to": 16
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 116,
      "to": 117
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 116,
      "to": 117
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 17,
      "to": 21
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 17,
      "to": 21
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 9,
      "to": 19
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 9,
      "to": 19
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 42,
      "to": 47
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 42,
      "to": 47
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 151,
      "to": 160
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 151,
      "to": 160
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 15,
      "to": 28
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 15,
      "to": 28
    }
  }, {
    "left": {
      "line": "    //TODO logging",
      "lineIdx": 94,
      "from": 11,
      "to": 18
    },
    "right": {
      "line": "    //TODO logging",
      "lineIdx": 94,
      "from": 11,
      "to": 18
    }
  }, {
    "left": {
      "line": "  vector<QString> trainingList;",
      "lineIdx": 68,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  vector<QString> trainingList;",
      "lineIdx": 68,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 50,
      "to": 58
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 50,
      "to": 58
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 13,
      "to": 29
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 13,
      "to": 29
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 58,
      "to": 69
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 58,
      "to": 69
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 85,
      "to": 86
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 16,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 16,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 16,
      "to": 25
    },
    "right": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 16,
      "to": 25
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 60,
      "to": 63
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 60,
      "to": 63
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 27,
      "to": 42
    },
    "right": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 27,
      "to": 42
    }
  }, {
    "left": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 77,
      "to": 80
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 77,
      "to": 80
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 25,
      "to": 31
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 25,
      "to": 31
    }
  }, {
    "left": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 27,
      "to": 37
    },
    "right": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 27,
      "to": 37
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 16,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 16,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  try {",
      "lineIdx": 89,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  try {",
      "lineIdx": 89,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 26,
      "to": 44
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 26,
      "to": 44
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 38,
      "to": 45
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 38,
      "to": 45
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 35,
      "to": 45
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 35,
      "to": 45
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 48,
      "to": 55
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 48,
      "to": 55
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include <QDir>",
      "lineIdx": 14,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QDir>",
      "lineIdx": 14,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 99,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 99,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 85,
      "to": 93
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 85,
      "to": 93
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 20,
      "to": 26
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 20,
      "to": 26
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 50,
      "to": 55
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 50,
      "to": 55
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> testSamples;",
      "lineIdx": 67,
      "from": 16,
      "to": 24
    },
    "right": {
      "line": "  unordered_set<MLSample> testSamples;",
      "lineIdx": 67,
      "from": 16,
      "to": 24
    }
  }, {
    "left": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 26,
      "to": 35
    },
    "right": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 26,
      "to": 35
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 114,
      "to": 115
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 114,
      "to": 115
    }
  }, {
    "left": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 12,
      "to": 33
    },
    "right": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 12,
      "to": 33
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 51,
      "to": 59
    },
    "right": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 51,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 27,
      "to": 43
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 27,
      "to": 43
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 87,
      "to": 99
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 87,
      "to": 99
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 72,
      "to": 82
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 72,
      "to": 82
    }
  }, {
    "left": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 34,
      "to": 38
    },
    "right": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 34,
      "to": 38
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 38,
      "to": 44
    },
    "right": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 38,
      "to": 44
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    ++i;",
      "lineIdx": 79,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    ++i;",
      "lineIdx": 79,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 73,
      "to": 79
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 73,
      "to": 79
    }
  }, {
    "left": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 64,
      "to": 69
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 64,
      "to": 69
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 14,
      "to": 26
    },
    "right": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 14,
      "to": 26
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 26,
      "to": 38
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 26,
      "to": 38
    }
  }, {
    "left": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 43,
      "to": 49
    },
    "right": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 43,
      "to": 49
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 57,
      "to": 68
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 57,
      "to": 68
    }
  }, {
    "left": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 31,
      "to": 48
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 31,
      "to": 48
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 32,
      "to": 36
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 32,
      "to": 36
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 47,
      "to": 60
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 47,
      "to": 60
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 22,
      "to": 29
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 22,
      "to": 29
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 60,
      "to": 79
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 60,
      "to": 79
    }
  }, {
    "left": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "      stream << data;",
      "lineIdx": 31,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "      stream << data;",
      "lineIdx": 31,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 18,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 18,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 44,
      "to": 56
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 44,
      "to": 56
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 97,
      "to": 106
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 97,
      "to": 106
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 59,
      "to": 63
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 59,
      "to": 63
    }
  }, {
    "left": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 18,
      "to": 24
    },
    "right": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 18,
      "to": 24
    }
  }, {
    "left": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 37,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 37,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 4,
      "to": 7
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 4,
      "to": 7
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 160,
      "to": 161
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 160,
      "to": 161
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 22,
      "to": 43
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 22,
      "to": 43
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 115,
      "to": 116
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 115,
      "to": 116
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 25,
      "to": 38
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 25,
      "to": 38
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 14,
      "to": 24
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 14,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    initExceptionHandler();",
      "lineIdx": 90,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "    initExceptionHandler();",
      "lineIdx": 90,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 21,
      "to": 36
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 21,
      "to": 36
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include <QDir>",
      "lineIdx": 14,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QDir>",
      "lineIdx": 14,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 18,
      "to": 26
    },
    "right": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 18,
      "to": 26
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 15,
      "to": 28
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 15,
      "to": 28
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 102,
      "to": 114
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 102,
      "to": 114
    }
  }, {
    "left": {
      "line": "    run();",
      "lineIdx": 91,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    run();",
      "lineIdx": 91,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 82,
      "to": 99
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 82,
      "to": 99
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 13,
      "to": 16
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 13,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 114,
      "to": 115
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 114,
      "to": 115
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 46,
      "to": 49
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 46,
      "to": 49
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> testSamples;",
      "lineIdx": 67,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  unordered_set<MLSample> testSamples;",
      "lineIdx": 67,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 19,
      "to": 26
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 19,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include <QTextStream>",
      "lineIdx": 13,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include <QTextStream>",
      "lineIdx": 13,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 14,
      "to": 23
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 14,
      "to": 23
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  vector<QString> testingList;",
      "lineIdx": 69,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<QString> testingList;",
      "lineIdx": 69,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include <iostream>",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <iostream>",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 83,
      "to": 88
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 83,
      "to": 88
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 51,
      "to": 57
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 51,
      "to": 57
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "    } else {",
      "lineIdx": 75,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "    } else {",
      "lineIdx": 75,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 22,
      "to": 31
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 22,
      "to": 31
    }
  }, {
    "left": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 27,
      "to": 31
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 27,
      "to": 31
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 18,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 18,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 94,
      "to": 95
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 94,
      "to": 95
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 28,
      "to": 43
    },
    "right": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 28,
      "to": 43
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 132,
      "to": 149
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 132,
      "to": 149
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 149,
      "to": 150
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 149,
      "to": 150
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 21,
      "to": 26
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 21,
      "to": 26
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 47,
      "to": 68
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 47,
      "to": 68
    }
  }, {
    "left": {
      "line": "  try {",
      "lineIdx": 89,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  try {",
      "lineIdx": 89,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include <iostream>",
      "lineIdx": 9,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include <iostream>",
      "lineIdx": 9,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 117,
      "to": 118
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 117,
      "to": 118
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 42,
      "to": 45
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 42,
      "to": 45
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 8,
      "to": 21
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 8,
      "to": 21
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 17,
      "to": 24
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 17,
      "to": 24
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 44,
      "to": 49
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 44,
      "to": 49
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 45,
      "to": 47
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 45,
      "to": 47
    }
  }, {
    "left": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 5,
      "to": 10
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 5,
      "to": 10
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 8,
      "to": 14
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 8,
      "to": 14
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 32,
      "to": 45
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 32,
      "to": 45
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 26,
      "to": 41
    },
    "right": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 26,
      "to": 41
    }
  }, {
    "left": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 21,
      "to": 24
    },
    "right": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 21,
      "to": 24
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 45,
      "to": 50
    },
    "right": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 45,
      "to": 50
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include <iostream>",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <iostream>",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 13,
      "to": 23
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 13,
      "to": 23
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 37,
      "to": 41
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 37,
      "to": 41
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 32,
      "to": 37
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 32,
      "to": 37
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 52,
      "to": 59
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 52,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include <QDir>",
      "lineIdx": 14,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QDir>",
      "lineIdx": 14,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  unsigned i = 0;",
      "lineIdx": 70,
      "from": 2,
      "to": 10
    },
    "right": {
      "line": "  unsigned i = 0;",
      "lineIdx": 70,
      "from": 2,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 29,
      "to": 38
    },
    "right": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 29,
      "to": 38
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 47,
      "to": 55
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 47,
      "to": 55
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> testSamples;",
      "lineIdx": 67,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  unordered_set<MLSample> testSamples;",
      "lineIdx": 67,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 116,
      "to": 117
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 116,
      "to": 117
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 45,
      "to": 48
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 45,
      "to": 48
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 15,
      "to": 21
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 15,
      "to": 21
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 37,
      "to": 46
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 37,
      "to": 46
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 21,
      "to": 39
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 21,
      "to": 39
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 118,
      "to": 119
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 118,
      "to": 119
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 98,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 98,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 22,
      "to": 28
    },
    "right": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 22,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 19,
      "to": 28
    },
    "right": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 19,
      "to": 28
    }
  }, {
    "left": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 98,
      "to": 103
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 98,
      "to": 103
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 53,
      "to": 74
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 53,
      "to": 74
    }
  }, {
    "left": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 38,
      "to": 46
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 38,
      "to": 46
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 14,
      "to": 20
    },
    "right": {
      "line": "static Logger logger{\"extractor\"};",
      "lineIdx": 20,
      "from": 14,
      "to": 20
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 47,
      "to": 74
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 47,
      "to": 74
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> testSamples;",
      "lineIdx": 67,
      "from": 2,
      "to": 15
    },
    "right": {
      "line": "  unordered_set<MLSample> testSamples;",
      "lineIdx": 67,
      "from": 2,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 51,
      "to": 56
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 51,
      "to": 56
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 42,
      "to": 48
    },
    "right": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 42,
      "to": 48
    }
  }, {
    "left": {
      "line": "      stream << data;",
      "lineIdx": 31,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "      stream << data;",
      "lineIdx": 31,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    run();",
      "lineIdx": 91,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    run();",
      "lineIdx": 91,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "  } else FAIL(\"Failed to open: \" + path);",
      "lineIdx": 33,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 35,
      "to": 43
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 35,
      "to": 43
    }
  }, {
    "left": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 39,
      "to": 58
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 39,
      "to": 58
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 2,
      "to": 15
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 2,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 75,
      "to": 78
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 75,
      "to": 78
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 60,
      "to": 72
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 60,
      "to": 72
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 86,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 86,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 40,
      "to": 47
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 40,
      "to": 47
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 18,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 18,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 26,
      "to": 30
    },
    "right": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 26,
      "to": 30
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 106,
      "to": 107
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 106,
      "to": 107
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 49,
      "to": 64
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 49,
      "to": 64
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 30,
      "to": 40
    },
    "right": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 30,
      "to": 40
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 21,
      "to": 25
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 21,
      "to": 25
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 84,
      "to": 101
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 84,
      "to": 101
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 17,
      "to": 23
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 17,
      "to": 23
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 88,
      "to": 93
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 88,
      "to": 93
    }
  }, {
    "left": {
      "line": "#include <QDir>",
      "lineIdx": 14,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "#include <QDir>",
      "lineIdx": 14,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 16,
      "to": 26
    },
    "right": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 16,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"mix/logger/logger.h\"",
      "lineIdx": 11,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 18,
      "to": 27
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 18,
      "to": 27
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 105,
      "to": 106
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 105,
      "to": 106
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 59,
      "to": 62
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 59,
      "to": 62
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 4,
      "to": 9
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 4,
      "to": 9
    }
  }, {
    "left": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "        QString outputDir = root + outputRootDir / fileName;",
      "lineIdx": 54,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  std::random_shuffle(shuffledSamplesByFile.begin(), shuffledSamplesByFile.end());",
      "lineIdx": 63,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 52,
      "to": 57
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 52,
      "to": 57
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 29,
      "to": 44
    },
    "right": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 29,
      "to": 44
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 3,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QString>",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 130,
      "to": 131
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 130,
      "to": 131
    }
  }, {
    "left": {
      "line": "    return 0;",
      "lineIdx": 92,
      "from": 4,
      "to": 10
    },
    "right": {
      "line": "    return 0;",
      "lineIdx": 92,
      "from": 4,
      "to": 10
    }
  }, {
    "left": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "      addAll(trainSamples, samplesForAFile.second);",
      "lineIdx": 73,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 115,
      "to": 116
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 115,
      "to": 116
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 34,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 34,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 57,
      "to": 64
    },
    "right": {
      "line": "        samplesByFile.push_back(std::make_pair(fileName, samples));",
      "lineIdx": 57,
      "from": 57,
      "to": 64
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "#include <QFile>",
      "lineIdx": 12,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QFile>",
      "lineIdx": 12,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 15,
      "to": 24
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 15,
      "to": 24
    }
  }, {
    "left": {
      "line": "  vector<QString> testingList;",
      "lineIdx": 69,
      "from": 18,
      "to": 29
    },
    "right": {
      "line": "  vector<QString> testingList;",
      "lineIdx": 69,
      "from": 18,
      "to": 29
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  QFile file(path);",
      "lineIdx": 27,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  QFile file(path);",
      "lineIdx": 27,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 6,
      "to": 17
    },
    "right": {
      "line": "      QTextStream stream(&file);",
      "lineIdx": 30,
      "from": 6,
      "to": 17
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 101,
      "to": 102
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 112,
      "to": 113
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 112,
      "to": 113
    }
  }, {
    "left": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 58,
      "to": 69
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 58,
      "to": 69
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 18,
      "from": 11,
      "to": 24
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 18,
      "from": 11,
      "to": 24
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "      trainingList.push_back(samplesForAFile.first);",
      "lineIdx": 74,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 26,
      "to": 30
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 26,
      "to": 30
    }
  }, {
    "left": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "    if (i < shuffledSamplesByFile.size()/2) {",
      "lineIdx": 72,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 64,
      "to": 76
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 64,
      "to": 76
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 13,
      "to": 19
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 13,
      "to": 19
    }
  }, {
    "left": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 6,
      "to": 13
    },
    "right": {
      "line": "const QString testCasesDir = \"full_tests\";",
      "lineIdx": 22,
      "from": 6,
      "to": 13
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 8,
      "to": 15
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 8,
      "to": 15
    }
  }, {
    "left": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 26,
      "to": 32
    },
    "right": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 26,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 90,
      "to": 91
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 90,
      "to": 91
    }
  }, {
    "left": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))",
      "lineIdx": 28,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 4,
      "to": 6
    },
    "right": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 4,
      "to": 6
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 18,
      "to": 27
    },
    "right": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 18,
      "to": 27
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 53,
      "to": 58
    },
    "right": {
      "line": "  write(root + outputRootDir / \"training_files.txt\", toStr(trainingList));",
      "lineIdx": 84,
      "from": 53,
      "to": 58
    }
  }, {
    "left": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 16,
      "to": 24
    },
    "right": {
      "line": "        QString fileName = itr->path().filename().c_str();",
      "lineIdx": 53,
      "from": 16,
      "to": 24
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "  write(root + outputRootDir / \"test_samples.txt\", toStr(testSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 83,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "#include <QFile>",
      "lineIdx": 12,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QFile>",
      "lineIdx": 12,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/displayableerror.h\"",
      "lineIdx": 8,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 49,
      "to": 56
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 49,
      "to": 56
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "#include \"aligner/learning/mlpipeline.h\"",
      "lineIdx": 5,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  write(root + outputRootDir / \"testing_files.txt\", toStr(testingList));",
      "lineIdx": 85,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  boost::filesystem::directory_iterator end_itr; // default construction yields past-the-end",
      "lineIdx": 45,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 6,
      "to": 8
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 6,
      "to": 8
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 57,
      "to": 67
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 57,
      "to": 67
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 27,
      "to": 30
    },
    "right": {
      "line": "#include <boost/filesystem.hpp>",
      "lineIdx": 6,
      "from": 27,
      "to": 30
    }
  }, {
    "left": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "      if (result.isLeft()) FAIL(result.left().mMsg.toStdString().c_str());",
      "lineIdx": 49,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  boost::filesystem::path dirPath = (root + testCasesDir).toStdString();",
      "lineIdx": 39,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    } else {",
      "lineIdx": 75,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    } else {",
      "lineIdx": 75,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "void write(const QString& path, const QString& data) {",
      "lineIdx": 25,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 2,
      "to": 4
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 2,
      "to": 4
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 74,
      "to": 85
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 74,
      "to": 85
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 28,
      "to": 34
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 28,
      "to": 34
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 32,
      "to": 39
    },
    "right": {
      "line": "  if(!boost::filesystem::exists(dirPath)) {",
      "lineIdx": 40,
      "from": 32,
      "to": 39
    }
  }, {
    "left": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  } catch(...) {",
      "lineIdx": 96,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 23,
      "to": 27
    },
    "right": {
      "line": "  logger.info(\"Writing file: \" + path);",
      "lineIdx": 26,
      "from": 23,
      "to": 27
    }
  }, {
    "left": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 120,
      "to": 130
    },
    "right": {
      "line": "        vector<MLSample> samples = MLPipeline::extractSamplesFromReference(reference.leftText(), reference.rightText(), MLPipeline::standardExtractor, reference);",
      "lineIdx": 52,
      "from": 120,
      "to": 130
    }
  }, {
    "left": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 31,
      "to": 46
    },
    "right": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 31,
      "to": 46
    }
  }, {
    "left": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 6,
      "to": 12
    },
    "right": {
      "line": "      addAll(testSamples, samplesForAFile.second);",
      "lineIdx": 76,
      "from": 6,
      "to": 12
    }
  }, {
    "left": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 12,
      "to": 15
    },
    "right": {
      "line": "  for(const std::pair<QString, vector<MLSample>> samplesForAFile: shuffledSamplesByFile) {",
      "lineIdx": 71,
      "from": 12,
      "to": 15
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 112,
      "to": 113
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 112,
      "to": 113
    }
  }, {
    "left": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 8,
      "to": 25
    },
    "right": {
      "line": "        OneToOneAlignment reference = result.right();",
      "lineIdx": 51,
      "from": 8,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "#include \"../src/aligner/serialisation/onetoonealignmentio.h\"",
      "lineIdx": 1,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  write(root + outputRootDir / \"train_samples.txt\", toStr(trainSamples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 82,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include \"aligner/learning/featureextractor.h\"",
      "lineIdx": 4,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  unordered_set<MLSample> trainSamples; // set -> to filter out duplications",
      "lineIdx": 66,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "      VERIFY(stream.status() == QTextStream::Ok);",
      "lineIdx": 32,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 95,
      "to": 96
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 95,
      "to": 96
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << std::endl;",
      "lineIdx": 97,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/either.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    return 0;",
      "lineIdx": 92,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "    return 0;",
      "lineIdx": 92,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  } catch(std::exception& e) {",
      "lineIdx": 93,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 6,
      "to": 17
    },
    "right": {
      "line": "      testingList.push_back(samplesForAFile.first);",
      "lineIdx": 77,
      "from": 6,
      "to": 17
    }
  }, {
    "left": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  const QString root = \"../../\";",
      "lineIdx": 38,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 14,
      "to": 18
    },
    "right": {
      "line": "int main(int, char**) {",
      "lineIdx": 88,
      "from": 14,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "#include \"../src/mix/collectionutils.h\"",
      "lineIdx": 2,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "    FAIL((\"Directory doesn't exist:\" + QString(dirPath.string().c_str())).toStdString().c_str());",
      "lineIdx": 41,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  for (boost::filesystem::directory_iterator itr(dirPath); itr != end_itr; ++itr) {",
      "lineIdx": 46,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> shuffledSamplesByFile(samplesByFile.begin(), samplesByFile.end());",
      "lineIdx": 62,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 60,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 60,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 14,
      "to": 30
    },
    "right": {
      "line": "#include \"mix/exceptionhandler.h\"",
      "lineIdx": 10,
      "from": 14,
      "to": 30
    }
  }, {
    "left": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 14,
      "to": 27
    },
    "right": {
      "line": "const QString outputRootDir = \"features_output\";",
      "lineIdx": 23,
      "from": 14,
      "to": 27
    }
  }, {
    "left": {
      "line": "  vector<QString> trainingList;",
      "lineIdx": 68,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  vector<QString> trainingList;",
      "lineIdx": 68,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  vector<std::pair<QString, vector<MLSample>>> samplesByFile;",
      "lineIdx": 44,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "    std::cout << \"exception happened:\" << e.what() << std::endl;",
      "lineIdx": 95,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 27,
      "to": 35
    },
    "right": {
      "line": "        write(outputDir / \"features.txt\", toStr(samples, MLPipeline::standardExtractor.orderedNames()));",
      "lineIdx": 56,
      "from": 27,
      "to": 35
    }
  }, {
    "left": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 97,
      "to": 98
    },
    "right": {
      "line": "      Either<DisplayableError, OneToOneAlignment>  result = OneToOneAlignmentIO::read(itr->path().c_str());",
      "lineIdx": 48,
      "from": 97,
      "to": 98
    }
  }, {
    "left": {
      "line": "#include <QTextStream>",
      "lineIdx": 13,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QTextStream>",
      "lineIdx": 13,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/asserts.h\"",
      "lineIdx": 15,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 8,
      "to": 20
    },
    "right": {
      "line": "    if (is_directory(itr->status())) {",
      "lineIdx": 47,
      "from": 8,
      "to": 20
    }
  }, {
    "left": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "        VERIFY(QDir().mkpath(outputDir));",
      "lineIdx": 55,
      "from": 40,
      "to": 41
    }
  }]
}