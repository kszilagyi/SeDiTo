{
  "matches": [{
    "left": {
      "line": ", mRight(right)",
      "lineIdx": 9,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": ", mRight(right)",
      "lineIdx": 9,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": ", mLeft(left)",
      "lineIdx": 8,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": ", mLeft(left)",
      "lineIdx": 8,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 0,
      "to": 13
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 0,
      "to": 13
    }
  }, {
    "left": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 13,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 13,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 59,
      "to": 64
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 59,
      "to": 64
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 94,
      "to": 99
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 94,
      "to": 99
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 42,
      "to": 49
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 42,
      "to": 49
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 90,
      "to": 93
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 90,
      "to": 93
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 111,
      "to": 121
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 111,
      "to": 121
    }
  }, {
    "left": {
      "line": ", mRight(right)",
      "lineIdx": 9,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": ", mRight(right)",
      "lineIdx": 9,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 29,
      "to": 38
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 29,
      "to": 38
    }
  }, {
    "left": {
      "line": ", mRight(right)",
      "lineIdx": 9,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": ", mRight(right)",
      "lineIdx": 9,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 110,
      "to": 111
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 110,
      "to": 111
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 102,
      "to": 103
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 102,
      "to": 103
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 48,
      "to": 56
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 48,
      "to": 56
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": ", mRightText(rightText)",
      "lineIdx": 7,
      "from": 2,
      "to": 12
    },
    "right": {
      "line": ", mRightText(rightText)",
      "lineIdx": 7,
      "from": 2,
      "to": 12
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 57,
      "to": 63
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 57,
      "to": 63
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": ", mRightText(rightText)",
      "lineIdx": 7,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": ", mRightText(rightText)",
      "lineIdx": 7,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 58,
      "to": 62
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 58,
      "to": 62
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 61,
      "to": 65
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 61,
      "to": 65
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 24,
      "to": 29
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 24,
      "to": 29
    }
  }, {
    "left": {
      "line": ", mLeft(left)",
      "lineIdx": 8,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": ", mLeft(left)",
      "lineIdx": 8,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 99,
      "to": 100
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 99,
      "to": 100
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 25,
      "to": 30
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 25,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 18,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 18,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": ", mLeft(left)",
      "lineIdx": 8,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": ", mLeft(left)",
      "lineIdx": 8,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 5,
      "to": 18
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 5,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 9,
      "to": 16
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 9,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 31,
      "to": 40
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 31,
      "to": 40
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 105,
      "to": 110
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 105,
      "to": 110
    }
  }, {
    "left": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 23,
      "to": 31
    },
    "right": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 23,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 50,
      "to": 59
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 50,
      "to": 59
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 78,
      "to": 87
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 78,
      "to": 87
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": ": mLeftText(leftText)",
      "lineIdx": 6,
      "from": 12,
      "to": 20
    },
    "right": {
      "line": ": mLeftText(leftText)",
      "lineIdx": 6,
      "from": 12,
      "to": 20
    }
  }, {
    "left": {
      "line": ", mRight(right)",
      "lineIdx": 9,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": ", mRight(right)",
      "lineIdx": 9,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 0,
      "to": 7
    },
    "right": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 0,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 52,
      "to": 57
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 52,
      "to": 57
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 44,
      "to": 52
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 44,
      "to": 52
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 18,
      "to": 24
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 18,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 91,
      "to": 101
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 91,
      "to": 101
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 23,
      "to": 28
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 23,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 41,
      "to": 48
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 41,
      "to": 48
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 43,
      "to": 48
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 43,
      "to": 48
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 10,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 35,
      "to": 42
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 35,
      "to": 42
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 80,
      "to": 83
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 80,
      "to": 83
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 21,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 21,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 13,
      "to": 16
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 13,
      "to": 16
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": ": mLeftText(leftText)",
      "lineIdx": 6,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": ": mLeftText(leftText)",
      "lineIdx": 6,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 84,
      "to": 88
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 84,
      "to": 88
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": ", mRightText(rightText)",
      "lineIdx": 7,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": ", mRightText(rightText)",
      "lineIdx": 7,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 10,
      "to": 23
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 10,
      "to": 23
    }
  }, {
    "left": {
      "line": ", mRightText(rightText)",
      "lineIdx": 7,
      "from": 13,
      "to": 22
    },
    "right": {
      "line": ", mRightText(rightText)",
      "lineIdx": 7,
      "from": 13,
      "to": 22
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 175,
      "to": 176
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 31,
      "to": 36
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 31,
      "to": 36
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 54,
      "to": 59
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 54,
      "to": 59
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": ", mLeft(left)",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ", mLeft(left)",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 49,
      "to": 55
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 49,
      "to": 55
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 103,
      "to": 104
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 22,
      "to": 26
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 22,
      "to": 26
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 20,
      "to": 28
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 20,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 59,
      "to": 68
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 59,
      "to": 68
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 37,
      "to": 50
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 37,
      "to": 50
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 69,
      "to": 78
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 69,
      "to": 78
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 40,
      "to": 47
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 40,
      "to": 47
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 50,
      "to": 56
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 50,
      "to": 56
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": ", mRight(right)",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ", mRight(right)",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 10,
      "to": 21
    },
    "right": {
      "line": "#include <QStringList>",
      "lineIdx": 3,
      "from": 10,
      "to": 21
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 103,
      "to": 104
    }
  }, {
    "left": {
      "line": ": mLeftText(leftText)",
      "lineIdx": 6,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": ": mLeftText(leftText)",
      "lineIdx": 6,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 60,
      "to": 67
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 60,
      "to": 67
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 33,
      "to": 39
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 33,
      "to": 39
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 169,
      "to": 170
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 72,
      "to": 77
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 72,
      "to": 77
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 17,
      "to": 24
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 17,
      "to": 24
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 14,
      "to": 23
    },
    "right": {
      "line": "#include \"mix/lineutils.h\"",
      "lineIdx": 2,
      "from": 14,
      "to": 23
    }
  }, {
    "left": {
      "line": ": mLeftText(leftText)",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ": mLeftText(leftText)",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": ", mRightText(rightText)",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ", mRightText(rightText)",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": ": mLeftText(leftText)",
      "lineIdx": 6,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": ": mLeftText(leftText)",
      "lineIdx": 6,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 23,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 23,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 8,
      "to": 21
    },
    "right": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 8,
      "to": 21
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 121,
      "to": 122
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 121,
      "to": 122
    }
  }, {
    "left": {
      "line": ", mLeft(left)",
      "lineIdx": 8,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": ", mLeft(left)",
      "lineIdx": 8,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "bool OneToOneMatch::operator==(const OneToOneMatch &other) const",
      "lineIdx": 20,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 34,
      "to": 39
    },
    "right": {
      "line": "QString OneToOneMatch::toString() const",
      "lineIdx": 15,
      "from": 34,
      "to": 39
    }
  }, {
    "left": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size());",
      "lineIdx": 12,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  VERIFY(right >= 0 && right < LineUtils::toLines(rightText).size(), \"right = \" + QString::number(right) + \", size = \" + QString::number(LineUtils::toLines(rightText).size()));",
      "lineIdx": 12,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"onetoonematch.h\"",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"../mix/asserts.h\"",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size());",
      "lineIdx": 11,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  VERIFY(left >= 0 && left < LineUtils::toLines(leftText).size(), \"left = \" + QString::number(left) + \", size = \" + QString::number(LineUtils::toLines(leftText).size()));",
      "lineIdx": 11,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  return QString::number(mLeft) + \", \" + QString::number(mRight);",
      "lineIdx": 17,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 15,
      "to": 28
    },
    "right": {
      "line": "OneToOneMatch::OneToOneMatch(const QString& leftText, const QString& rightText, int left, int right)",
      "lineIdx": 5,
      "from": 15,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  return mLeft == other.mLeft && mRight == other.mRight && mLeftText == other.mLeftText && mRightText == other.mRightText;",
      "lineIdx": 22,
      "from": 41,
      "to": 42
    }
  }]
}