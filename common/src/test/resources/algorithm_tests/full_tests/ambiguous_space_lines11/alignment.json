{
  "matches": [{
    "left": {
      "line": "#define SETOPERATIONS_H",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#define SETOPERATIONS_H",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 46,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 51,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 22,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 27,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "#endif // SETOPERATIONS_H",
      "lineIdx": 53,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#endif // SETOPERATIONS_H",
      "lineIdx": 58,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 113,
      "to": 114
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 113,
      "to": 114
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 46,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 51,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include <algorithm>",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <algorithm>",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 78,
      "to": 81
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 78,
      "to": 81
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "using std::list;",
      "lineIdx": 12,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using std::list;",
      "lineIdx": 12,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 14,
      "to": 24
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 14,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include <list>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <list>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "template<class T, class... Args>",
      "lineIdx": 24,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "template<class T, class... Args>",
      "lineIdx": 29,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include <map>",
      "lineIdx": 5,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include <map>",
      "lineIdx": 5,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "template<class T, class... Args>",
      "lineIdx": 24,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "template<class T, class... Args>",
      "lineIdx": 29,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "using std::list;",
      "lineIdx": 12,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "using std::list;",
      "lineIdx": 12,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 91,
      "to": 92
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 91,
      "to": 92
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "using std::list;",
      "lineIdx": 12,
      "from": 11,
      "to": 15
    },
    "right": {
      "line": "using std::list;",
      "lineIdx": 12,
      "from": 11,
      "to": 15
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 92,
      "to": 98
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 92,
      "to": 98
    }
  }, {
    "left": {
      "line": "  addAll(result, right);",
      "lineIdx": 49,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  addAll(result, right);",
      "lineIdx": 54,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 36,
      "to": 40
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 36,
      "to": 40
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 53,
      "to": 58
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 53,
      "to": 58
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 106,
      "to": 107
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 106,
      "to": 107
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 37,
      "to": 41
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 37,
      "to": 41
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "#endif // SETOPERATIONS_H",
      "lineIdx": 53,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "#endif // SETOPERATIONS_H",
      "lineIdx": 58,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 35,
      "to": 40
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 35,
      "to": 40
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 27,
      "to": 32
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 27,
      "to": 32
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 17,
      "to": 26
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 17,
      "to": 26
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 24,
      "to": 28
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 24,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "#include <algorithm>",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <algorithm>",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 17,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 17,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 0,
      "to": 13
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 0,
      "to": 13
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 52,
      "to": 58
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 52,
      "to": 58
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 29,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 34,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 39,
      "to": 42
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 39,
      "to": 42
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 34,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 39,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 61,
      "to": 66
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 61,
      "to": 66
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 116,
      "to": 117
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 116,
      "to": 117
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "#ifndef SETOPERATIONS_H",
      "lineIdx": 0,
      "from": 8,
      "to": 23
    },
    "right": {
      "line": "#ifndef SETOPERATIONS_H",
      "lineIdx": 0,
      "from": 8,
      "to": 23
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 32,
      "to": 35
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 32,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 107,
      "to": 112
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 107,
      "to": 112
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 11,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 11,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 31,
      "to": 34
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 31,
      "to": 34
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 14,
      "to": 19
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 14,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 20,
      "to": 23
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 20,
      "to": 23
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 44,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 49,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#endif // SETOPERATIONS_H",
      "lineIdx": 53,
      "from": 1,
      "to": 6
    },
    "right": {
      "line": "#endif // SETOPERATIONS_H",
      "lineIdx": 58,
      "from": 1,
      "to": 6
    }
  }, {
    "left": {
      "line": "  addAll(result, right);",
      "lineIdx": 49,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  addAll(result, right);",
      "lineIdx": 54,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  unordered_set<T> result;",
      "lineIdx": 26,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  unordered_set<T> result;",
      "lineIdx": 31,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include <list>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <list>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 6,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 6,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 71,
      "to": 74
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 71,
      "to": 74
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 69,
      "to": 73
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 69,
      "to": 73
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "#define SETOPERATIONS_H",
      "lineIdx": 1,
      "from": 8,
      "to": 23
    },
    "right": {
      "line": "#define SETOPERATIONS_H",
      "lineIdx": 1,
      "from": 8,
      "to": 23
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<class T, class... Args>",
      "lineIdx": 24,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<class T, class... Args>",
      "lineIdx": 29,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "  set<T> result = left;",
      "lineIdx": 48,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  set<T> result = left;",
      "lineIdx": 53,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 62,
      "to": 66
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 62,
      "to": 66
    }
  }, {
    "left": {
      "line": "  set<T> result = left;",
      "lineIdx": 48,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  set<T> result = left;",
      "lineIdx": 53,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 28,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 33,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  set<T> result = left;",
      "lineIdx": 48,
      "from": 18,
      "to": 22
    },
    "right": {
      "line": "  set<T> result = left;",
      "lineIdx": 53,
      "from": 18,
      "to": 22
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 36,
      "to": 40
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 36,
      "to": 40
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  set<T> result = left;",
      "lineIdx": 48,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  set<T> result = left;",
      "lineIdx": 53,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 15,
      "to": 18
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 15,
      "to": 18
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 35,
      "to": 40
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 35,
      "to": 40
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 27,
      "to": 32
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 27,
      "to": 32
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 50,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 55,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 37,
      "to": 42
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 37,
      "to": 42
    }
  }, {
    "left": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 33,
      "to": 36
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 33,
      "to": 36
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 25,
      "to": 30
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 25,
      "to": 30
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 114,
      "to": 115
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 114,
      "to": 115
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 15,
      "to": 20
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 15,
      "to": 20
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 28,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 33,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 43,
      "to": 46
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 43,
      "to": 46
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "template<class T, class... Args>",
      "lineIdx": 24,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "template<class T, class... Args>",
      "lineIdx": 29,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 100,
      "to": 106
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 100,
      "to": 106
    }
  }, {
    "left": {
      "line": "using std::list;",
      "lineIdx": 12,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "using std::list;",
      "lineIdx": 12,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 62,
      "to": 65
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 62,
      "to": 65
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 40,
      "to": 44
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 40,
      "to": 44
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 112,
      "to": 113
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 112,
      "to": 113
    }
  }, {
    "left": {
      "line": "using std::set;",
      "lineIdx": 10,
      "from": 11,
      "to": 14
    },
    "right": {
      "line": "using std::set;",
      "lineIdx": 10,
      "from": 11,
      "to": 14
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 16,
      "to": 19
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 16,
      "to": 19
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 23,
      "to": 26
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 23,
      "to": 26
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 43,
      "to": 46
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 43,
      "to": 46
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 9,
      "to": 13
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 9,
      "to": 13
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 35,
      "to": 40
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 35,
      "to": 40
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include <set>",
      "lineIdx": 2,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include <set>",
      "lineIdx": 2,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 62,
      "to": 66
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 62,
      "to": 66
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 84,
      "to": 85
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 26,
      "to": 31
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 26,
      "to": 31
    }
  }, {
    "left": {
      "line": "#include <algorithm>",
      "lineIdx": 4,
      "from": 10,
      "to": 19
    },
    "right": {
      "line": "#include <algorithm>",
      "lineIdx": 4,
      "from": 10,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 11,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 11,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 44,
      "to": 49
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 44,
      "to": 49
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 35,
      "to": 39
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 35,
      "to": 39
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 24,
      "to": 28
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 24,
      "to": 28
    }
  }, {
    "left": {
      "line": "  unordered_set<T> result;",
      "lineIdx": 26,
      "from": 2,
      "to": 15
    },
    "right": {
      "line": "  unordered_set<T> result;",
      "lineIdx": 31,
      "from": 2,
      "to": 15
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 51,
      "to": 56
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 51,
      "to": 56
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 28,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 33,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  set<T> result = left;",
      "lineIdx": 48,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  set<T> result = left;",
      "lineIdx": 53,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 75,
      "to": 76
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "template<class T, class... Args>",
      "lineIdx": 24,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<class T, class... Args>",
      "lineIdx": 29,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "template<class T, class... Args>",
      "lineIdx": 24,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "template<class T, class... Args>",
      "lineIdx": 29,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 53,
      "to": 58
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 53,
      "to": 58
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 38,
      "to": 42
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 38,
      "to": 42
    }
  }, {
    "left": {
      "line": "  unordered_set<T> result;",
      "lineIdx": 26,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "  unordered_set<T> result;",
      "lineIdx": 31,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 50,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 55,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "#ifndef SETOPERATIONS_H",
      "lineIdx": 0,
      "from": 1,
      "to": 7
    },
    "right": {
      "line": "#ifndef SETOPERATIONS_H",
      "lineIdx": 0,
      "from": 1,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include <set>",
      "lineIdx": 2,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include <set>",
      "lineIdx": 2,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 7,
      "to": 12
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 7,
      "to": 12
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 9,
      "to": 12
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 9,
      "to": 12
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 25,
      "to": 30
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 25,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 6,
      "from": 10,
      "to": 23
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 6,
      "from": 10,
      "to": 23
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 79,
      "to": 84
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 79,
      "to": 84
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 11,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 11,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "using std::set;",
      "lineIdx": 10,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "using std::set;",
      "lineIdx": 10,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  addAll(result, right);",
      "lineIdx": 49,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  addAll(result, right);",
      "lineIdx": 54,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include <map>",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <map>",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include <set>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <set>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "using std::set;",
      "lineIdx": 10,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "using std::set;",
      "lineIdx": 10,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 46,
      "to": 50
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 46,
      "to": 50
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 46,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 51,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "using std::set;",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "using std::set;",
      "lineIdx": 10,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 27,
      "to": 32
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 27,
      "to": 32
    }
  }, {
    "left": {
      "line": "template<class T, class... Args>",
      "lineIdx": 24,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "template<class T, class... Args>",
      "lineIdx": 29,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 83,
      "to": 91
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 83,
      "to": 91
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "template<class T, class... Args>",
      "lineIdx": 24,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template<class T, class... Args>",
      "lineIdx": 29,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 62,
      "to": 67
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 62,
      "to": 67
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 31,
      "to": 34
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 31,
      "to": 34
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 24,
      "to": 29
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 24,
      "to": 29
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  set<T> result = left;",
      "lineIdx": 48,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  set<T> result = left;",
      "lineIdx": 53,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 17,
      "to": 23
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 17,
      "to": 23
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 39,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 44,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  unordered_set<T> result;",
      "lineIdx": 26,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  unordered_set<T> result;",
      "lineIdx": 31,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "template<class T, class... Args>",
      "lineIdx": 24,
      "from": 27,
      "to": 31
    },
    "right": {
      "line": "template<class T, class... Args>",
      "lineIdx": 29,
      "from": 27,
      "to": 31
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "  unordered_set<T> result;",
      "lineIdx": 26,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  unordered_set<T> result;",
      "lineIdx": 31,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 51,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 56,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "template<class T, class... Args>",
      "lineIdx": 24,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "template<class T, class... Args>",
      "lineIdx": 29,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "using std::set;",
      "lineIdx": 10,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using std::set;",
      "lineIdx": 10,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include <algorithm>",
      "lineIdx": 4,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "#include <algorithm>",
      "lineIdx": 4,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 14,
      "to": 29
    },
    "right": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 14,
      "to": 29
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 26,
      "to": 30
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 26,
      "to": 30
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 25,
      "to": 28
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 25,
      "to": 28
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 86,
      "to": 87
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 25,
      "to": 30
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 25,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 44,
      "to": 49
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 44,
      "to": 49
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "#include <map>",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <map>",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 13,
      "to": 18
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 13,
      "to": 18
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  return result;",
      "lineIdx": 50,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  return result;",
      "lineIdx": 55,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 0,
      "to": 13
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 0,
      "to": 13
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 11,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 11,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include <map>",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <map>",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  addAll(result, right);",
      "lineIdx": 49,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  addAll(result, right);",
      "lineIdx": 54,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "using std::list;",
      "lineIdx": 12,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "using std::list;",
      "lineIdx": 12,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 25,
      "to": 30
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 25,
      "to": 30
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "#ifndef SETOPERATIONS_H",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#ifndef SETOPERATIONS_H",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 35,
      "to": 39
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 35,
      "to": 39
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 31,
      "to": 35
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 31,
      "to": 35
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 46,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 51,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "using std::list;",
      "lineIdx": 12,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "using std::list;",
      "lineIdx": 12,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include <unordered_set>",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <unordered_set>",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  set<T> result = left;",
      "lineIdx": 48,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  set<T> result = left;",
      "lineIdx": 53,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 9,
      "to": 22
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 9,
      "to": 22
    }
  }, {
    "left": {
      "line": "using std::set;",
      "lineIdx": 10,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "using std::set;",
      "lineIdx": 10,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 11,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 11,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 44,
      "to": 49
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 44,
      "to": 49
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 18,
      "to": 23
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 18,
      "to": 23
    }
  }, {
    "left": {
      "line": "  unordered_set<T> result;",
      "lineIdx": 26,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  unordered_set<T> result;",
      "lineIdx": 31,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "#include <set>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <set>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 62,
      "to": 66
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 62,
      "to": 66
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 29,
      "to": 32
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 29,
      "to": 32
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 50,
      "to": 54
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 50,
      "to": 54
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 53,
      "to": 58
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 53,
      "to": 58
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "#define SETOPERATIONS_H",
      "lineIdx": 1,
      "from": 1,
      "to": 7
    },
    "right": {
      "line": "#define SETOPERATIONS_H",
      "lineIdx": 1,
      "from": 1,
      "to": 7
    }
  }, {
    "left": {
      "line": "using std::unordered_set;",
      "lineIdx": 11,
      "from": 11,
      "to": 24
    },
    "right": {
      "line": "using std::unordered_set;",
      "lineIdx": 11,
      "from": 11,
      "to": 24
    }
  }, {
    "left": {
      "line": "#endif // SETOPERATIONS_H",
      "lineIdx": 53,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "#endif // SETOPERATIONS_H",
      "lineIdx": 58,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 65,
      "to": 70
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 65,
      "to": 70
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 4,
      "to": 5
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 4,
      "to": 5
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 7,
      "to": 23
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 7,
      "to": 23
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 17,
      "to": 24
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 17,
      "to": 24
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 17,
      "to": 22
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 56,
      "to": 61
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 56,
      "to": 61
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 73,
      "to": 74
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 7,
      "to": 13
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 7,
      "to": 13
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 30,
      "to": 33
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 30,
      "to": 33
    }
  }, {
    "left": {
      "line": "template<class T, class... Args>",
      "lineIdx": 24,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "template<class T, class... Args>",
      "lineIdx": 29,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include <set>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <set>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  addAll(result, right);",
      "lineIdx": 49,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  addAll(result, right);",
      "lineIdx": 54,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 115,
      "to": 116
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 115,
      "to": 116
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 28,
      "to": 33
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 28,
      "to": 33
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "template<class T>",
      "lineIdx": 46,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "template<class T>",
      "lineIdx": 51,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "#endif // SETOPERATIONS_H",
      "lineIdx": 53,
      "from": 10,
      "to": 25
    },
    "right": {
      "line": "#endif // SETOPERATIONS_H",
      "lineIdx": 58,
      "from": 10,
      "to": 25
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 32,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "set<T> toSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  addAll(result, right);",
      "lineIdx": 49,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  addAll(result, right);",
      "lineIdx": 54,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 0,
      "to": 8
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 0,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 46,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  addAll(result, right);",
      "lineIdx": 49,
      "from": 17,
      "to": 22
    },
    "right": {
      "line": "  addAll(result, right);",
      "lineIdx": 54,
      "from": 17,
      "to": 22
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 56,
      "to": 61
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 56,
      "to": 61
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 14,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include <map>",
      "lineIdx": 5,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include <map>",
      "lineIdx": 5,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include <list>",
      "lineIdx": 3,
      "from": 10,
      "to": 14
    },
    "right": {
      "line": "#include <list>",
      "lineIdx": 3,
      "from": 10,
      "to": 14
    }
  }, {
    "left": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 20,
      "from": 36,
      "to": 39
    },
    "right": {
      "line": "unordered_set<K> keyUSet(const std::map<K, V, Args...> m) {",
      "lineIdx": 25,
      "from": 36,
      "to": 39
    }
  }, {
    "left": {
      "line": "#include <algorithm>",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <algorithm>",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 53,
      "to": 59
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 53,
      "to": 59
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 0,
      "to": 13
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 0,
      "to": 13
    }
  }, {
    "left": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 33,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  return set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 50,
      "to": 55
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 50,
      "to": 55
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  set<T> result = left;",
      "lineIdx": 48,
      "from": 9,
      "to": 15
    },
    "right": {
      "line": "  set<T> result = left;",
      "lineIdx": 53,
      "from": 9,
      "to": 15
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 37,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "unordered_set<T> toUSet(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"mix/collectionutils.h\"",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 19,
      "from": 36,
      "to": 40
    },
    "right": {
      "line": "template<class K, class V, class... Args>",
      "lineIdx": 24,
      "from": 36,
      "to": 40
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include <list>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <list>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "set<K> keySet(const std::map<K, V, Args...> m) {",
      "lineIdx": 15,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 38,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return unordered_set<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 42,
      "from": 8,
      "to": 14
    },
    "right": {
      "line": "list<T> toList(const C<T, Args...>& c) {",
      "lineIdx": 47,
      "from": 8,
      "to": 14
    }
  }, {
    "left": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 25,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "unordered_set<T> intersect(const set<T, Args...>& left, const set<T, Args...>& right) {",
      "lineIdx": 30,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 47,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "set<T> operator+(const set<T>& left, const set<T>& right) {",
      "lineIdx": 52,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "#include <list>",
      "lineIdx": 3,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "#include <list>",
      "lineIdx": 3,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"mix/functional.h\"",
      "lineIdx": 7,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 25,
      "to": 30
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 41,
      "from": 25,
      "to": 30
    }
  }, {
    "left": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 21,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  return toUSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 26,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 31,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "template<template<class, class...> class C, class T, class... Args>",
      "lineIdx": 36,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 27,
      "from": 29,
      "to": 34
    },
    "right": {
      "line": "  std::set_intersection(left.begin(), left.end(), right.begin(), right.end(), std::inserter(result, result.begin()));",
      "lineIdx": 32,
      "from": 29,
      "to": 34
    }
  }, {
    "left": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  return toSet(map(m, [](const std::pair<K, V> p) { return p.first; }));",
      "lineIdx": 16,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 43,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  return list<T>(c.begin(), c.end());",
      "lineIdx": 48,
      "from": 35,
      "to": 36
    }
  }]
}