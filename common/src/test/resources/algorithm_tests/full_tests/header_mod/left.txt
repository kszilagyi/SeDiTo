#ifndef ONETOMULTIRANGEALIGNMENT_H
#define ONETOMULTIRANGEALIGNMENT_H
#include <memory>

#include "onetoonematch.h"

class DisplayableError;
template<typename LeftType, typename RightType>
class Either;

using std::vector;
using std::unique_ptr;

/**
 * @brief one-to-multi range-to-range alignment
 */
class OneToOneAlignment
{
  using MatchesType = vector<OneToOneMatch>;
  const MatchesType mMatches;
  const QString mLeftText;
  const QString mRightText;
  OneToOneAlignment(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);

public:
  OneToOneAlignment(const OneToOneAlignment&) = default;
  MatchesType::const_iterator begin() const { return mMatches.begin(); }
  MatchesType::const_iterator end() const { return mMatches.end(); }
  MatchesType::size_type size() const { return mMatches.size(); }
  //OneToOneAlignment added(const OneToOneMatch& newMatch) const;
  const QString& leftText() const { return mLeftText; }
  const QString& rightText() const { return mRightText; }
  const MatchesType& matches() const { return mMatches; }
  bool operator==(const OneToOneAlignment& right) const;

  static OneToOneAlignment fromTrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);
  static Either<DisplayableError, OneToOneAlignment> fromUntrusted(const vector<OneToOneMatch>& aMatches, const QString& leftText, const QString& rightText);
  static OneToOneAlignment empty();
};

#endif // ONETOMULTIRANGEALIGNMENT_H
