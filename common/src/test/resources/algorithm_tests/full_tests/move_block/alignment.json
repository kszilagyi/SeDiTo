{
  "matches": [{
    "left": {
      "from": 17,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 21
    },
    "right": {
      "from": 17,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 21
    }
  }, {
    "left": {
      "from": 45,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 182,
      "to": 55
    },
    "right": {
      "from": 45,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 163,
      "to": 55
    }
  }, {
    "left": {
      "from": 34,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 185,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 166,
      "to": 35
    }
  }, {
    "left": {
      "from": 19,
      "line": "import javafx.stage.Stage",
      "lineIdx": 14,
      "to": 20
    },
    "right": {
      "from": 19,
      "line": "import javafx.stage.Stage",
      "lineIdx": 14,
      "to": 20
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 17
    }
  }, {
    "left": {
      "from": 50,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 58
    },
    "right": {
      "from": 50,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 58
    }
  }, {
    "left": {
      "from": 75,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 76
    },
    "right": {
      "from": 75,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 76
    }
  }, {
    "left": {
      "from": 94,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 95
    },
    "right": {
      "from": 94,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 95
    }
  }, {
    "left": {
      "from": 31,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 32
    }
  }, {
    "left": {
      "from": 46,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 47
    }
  }, {
    "left": {
      "from": 34,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 35
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 7
    }
  }, {
    "left": {
      "from": 33,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 48
    },
    "right": {
      "from": 33,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 48
    }
  }, {
    "left": {
      "from": 2,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 9
    },
    "right": {
      "from": 2,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 9
    }
  }, {
    "left": {
      "from": 61,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 62
    },
    "right": {
      "from": 61,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 62
    }
  }, {
    "left": {
      "from": 58,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 62
    },
    "right": {
      "from": 58,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 62
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 15
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 11
    }
  }, {
    "left": {
      "from": 86,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 90
    },
    "right": {
      "from": 86,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 90
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 11
    }
  }, {
    "left": {
      "from": 14,
      "line": "import javafx.application.Application",
      "lineIdx": 13,
      "to": 25
    },
    "right": {
      "from": 14,
      "line": "import javafx.application.Application",
      "lineIdx": 13,
      "to": 25
    }
  }, {
    "left": {
      "from": 33,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 39
    },
    "right": {
      "from": 33,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 39
    }
  }, {
    "left": {
      "from": 35,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 171,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 183,
      "to": 36
    }
  }, {
    "left": {
      "from": 20,
      "line": "import javafx.stage.Stage",
      "lineIdx": 14,
      "to": 25
    },
    "right": {
      "from": 20,
      "line": "import javafx.stage.Stage",
      "lineIdx": 14,
      "to": 25
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 7
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 7
    }
  }, {
    "left": {
      "from": 56,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 57
    }
  }, {
    "left": {
      "from": 19,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 26
    },
    "right": {
      "from": 19,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 26
    }
  }, {
    "left": {
      "from": 11,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 176,
      "to": 16
    },
    "right": {
      "from": 11,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 188,
      "to": 16
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 17
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 17
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 21
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 21
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 7
    }
  }, {
    "left": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 11
    }
  }, {
    "left": {
      "from": 93,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 99
    },
    "right": {
      "from": 93,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 99
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 7
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 21
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 21
    }
  }, {
    "left": {
      "from": 4,
      "line": "    }",
      "lineIdx": 51,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    }",
      "lineIdx": 51,
      "to": 5
    }
  }, {
    "left": {
      "from": 8,
      "line": "        \"\"))",
      "lineIdx": 155,
      "to": 9
    },
    "right": {
      "from": 8,
      "line": "        \"\"))",
      "lineIdx": 155,
      "to": 9
    }
  }, {
    "left": {
      "from": 66,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 67
    },
    "right": {
      "from": 66,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 67
    }
  }, {
    "left": {
      "from": 78,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 79
    },
    "right": {
      "from": 78,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 79
    }
  }, {
    "left": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 33
    },
    "right": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 33
    }
  }, {
    "left": {
      "from": 68,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 69
    },
    "right": {
      "from": 68,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 69
    }
  }, {
    "left": {
      "from": 45,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 46
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 17
    }
  }, {
    "left": {
      "from": 5,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 167,
      "to": 21
    },
    "right": {
      "from": 5,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 179,
      "to": 21
    }
  }, {
    "left": {
      "from": 45,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 46
    }
  }, {
    "left": {
      "from": 43,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 50
    },
    "right": {
      "from": 43,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 50
    }
  }, {
    "left": {
      "from": 33,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 37
    },
    "right": {
      "from": 33,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 37
    }
  }, {
    "left": {
      "from": 34,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 36
    },
    "right": {
      "from": 34,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 36
    }
  }, {
    "left": {
      "from": 19,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 35
    },
    "right": {
      "from": 19,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 35
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 25
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 25
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 16
    }
  }, {
    "left": {
      "from": 27,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 31
    },
    "right": {
      "from": 27,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 31
    }
  }, {
    "left": {
      "from": 4,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 10
    }
  }, {
    "left": {
      "from": 7,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 12
    },
    "right": {
      "from": 7,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 12
    }
  }, {
    "left": {
      "from": 85,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 86
    },
    "right": {
      "from": 85,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 86
    }
  }, {
    "left": {
      "from": 34,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 35
    }
  }, {
    "left": {
      "from": 34,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 35
    }
  }, {
    "left": {
      "from": 41,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 44
    },
    "right": {
      "from": 41,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 44
    }
  }, {
    "left": {
      "from": 14,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 15
    },
    "right": {
      "from": 14,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 15
    }
  }, {
    "left": {
      "from": 101,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 107
    },
    "right": {
      "from": 101,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 107
    }
  }, {
    "left": {
      "from": 30,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 32
    },
    "right": {
      "from": 30,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 32
    }
  }, {
    "left": {
      "from": 27,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 28
    }
  }, {
    "left": {
      "from": 66,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 67
    },
    "right": {
      "from": 66,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 67
    }
  }, {
    "left": {
      "from": 17,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 18
    }
  }, {
    "left": {
      "from": 4,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 11
    },
    "right": {
      "from": 4,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 11
    }
  }, {
    "left": {
      "from": 16,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 20
    },
    "right": {
      "from": 16,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 20
    }
  }, {
    "left": {
      "from": 30,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 31
    }
  }, {
    "left": {
      "from": 62,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 69
    },
    "right": {
      "from": 62,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 69
    }
  }, {
    "left": {
      "from": 54,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 55
    }
  }, {
    "left": {
      "from": 10,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 11
    }
  }, {
    "left": {
      "from": 4,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 181,
      "to": 9
    },
    "right": {
      "from": 4,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 162,
      "to": 9
    }
  }, {
    "left": {
      "from": 4,
      "line": "    num",
      "lineIdx": 143,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    num",
      "lineIdx": 143,
      "to": 7
    }
  }, {
    "left": {
      "from": 14,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 42
    },
    "right": {
      "from": 14,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 42
    }
  }, {
    "left": {
      "from": 32,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 33
    }
  }, {
    "left": {
      "from": 30,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 46
    },
    "right": {
      "from": 30,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 46
    }
  }, {
    "left": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 10
    },
    "right": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 10
    }
  }, {
    "left": {
      "from": 18,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 164,
      "to": 46
    },
    "right": {
      "from": 18,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 176,
      "to": 46
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 25
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 25
    }
  }, {
    "left": {
      "from": 61,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 62
    },
    "right": {
      "from": 61,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 62
    }
  }, {
    "left": {
      "from": 26,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 181,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 162,
      "to": 27
    }
  }, {
    "left": {
      "from": 60,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 61
    },
    "right": {
      "from": 60,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 61
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 16
    }
  }, {
    "left": {
      "from": 26,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 45
    },
    "right": {
      "from": 26,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 45
    }
  }, {
    "left": {
      "from": 21,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 22
    }
  }, {
    "left": {
      "from": 30,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 180,
      "to": 43
    },
    "right": {
      "from": 30,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 161,
      "to": 43
    }
  }, {
    "left": {
      "from": 68,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 76
    },
    "right": {
      "from": 68,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 76
    }
  }, {
    "left": {
      "from": 19,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 31
    },
    "right": {
      "from": 19,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 31
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 10
    }
  }, {
    "left": {
      "from": 32,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 33
    }
  }, {
    "left": {
      "from": 23,
      "line": "  private val logger = getLogger",
      "lineIdx": 30,
      "to": 32
    },
    "right": {
      "from": 23,
      "line": "  private val logger = getLogger",
      "lineIdx": 30,
      "to": 32
    }
  }, {
    "left": {
      "from": 50,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 51
    }
  }, {
    "left": {
      "from": 42,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 43
    },
    "right": {
      "from": 42,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 43
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 11
    }
  }, {
    "left": {
      "from": 58,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 59
    },
    "right": {
      "from": 58,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 59
    }
  }, {
    "left": {
      "from": 34,
      "line": "    val training = nestedTraining.flatten",
      "lineIdx": 82,
      "to": 41
    },
    "right": {
      "from": 34,
      "line": "    val training = nestedTraining.flatten",
      "lineIdx": 82,
      "to": 41
    }
  }, {
    "left": {
      "from": 46,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 53
    },
    "right": {
      "from": 46,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 53
    }
  }, {
    "left": {
      "from": 46,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 47
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 38
    },
    "right": {
      "from": 35,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 38
    }
  }, {
    "left": {
      "from": 60,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 61
    },
    "right": {
      "from": 60,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 61
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 21
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 21
    }
  }, {
    "left": {
      "from": 36,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 41
    },
    "right": {
      "from": 36,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 41
    }
  }, {
    "left": {
      "from": 83,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 90
    },
    "right": {
      "from": 83,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 90
    }
  }, {
    "left": {
      "from": 12,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 15
    },
    "right": {
      "from": 12,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 15
    }
  }, {
    "left": {
      "from": 14,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 17
    },
    "right": {
      "from": 14,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 17
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 17
    }
  }, {
    "left": {
      "from": 55,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 56
    }
  }, {
    "left": {
      "from": 13,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 14
    },
    "right": {
      "from": 13,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 14
    }
  }, {
    "left": {
      "from": 7,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 12
    },
    "right": {
      "from": 7,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 12
    }
  }, {
    "left": {
      "from": 50,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 58
    },
    "right": {
      "from": 50,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 58
    }
  }, {
    "left": {
      "from": 33,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 34
    }
  }, {
    "left": {
      "from": 27,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 28
    }
  }, {
    "left": {
      "from": 32,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 36
    },
    "right": {
      "from": 32,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 36
    }
  }, {
    "left": {
      "from": 62,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 63
    },
    "right": {
      "from": 62,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 63
    }
  }, {
    "left": {
      "from": 48,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 56
    },
    "right": {
      "from": 48,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 56
    }
  }, {
    "left": {
      "from": 30,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 31
    }
  }, {
    "left": {
      "from": 47,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 48
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 7
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 18
    },
    "right": {
      "from": 8,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 18
    }
  }, {
    "left": {
      "from": 6,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 21
    },
    "right": {
      "from": 6,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 21
    }
  }, {
    "left": {
      "from": 21,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 23
    },
    "right": {
      "from": 21,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 23
    }
  }, {
    "left": {
      "from": 32,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 33
    }
  }, {
    "left": {
      "from": 50,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 61
    },
    "right": {
      "from": 50,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 61
    }
  }, {
    "left": {
      "from": 42,
      "line": "final class PlotData extends FreeSpecLike {",
      "lineIdx": 162,
      "to": 43
    },
    "right": {
      "from": 42,
      "line": "final class PlotData extends FreeSpecLike {",
      "lineIdx": 174,
      "to": 43
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 16
    }
  }, {
    "left": {
      "from": 78,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 79
    },
    "right": {
      "from": 78,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 79
    }
  }, {
    "left": {
      "from": 27,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 35
    },
    "right": {
      "from": 27,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 35
    }
  }, {
    "left": {
      "from": 26,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 32
    },
    "right": {
      "from": 26,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 32
    }
  }, {
    "left": {
      "from": 10,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 17
    },
    "right": {
      "from": 10,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 17
    }
  }, {
    "left": {
      "from": 49,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 50
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 25
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 25
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 7
    }
  }, {
    "left": {
      "from": 26,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 30
    },
    "right": {
      "from": 26,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 30
    }
  }, {
    "left": {
      "from": 30,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 45
    },
    "right": {
      "from": 30,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 45
    }
  }, {
    "left": {
      "from": 16,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 17
    }
  }, {
    "left": {
      "from": 50,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 51
    }
  }, {
    "left": {
      "from": 21,
      "line": "    val matchesSet = matches.toSet",
      "lineIdx": 45,
      "to": 28
    },
    "right": {
      "from": 21,
      "line": "    val matchesSet = matches.toSet",
      "lineIdx": 45,
      "to": 28
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 11
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 36
    }
  }, {
    "left": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 10
    },
    "right": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 10
    }
  }, {
    "left": {
      "from": 20,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 21
    },
    "right": {
      "from": 20,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 21
    }
  }, {
    "left": {
      "from": 102,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 103
    },
    "right": {
      "from": 102,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 103
    }
  }, {
    "left": {
      "from": 7,
      "line": "import smile.validation._",
      "lineIdx": 21,
      "to": 12
    },
    "right": {
      "from": 7,
      "line": "import smile.validation._",
      "lineIdx": 21,
      "to": 12
    }
  }, {
    "left": {
      "from": 47,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 50
    },
    "right": {
      "from": 47,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 50
    }
  }, {
    "left": {
      "from": 42,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 52
    },
    "right": {
      "from": 42,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 52
    }
  }, {
    "left": {
      "from": 44,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 45
    }
  }, {
    "left": {
      "from": 12,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 18
    },
    "right": {
      "from": 12,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 18
    }
  }, {
    "left": {
      "from": 36,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 38
    },
    "right": {
      "from": 36,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 38
    }
  }, {
    "left": {
      "from": 56,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 57
    }
  }, {
    "left": {
      "from": 21,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 185,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 166,
      "to": 22
    }
  }, {
    "left": {
      "from": 50,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 51
    }
  }, {
    "left": {
      "from": 28,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 29
    }
  }, {
    "left": {
      "from": 32,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 33
    }
  }, {
    "left": {
      "from": 52,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 53
    },
    "right": {
      "from": 52,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 53
    }
  }, {
    "left": {
      "from": 31,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 49
    },
    "right": {
      "from": 31,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 49
    }
  }, {
    "left": {
      "from": 51,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 52
    },
    "right": {
      "from": 51,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 52
    }
  }, {
    "left": {
      "from": 17,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 35
    },
    "right": {
      "from": 17,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 35
    }
  }, {
    "left": {
      "from": 75,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 80
    },
    "right": {
      "from": 75,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 80
    }
  }, {
    "left": {
      "from": 75,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 76
    },
    "right": {
      "from": 75,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 76
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 21
    },
    "right": {
      "from": 8,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 21
    }
  }, {
    "left": {
      "from": 0,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 6
    }
  }, {
    "left": {
      "from": 25,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 26
    }
  }, {
    "left": {
      "from": 38,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 39
    }
  }, {
    "left": {
      "from": 64,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 73
    },
    "right": {
      "from": 64,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 73
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 15
    }
  }, {
    "left": {
      "from": 12,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 13
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 7
    }
  }, {
    "left": {
      "from": 77,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 78
    },
    "right": {
      "from": 77,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 78
    }
  }, {
    "left": {
      "from": 32,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 36
    },
    "right": {
      "from": 32,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 36
    }
  }, {
    "left": {
      "from": 25,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 26
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val training = nestedTraining.flatten",
      "lineIdx": 82,
      "to": 16
    },
    "right": {
      "from": 8,
      "line": "    val training = nestedTraining.flatten",
      "lineIdx": 82,
      "to": 16
    }
  }, {
    "left": {
      "from": 66,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 78
    },
    "right": {
      "from": 66,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 78
    }
  }, {
    "left": {
      "from": 27,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 28
    }
  }, {
    "left": {
      "from": 48,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 49
    }
  }, {
    "left": {
      "from": 28,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 35
    },
    "right": {
      "from": 28,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 35
    }
  }, {
    "left": {
      "from": 35,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 43
    },
    "right": {
      "from": 35,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 43
    }
  }, {
    "left": {
      "from": 6,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 9
    },
    "right": {
      "from": 6,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 9
    }
  }, {
    "left": {
      "from": 26,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 27
    }
  }, {
    "left": {
      "from": 64,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 71
    },
    "right": {
      "from": 64,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 71
    }
  }, {
    "left": {
      "from": 20,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 31
    },
    "right": {
      "from": 20,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 31
    }
  }, {
    "left": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 40
    },
    "right": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 40
    }
  }, {
    "left": {
      "from": 33,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 43
    },
    "right": {
      "from": 33,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 43
    }
  }, {
    "left": {
      "from": 30,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 31
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 16
    }
  }, {
    "left": {
      "from": 57,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 68
    },
    "right": {
      "from": 57,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 68
    }
  }, {
    "left": {
      "from": 39,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 40
    },
    "right": {
      "from": 39,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 40
    }
  }, {
    "left": {
      "from": 49,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 50
    }
  }, {
    "left": {
      "from": 17,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 18
    }
  }, {
    "left": {
      "from": 4,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 5
    }
  }, {
    "left": {
      "from": 34,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 41
    },
    "right": {
      "from": 34,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 41
    }
  }, {
    "left": {
      "from": 41,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 42
    }
  }, {
    "left": {
      "from": 115,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 116
    },
    "right": {
      "from": 115,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 116
    }
  }, {
    "left": {
      "from": 20,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 21
    },
    "right": {
      "from": 20,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 21
    }
  }, {
    "left": {
      "from": 86,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 87
    },
    "right": {
      "from": 86,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 87
    }
  }, {
    "left": {
      "from": 40,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 41
    }
  }, {
    "left": {
      "from": 53,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 57
    },
    "right": {
      "from": 53,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 57
    }
  }, {
    "left": {
      "from": 100,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 101
    },
    "right": {
      "from": 100,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 101
    }
  }, {
    "left": {
      "from": 57,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 58
    },
    "right": {
      "from": 57,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 58
    }
  }, {
    "left": {
      "from": 24,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 25
    },
    "right": {
      "from": 24,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 25
    }
  }, {
    "left": {
      "from": 36,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 40
    },
    "right": {
      "from": 36,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 40
    }
  }, {
    "left": {
      "from": 33,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 165,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 177,
      "to": 34
    }
  }, {
    "left": {
      "from": 28,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 29
    }
  }, {
    "left": {
      "from": 90,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 91
    },
    "right": {
      "from": 90,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 91
    }
  }, {
    "left": {
      "from": 27,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 30
    },
    "right": {
      "from": 27,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 30
    }
  }, {
    "left": {
      "from": 17,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 18
    }
  }, {
    "left": {
      "from": 58,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 70
    },
    "right": {
      "from": 58,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 70
    }
  }, {
    "left": {
      "from": 12,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 13
    }
  }, {
    "left": {
      "from": 72,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 73
    },
    "right": {
      "from": 72,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 73
    }
  }, {
    "left": {
      "from": 77,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 82
    },
    "right": {
      "from": 77,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 82
    }
  }, {
    "left": {
      "from": 20,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 25
    },
    "right": {
      "from": 20,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 25
    }
  }, {
    "left": {
      "from": 45,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 46
    }
  }, {
    "left": {
      "from": 60,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 61
    },
    "right": {
      "from": 60,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 61
    }
  }, {
    "left": {
      "from": 78,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 83
    },
    "right": {
      "from": 78,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 83
    }
  }, {
    "left": {
      "from": 91,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 92
    },
    "right": {
      "from": 91,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 92
    }
  }, {
    "left": {
      "from": 21,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 22
    }
  }, {
    "left": {
      "from": 43,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 48
    },
    "right": {
      "from": 43,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 48
    }
  }, {
    "left": {
      "from": 34,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 171,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 183,
      "to": 35
    }
  }, {
    "left": {
      "from": 14,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 32
    },
    "right": {
      "from": 14,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 32
    }
  }, {
    "left": {
      "from": 33,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 34
    }
  }, {
    "left": {
      "from": 45,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 46
    }
  }, {
    "left": {
      "from": 76,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 77
    },
    "right": {
      "from": 76,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 77
    }
  }, {
    "left": {
      "from": 32,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 33
    }
  }, {
    "left": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 34
    }
  }, {
    "left": {
      "from": 42,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 48
    },
    "right": {
      "from": 42,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 48
    }
  }, {
    "left": {
      "from": 40,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 41
    }
  }, {
    "left": {
      "from": 66,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 67
    },
    "right": {
      "from": 66,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 67
    }
  }, {
    "left": {
      "from": 84,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 100
    },
    "right": {
      "from": 84,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 100
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 30
    },
    "right": {
      "from": 8,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 30
    }
  }, {
    "left": {
      "from": 4,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 171,
      "to": 11
    },
    "right": {
      "from": 4,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 183,
      "to": 11
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 21
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 21
    }
  }, {
    "left": {
      "from": 17,
      "line": "    (classifier, scaler)",
      "lineIdx": 122,
      "to": 23
    },
    "right": {
      "from": 17,
      "line": "    (classifier, scaler)",
      "lineIdx": 122,
      "to": 23
    }
  }, {
    "left": {
      "from": 16,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 17
    }
  }, {
    "left": {
      "from": 31,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 32
    }
  }, {
    "left": {
      "from": 51,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 54
    },
    "right": {
      "from": 51,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 54
    }
  }, {
    "left": {
      "from": 81,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 85
    },
    "right": {
      "from": 81,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 85
    }
  }, {
    "left": {
      "from": 46,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 50
    },
    "right": {
      "from": 46,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 50
    }
  }, {
    "left": {
      "from": 53,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 68
    },
    "right": {
      "from": 53,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 68
    }
  }, {
    "left": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 11
    }
  }, {
    "left": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 34
    }
  }, {
    "left": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 27
    }
  }, {
    "left": {
      "from": 17,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 18
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 16
    },
    "right": {
      "from": 8,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 16
    }
  }, {
    "left": {
      "from": 25,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 26
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 13
    },
    "right": {
      "from": 8,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 13
    }
  }, {
    "left": {
      "from": 78,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 79
    },
    "right": {
      "from": 78,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 79
    }
  }, {
    "left": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 10
    },
    "right": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 10
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 20
    },
    "right": {
      "from": 8,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 20
    }
  }, {
    "left": {
      "from": 12,
      "line": "      path -> f1Score",
      "lineIdx": 187,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "      path -> f1Score",
      "lineIdx": 168,
      "to": 13
    }
  }, {
    "left": {
      "from": 27,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 28
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 7
    }
  }, {
    "left": {
      "from": 4,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 10
    }
  }, {
    "left": {
      "from": 80,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 81
    },
    "right": {
      "from": 80,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 81
    }
  }, {
    "left": {
      "from": 14,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 15
    },
    "right": {
      "from": 14,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 15
    }
  }, {
    "left": {
      "from": 103,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 104
    },
    "right": {
      "from": 103,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 104
    }
  }, {
    "left": {
      "from": 39,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 40
    },
    "right": {
      "from": 39,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 40
    }
  }, {
    "left": {
      "from": 13,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 27
    },
    "right": {
      "from": 13,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 27
    }
  }, {
    "left": {
      "from": 28,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 29
    }
  }, {
    "left": {
      "from": 54,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 183,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 164,
      "to": 55
    }
  }, {
    "left": {
      "from": 10,
      "line": "        \"\"))",
      "lineIdx": 155,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "        \"\"))",
      "lineIdx": 155,
      "to": 11
    }
  }, {
    "left": {
      "from": 39,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 40
    },
    "right": {
      "from": 39,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 40
    }
  }, {
    "left": {
      "from": 28,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 35
    },
    "right": {
      "from": 28,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 35
    }
  }, {
    "left": {
      "from": 89,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 90
    },
    "right": {
      "from": 89,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 90
    }
  }, {
    "left": {
      "from": 0,
      "line": "import org.scalatest.FreeSpecLike",
      "lineIdx": 16,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import org.scalatest.FreeSpecLike",
      "lineIdx": 16,
      "to": 6
    }
  }, {
    "left": {
      "from": 37,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 54
    },
    "right": {
      "from": 37,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 54
    }
  }, {
    "left": {
      "from": 57,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 183,
      "to": 58
    },
    "right": {
      "from": 57,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 164,
      "to": 58
    }
  }, {
    "left": {
      "from": 35,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 36
    }
  }, {
    "left": {
      "from": 81,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 85
    },
    "right": {
      "from": 81,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 85
    }
  }, {
    "left": {
      "from": 18,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 26
    },
    "right": {
      "from": 18,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 26
    }
  }, {
    "left": {
      "from": 59,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 60
    },
    "right": {
      "from": 59,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 60
    }
  }, {
    "left": {
      "from": 38,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 48
    },
    "right": {
      "from": 38,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 48
    }
  }, {
    "left": {
      "from": 50,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 51
    }
  }, {
    "left": {
      "from": 56,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 57
    }
  }, {
    "left": {
      "from": 18,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 19
    },
    "right": {
      "from": 18,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 19
    }
  }, {
    "left": {
      "from": 40,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 41
    }
  }, {
    "left": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 6
    }
  }, {
    "left": {
      "from": 33,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 34
    }
  }, {
    "left": {
      "from": 73,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 79
    },
    "right": {
      "from": 73,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 79
    }
  }, {
    "left": {
      "from": 16,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 164,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 176,
      "to": 17
    }
  }, {
    "left": {
      "from": 13,
      "line": "import javafx.application.Application",
      "lineIdx": 13,
      "to": 14
    },
    "right": {
      "from": 13,
      "line": "import javafx.application.Application",
      "lineIdx": 13,
      "to": 14
    }
  }, {
    "left": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 40
    },
    "right": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 40
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 25
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 25
    }
  }, {
    "left": {
      "from": 17,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 51
    },
    "right": {
      "from": 17,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 51
    }
  }, {
    "left": {
      "from": 36,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 44
    },
    "right": {
      "from": 36,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 44
    }
  }, {
    "left": {
      "from": 62,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 77
    },
    "right": {
      "from": 62,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 77
    }
  }, {
    "left": {
      "from": 37,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 53
    },
    "right": {
      "from": 37,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 53
    }
  }, {
    "left": {
      "from": 66,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 76
    },
    "right": {
      "from": 66,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 76
    }
  }, {
    "left": {
      "from": 27,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 167,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 179,
      "to": 28
    }
  }, {
    "left": {
      "from": 32,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 33
    }
  }, {
    "left": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 10
    },
    "right": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 10
    }
  }, {
    "left": {
      "from": 2,
      "line": "  final class ShowOne extends Application {",
      "lineIdx": 148,
      "to": 7
    },
    "right": {
      "from": 2,
      "line": "  final class ShowOne extends Application {",
      "lineIdx": 148,
      "to": 7
    }
  }, {
    "left": {
      "from": 69,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 70
    },
    "right": {
      "from": 69,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 70
    }
  }, {
    "left": {
      "from": 15,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 188,
      "to": 17
    },
    "right": {
      "from": 15,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 169,
      "to": 17
    }
  }, {
    "left": {
      "from": 66,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 67
    },
    "right": {
      "from": 66,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 67
    }
  }, {
    "left": {
      "from": 76,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 77
    },
    "right": {
      "from": 76,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 77
    }
  }, {
    "left": {
      "from": 27,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 31
    },
    "right": {
      "from": 27,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 31
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 16
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 10
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 15
    }
  }, {
    "left": {
      "from": 56,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 183,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 164,
      "to": 57
    }
  }, {
    "left": {
      "from": 27,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 40
    },
    "right": {
      "from": 27,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 40
    }
  }, {
    "left": {
      "from": 6,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 10
    },
    "right": {
      "from": 6,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 10
    }
  }, {
    "left": {
      "from": 16,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 17
    }
  }, {
    "left": {
      "from": 18,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 194,
      "to": 46
    },
    "right": {
      "from": 18,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 194,
      "to": 46
    }
  }, {
    "left": {
      "from": 49,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 58
    },
    "right": {
      "from": 49,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 58
    }
  }, {
    "left": {
      "from": 52,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 59
    },
    "right": {
      "from": 52,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 59
    }
  }, {
    "left": {
      "from": 40,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 48
    },
    "right": {
      "from": 40,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 48
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 15
    }
  }, {
    "left": {
      "from": 16,
      "line": "        sys.exit(1)",
      "lineIdx": 36,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "        sys.exit(1)",
      "lineIdx": 36,
      "to": 17
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val test = nestedTest.flatten",
      "lineIdx": 83,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val test = nestedTest.flatten",
      "lineIdx": 83,
      "to": 7
    }
  }, {
    "left": {
      "from": 48,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 52
    },
    "right": {
      "from": 48,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 52
    }
  }, {
    "left": {
      "from": 19,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 20
    },
    "right": {
      "from": 19,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 20
    }
  }, {
    "left": {
      "from": 32,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 33
    }
  }, {
    "left": {
      "from": 28,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 167,
      "to": 33
    },
    "right": {
      "from": 28,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 179,
      "to": 33
    }
  }, {
    "left": {
      "from": 16,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 17
    }
  }, {
    "left": {
      "from": 19,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 27
    },
    "right": {
      "from": 19,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 27
    }
  }, {
    "left": {
      "from": 32,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 33
    }
  }, {
    "left": {
      "from": 33,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 34
    }
  }, {
    "left": {
      "from": 46,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 53
    },
    "right": {
      "from": 46,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 53
    }
  }, {
    "left": {
      "from": 10,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 18
    },
    "right": {
      "from": 10,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 18
    }
  }, {
    "left": {
      "from": 79,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 80
    },
    "right": {
      "from": 79,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 80
    }
  }, {
    "left": {
      "from": 28,
      "line": "    val matchesSet = matches.toSet",
      "lineIdx": 45,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    val matchesSet = matches.toSet",
      "lineIdx": 45,
      "to": 29
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 14
    },
    "right": {
      "from": 8,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 14
    }
  }, {
    "left": {
      "from": 34,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 39
    },
    "right": {
      "from": 34,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 39
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 10
    }
  }, {
    "left": {
      "from": 43,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 44
    },
    "right": {
      "from": 43,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 44
    }
  }, {
    "left": {
      "from": 81,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 82
    },
    "right": {
      "from": 81,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 82
    }
  }, {
    "left": {
      "from": 33,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 47
    },
    "right": {
      "from": 33,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 47
    }
  }, {
    "left": {
      "from": 20,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 171,
      "to": 27
    },
    "right": {
      "from": 20,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 183,
      "to": 27
    }
  }, {
    "left": {
      "from": 62,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 63
    },
    "right": {
      "from": 62,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 63
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 16
    },
    "right": {
      "from": 8,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 16
    }
  }, {
    "left": {
      "from": 69,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 70
    },
    "right": {
      "from": 69,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 70
    }
  }, {
    "left": {
      "from": 43,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 44
    },
    "right": {
      "from": 43,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 44
    }
  }, {
    "left": {
      "from": 88,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 89
    },
    "right": {
      "from": 88,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 89
    }
  }, {
    "left": {
      "from": 33,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 34
    }
  }, {
    "left": {
      "from": 64,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 72
    },
    "right": {
      "from": 64,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 72
    }
  }, {
    "left": {
      "from": 19,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 20
    },
    "right": {
      "from": 19,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 20
    }
  }, {
    "left": {
      "from": 34,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 35
    }
  }, {
    "left": {
      "from": 11,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 16
    },
    "right": {
      "from": 11,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 16
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 7
    }
  }, {
    "left": {
      "from": 34,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 35
    }
  }, {
    "left": {
      "from": 64,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 65
    },
    "right": {
      "from": 64,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 65
    }
  }, {
    "left": {
      "from": 11,
      "line": "import org.scalatest.FreeSpecLike",
      "lineIdx": 16,
      "to": 20
    },
    "right": {
      "from": 11,
      "line": "import org.scalatest.FreeSpecLike",
      "lineIdx": 16,
      "to": 20
    }
  }, {
    "left": {
      "from": 77,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 78
    },
    "right": {
      "from": 77,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 78
    }
  }, {
    "left": {
      "from": 46,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 47
    }
  }, {
    "left": {
      "from": 17,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 18
    }
  }, {
    "left": {
      "from": 56,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 57
    }
  }, {
    "left": {
      "from": 77,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 78
    },
    "right": {
      "from": 77,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 78
    }
  }, {
    "left": {
      "from": 65,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 66
    },
    "right": {
      "from": 65,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 66
    }
  }, {
    "left": {
      "from": 51,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 52
    },
    "right": {
      "from": 51,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 52
    }
  }, {
    "left": {
      "from": 20,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 25
    },
    "right": {
      "from": 20,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 25
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 11
    }
  }, {
    "left": {
      "from": 32,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 42
    },
    "right": {
      "from": 32,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 42
    }
  }, {
    "left": {
      "from": 15,
      "line": "    (classifier, scaler)",
      "lineIdx": 122,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    (classifier, scaler)",
      "lineIdx": 122,
      "to": 16
    }
  }, {
    "left": {
      "from": 37,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 43
    },
    "right": {
      "from": 37,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 43
    }
  }, {
    "left": {
      "from": 50,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 51
    }
  }, {
    "left": {
      "from": 10,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 11
    }
  }, {
    "left": {
      "from": 30,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 171,
      "to": 33
    },
    "right": {
      "from": 30,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 183,
      "to": 33
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 16
    },
    "right": {
      "from": 8,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 16
    }
  }, {
    "left": {
      "from": 18,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 25
    },
    "right": {
      "from": 18,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 25
    }
  }, {
    "left": {
      "from": 22,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 23
    }
  }, {
    "left": {
      "from": 92,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 97
    },
    "right": {
      "from": 92,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 97
    }
  }, {
    "left": {
      "from": 31,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 32
    }
  }, {
    "left": {
      "from": 40,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 41
    }
  }, {
    "left": {
      "from": 86,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 87
    },
    "right": {
      "from": 86,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 87
    }
  }, {
    "left": {
      "from": 63,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 64
    },
    "right": {
      "from": 63,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 64
    }
  }, {
    "left": {
      "from": 7,
      "line": "import javafx.application.Application",
      "lineIdx": 13,
      "to": 13
    },
    "right": {
      "from": 7,
      "line": "import javafx.application.Application",
      "lineIdx": 13,
      "to": 13
    }
  }, {
    "left": {
      "from": 47,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 48
    }
  }, {
    "left": {
      "from": 49,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 50
    }
  }, {
    "left": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 11
    }
  }, {
    "left": {
      "from": 23,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 24
    },
    "right": {
      "from": 23,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 24
    }
  }, {
    "left": {
      "from": 17,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 18
    }
  }, {
    "left": {
      "from": 26,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 40
    },
    "right": {
      "from": 26,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 40
    }
  }, {
    "left": {
      "from": 29,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 30
    }
  }, {
    "left": {
      "from": 29,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 39
    },
    "right": {
      "from": 29,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 39
    }
  }, {
    "left": {
      "from": 54,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 55
    }
  }, {
    "left": {
      "from": 47,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 48
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 18
    }
  }, {
    "left": {
      "from": 52,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 53
    },
    "right": {
      "from": 52,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 53
    }
  }, {
    "left": {
      "from": 40,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 45
    },
    "right": {
      "from": 40,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 45
    }
  }, {
    "left": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 33
    },
    "right": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 33
    }
  }, {
    "left": {
      "from": 90,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 91
    },
    "right": {
      "from": 90,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 91
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 7
    }
  }, {
    "left": {
      "from": 24,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 25
    },
    "right": {
      "from": 24,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 25
    }
  }, {
    "left": {
      "from": 76,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 89
    },
    "right": {
      "from": 76,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 89
    }
  }, {
    "left": {
      "from": 16,
      "line": "object PlotData {",
      "lineIdx": 29,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "object PlotData {",
      "lineIdx": 29,
      "to": 17
    }
  }, {
    "left": {
      "from": 58,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 59
    },
    "right": {
      "from": 58,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 59
    }
  }, {
    "left": {
      "from": 44,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 45
    }
  }, {
    "left": {
      "from": 40,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 48
    },
    "right": {
      "from": 40,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 48
    }
  }, {
    "left": {
      "from": 54,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 55
    }
  }, {
    "left": {
      "from": 53,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 54
    }
  }, {
    "left": {
      "from": 49,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 50
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 27
    },
    "right": {
      "from": 8,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 27
    }
  }, {
    "left": {
      "from": 4,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 15
    },
    "right": {
      "from": 4,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 15
    }
  }, {
    "left": {
      "from": 5,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 21
    },
    "right": {
      "from": 5,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 21
    }
  }, {
    "left": {
      "from": 49,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 50
    }
  }, {
    "left": {
      "from": 50,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 51
    }
  }, {
    "left": {
      "from": 36,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 37
    },
    "right": {
      "from": 36,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 37
    }
  }, {
    "left": {
      "from": 59,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 64
    },
    "right": {
      "from": 59,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 64
    }
  }, {
    "left": {
      "from": 44,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 45
    }
  }, {
    "left": {
      "from": 102,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 111
    },
    "right": {
      "from": 102,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 111
    }
  }, {
    "left": {
      "from": 27,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 165,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 177,
      "to": 28
    }
  }, {
    "left": {
      "from": 82,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 83
    },
    "right": {
      "from": 82,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 83
    }
  }, {
    "left": {
      "from": 17,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 18
    }
  }, {
    "left": {
      "from": 21,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 22
    }
  }, {
    "left": {
      "from": 33,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 34
    }
  }, {
    "left": {
      "from": 72,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 73
    },
    "right": {
      "from": 72,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 73
    }
  }, {
    "left": {
      "from": 39,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 46
    },
    "right": {
      "from": 39,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 46
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 17
    }
  }, {
    "left": {
      "from": 12,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 13
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 15
    }
  }, {
    "left": {
      "from": 84,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 85
    },
    "right": {
      "from": 84,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 85
    }
  }, {
    "left": {
      "from": 20,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 23
    },
    "right": {
      "from": 20,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 23
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 10
    }
  }, {
    "left": {
      "from": 71,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 72
    },
    "right": {
      "from": 71,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 72
    }
  }, {
    "left": {
      "from": 62,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 180,
      "to": 65
    },
    "right": {
      "from": 62,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 161,
      "to": 65
    }
  }, {
    "left": {
      "from": 17,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 18
    }
  }, {
    "left": {
      "from": 73,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 74
    },
    "right": {
      "from": 73,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 74
    }
  }, {
    "left": {
      "from": 14,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 29
    },
    "right": {
      "from": 14,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 29
    }
  }, {
    "left": {
      "from": 42,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 43
    },
    "right": {
      "from": 42,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 43
    }
  }, {
    "left": {
      "from": 34,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 186,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 167,
      "to": 35
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 16
    }
  }, {
    "left": {
      "from": 30,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 31
    }
  }, {
    "left": {
      "from": 10,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 185,
      "to": 20
    },
    "right": {
      "from": 10,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 166,
      "to": 20
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 21
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 21
    }
  }, {
    "left": {
      "from": 22,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 23
    }
  }, {
    "left": {
      "from": 29,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 30
    }
  }, {
    "left": {
      "from": 62,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 63
    },
    "right": {
      "from": 62,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 63
    }
  }, {
    "left": {
      "from": 2,
      "line": "  }",
      "lineIdx": 63,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  }",
      "lineIdx": 63,
      "to": 3
    }
  }, {
    "left": {
      "from": 46,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 47
    }
  }, {
    "left": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 33
    },
    "right": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 33
    }
  }, {
    "left": {
      "from": 61,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 62
    },
    "right": {
      "from": 61,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 62
    }
  }, {
    "left": {
      "from": 29,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 30
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 11
    }
  }, {
    "left": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 11
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 11
    }
  }, {
    "left": {
      "from": 19,
      "line": "    val training = nestedTraining.flatten",
      "lineIdx": 82,
      "to": 33
    },
    "right": {
      "from": 19,
      "line": "    val training = nestedTraining.flatten",
      "lineIdx": 82,
      "to": 33
    }
  }, {
    "left": {
      "from": 72,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 73
    },
    "right": {
      "from": 72,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 73
    }
  }, {
    "left": {
      "from": 56,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 57
    }
  }, {
    "left": {
      "from": 29,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 30
    }
  }, {
    "left": {
      "from": 22,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 32
    },
    "right": {
      "from": 22,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 32
    }
  }, {
    "left": {
      "from": 34,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 35
    }
  }, {
    "left": {
      "from": 21,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 22
    }
  }, {
    "left": {
      "from": 44,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 45
    }
  }, {
    "left": {
      "from": 47,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 48
    }
  }, {
    "left": {
      "from": 90,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 91
    },
    "right": {
      "from": 90,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 91
    }
  }, {
    "left": {
      "from": 56,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 57
    }
  }, {
    "left": {
      "from": 61,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 62
    },
    "right": {
      "from": 61,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 62
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 17
    }
  }, {
    "left": {
      "from": 29,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 33
    },
    "right": {
      "from": 29,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 33
    }
  }, {
    "left": {
      "from": 10,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 184,
      "to": 21
    },
    "right": {
      "from": 10,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 165,
      "to": 21
    }
  }, {
    "left": {
      "from": 26,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 27
    }
  }, {
    "left": {
      "from": 54,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 55
    }
  }, {
    "left": {
      "from": 7,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 12
    },
    "right": {
      "from": 7,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 12
    }
  }, {
    "left": {
      "from": 58,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 59
    },
    "right": {
      "from": 58,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 59
    }
  }, {
    "left": {
      "from": 23,
      "line": "import smile.validation._",
      "lineIdx": 21,
      "to": 24
    },
    "right": {
      "from": 23,
      "line": "import smile.validation._",
      "lineIdx": 21,
      "to": 24
    }
  }, {
    "left": {
      "from": 132,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 133
    },
    "right": {
      "from": 132,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 133
    }
  }, {
    "left": {
      "from": 21,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 23
    },
    "right": {
      "from": 21,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 23
    }
  }, {
    "left": {
      "from": 27,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 36
    },
    "right": {
      "from": 27,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 36
    }
  }, {
    "left": {
      "from": 11,
      "line": "        sys.exit(1)",
      "lineIdx": 36,
      "to": 12
    },
    "right": {
      "from": 11,
      "line": "        sys.exit(1)",
      "lineIdx": 36,
      "to": 12
    }
  }, {
    "left": {
      "from": 15,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 16
    }
  }, {
    "left": {
      "from": 29,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 30
    }
  }, {
    "left": {
      "from": 38,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 39
    }
  }, {
    "left": {
      "from": 22,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 183,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 164,
      "to": 23
    }
  }, {
    "left": {
      "from": 36,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 43
    },
    "right": {
      "from": 36,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 43
    }
  }, {
    "left": {
      "from": 56,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 57
    }
  }, {
    "left": {
      "from": 58,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 59
    },
    "right": {
      "from": 58,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 59
    }
  }, {
    "left": {
      "from": 7,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 12
    },
    "right": {
      "from": 7,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 12
    }
  }, {
    "left": {
      "from": 10,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 176,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 188,
      "to": 11
    }
  }, {
    "left": {
      "from": 29,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 30
    }
  }, {
    "left": {
      "from": 32,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 33
    }
  }, {
    "left": {
      "from": 22,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 24
    },
    "right": {
      "from": 22,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 24
    }
  }, {
    "left": {
      "from": 53,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 54
    }
  }, {
    "left": {
      "from": 37,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 38
    },
    "right": {
      "from": 37,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 38
    }
  }, {
    "left": {
      "from": 32,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 33
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 43
    },
    "right": {
      "from": 35,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 43
    }
  }, {
    "left": {
      "from": 12,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 13
    }
  }, {
    "left": {
      "from": 68,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 69
    },
    "right": {
      "from": 68,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 69
    }
  }, {
    "left": {
      "from": 62,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 80
    },
    "right": {
      "from": 62,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 80
    }
  }, {
    "left": {
      "from": 62,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 63
    },
    "right": {
      "from": 62,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 63
    }
  }, {
    "left": {
      "from": 26,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 33
    },
    "right": {
      "from": 26,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 33
    }
  }, {
    "left": {
      "from": 74,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 75
    },
    "right": {
      "from": 74,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 75
    }
  }, {
    "left": {
      "from": 21,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 31
    },
    "right": {
      "from": 21,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 31
    }
  }, {
    "left": {
      "from": 11,
      "line": "import java.awt.Color",
      "lineIdx": 2,
      "to": 12
    },
    "right": {
      "from": 11,
      "line": "import java.awt.Color",
      "lineIdx": 2,
      "to": 12
    }
  }, {
    "left": {
      "from": 40,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 41
    }
  }, {
    "left": {
      "from": 83,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 91
    },
    "right": {
      "from": 83,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 91
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 19
    },
    "right": {
      "from": 8,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 19
    }
  }, {
    "left": {
      "from": 61,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 68
    },
    "right": {
      "from": 61,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 68
    }
  }, {
    "left": {
      "from": 65,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 66
    },
    "right": {
      "from": 65,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 66
    }
  }, {
    "left": {
      "from": 26,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 29
    },
    "right": {
      "from": 26,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 29
    }
  }, {
    "left": {
      "from": 68,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 69
    },
    "right": {
      "from": 68,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 69
    }
  }, {
    "left": {
      "from": 39,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 55
    },
    "right": {
      "from": 39,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 55
    }
  }, {
    "left": {
      "from": 52,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 53
    },
    "right": {
      "from": 52,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 53
    }
  }, {
    "left": {
      "from": 40,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 181,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 162,
      "to": 41
    }
  }, {
    "left": {
      "from": 31,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 32
    }
  }, {
    "left": {
      "from": 33,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 34
    }
  }, {
    "left": {
      "from": 2,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 9
    },
    "right": {
      "from": 2,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 9
    }
  }, {
    "left": {
      "from": 38,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 39
    }
  }, {
    "left": {
      "from": 39,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 50
    },
    "right": {
      "from": 39,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 50
    }
  }, {
    "left": {
      "from": 67,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 72
    },
    "right": {
      "from": 67,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 72
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 7
    }
  }, {
    "left": {
      "from": 43,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 44
    },
    "right": {
      "from": 43,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 44
    }
  }, {
    "left": {
      "from": 68,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 76
    },
    "right": {
      "from": 68,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 76
    }
  }, {
    "left": {
      "from": 34,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 35
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 18
    }
  }, {
    "left": {
      "from": 54,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 62
    },
    "right": {
      "from": 54,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 62
    }
  }, {
    "left": {
      "from": 59,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 60
    },
    "right": {
      "from": 59,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 60
    }
  }, {
    "left": {
      "from": 51,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 52
    },
    "right": {
      "from": 51,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 52
    }
  }, {
    "left": {
      "from": 10,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 13
    },
    "right": {
      "from": 10,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 13
    }
  }, {
    "left": {
      "from": 59,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 60
    },
    "right": {
      "from": 59,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 60
    }
  }, {
    "left": {
      "from": 52,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 53
    },
    "right": {
      "from": 52,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 53
    }
  }, {
    "left": {
      "from": 114,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 115
    },
    "right": {
      "from": 114,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 115
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 36
    }
  }, {
    "left": {
      "from": 44,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 45
    }
  }, {
    "left": {
      "from": 52,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 60
    },
    "right": {
      "from": 52,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 60
    }
  }, {
    "left": {
      "from": 48,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 49
    }
  }, {
    "left": {
      "from": 46,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 47
    }
  }, {
    "left": {
      "from": 29,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 30
    }
  }, {
    "left": {
      "from": 60,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 61
    },
    "right": {
      "from": 60,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 61
    }
  }, {
    "left": {
      "from": 46,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 55
    },
    "right": {
      "from": 46,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 55
    }
  }, {
    "left": {
      "from": 81,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 96
    },
    "right": {
      "from": 81,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 96
    }
  }, {
    "left": {
      "from": 73,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 74
    },
    "right": {
      "from": 73,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 74
    }
  }, {
    "left": {
      "from": 55,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 56
    }
  }, {
    "left": {
      "from": 24,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 25
    },
    "right": {
      "from": 24,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 25
    }
  }, {
    "left": {
      "from": 11,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 19
    },
    "right": {
      "from": 11,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 19
    }
  }, {
    "left": {
      "from": 27,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 28
    }
  }, {
    "left": {
      "from": 54,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 55
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 15
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 16
    },
    "right": {
      "from": 8,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 16
    }
  }, {
    "left": {
      "from": 59,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 60
    },
    "right": {
      "from": 59,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 60
    }
  }, {
    "left": {
      "from": 57,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 61
    },
    "right": {
      "from": 57,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 61
    }
  }, {
    "left": {
      "from": 16,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 17
    }
  }, {
    "left": {
      "from": 6,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 10
    },
    "right": {
      "from": 6,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 10
    }
  }, {
    "left": {
      "from": 10,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 182,
      "to": 23
    },
    "right": {
      "from": 10,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 163,
      "to": 23
    }
  }, {
    "left": {
      "from": 41,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 42
    }
  }, {
    "left": {
      "from": 79,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 80
    },
    "right": {
      "from": 79,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 80
    }
  }, {
    "left": {
      "from": 53,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 54
    }
  }, {
    "left": {
      "from": 26,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 31
    },
    "right": {
      "from": 26,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 31
    }
  }, {
    "left": {
      "from": 54,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 55
    }
  }, {
    "left": {
      "from": 68,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 69
    },
    "right": {
      "from": 68,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 69
    }
  }, {
    "left": {
      "from": 51,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 52
    },
    "right": {
      "from": 51,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 52
    }
  }, {
    "left": {
      "from": 32,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 33
    }
  }, {
    "left": {
      "from": 16,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 23
    },
    "right": {
      "from": 16,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 23
    }
  }, {
    "left": {
      "from": 65,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 66
    },
    "right": {
      "from": 65,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 66
    }
  }, {
    "left": {
      "from": 52,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 53
    },
    "right": {
      "from": 52,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 53
    }
  }, {
    "left": {
      "from": 13,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 23
    },
    "right": {
      "from": 13,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 23
    }
  }, {
    "left": {
      "from": 54,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 65
    },
    "right": {
      "from": 54,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 65
    }
  }, {
    "left": {
      "from": 82,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 88
    },
    "right": {
      "from": 82,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 88
    }
  }, {
    "left": {
      "from": 23,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 33
    },
    "right": {
      "from": 23,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 33
    }
  }, {
    "left": {
      "from": 91,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 92
    },
    "right": {
      "from": 91,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 92
    }
  }, {
    "left": {
      "from": 74,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 75
    },
    "right": {
      "from": 74,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 75
    }
  }, {
    "left": {
      "from": 55,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 56
    }
  }, {
    "left": {
      "from": 30,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 31
    }
  }, {
    "left": {
      "from": 35,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 38
    },
    "right": {
      "from": 35,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 38
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 18
    }
  }, {
    "left": {
      "from": 88,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 89
    },
    "right": {
      "from": 88,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 89
    }
  }, {
    "left": {
      "from": 12,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 171,
      "to": 19
    },
    "right": {
      "from": 12,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 183,
      "to": 19
    }
  }, {
    "left": {
      "from": 34,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 165,
      "to": 46
    },
    "right": {
      "from": 34,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 177,
      "to": 46
    }
  }, {
    "left": {
      "from": 55,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 56
    }
  }, {
    "left": {
      "from": 62,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 63
    },
    "right": {
      "from": 62,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 63
    }
  }, {
    "left": {
      "from": 0,
      "line": "import smile.feature.Scaler",
      "lineIdx": 20,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import smile.feature.Scaler",
      "lineIdx": 20,
      "to": 6
    }
  }, {
    "left": {
      "from": 20,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 21
    },
    "right": {
      "from": 20,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 21
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 17
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 7
    }
  }, {
    "left": {
      "from": 59,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 69
    },
    "right": {
      "from": 59,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 69
    }
  }, {
    "left": {
      "from": 29,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 42
    },
    "right": {
      "from": 29,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 42
    }
  }, {
    "left": {
      "from": 55,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 56
    }
  }, {
    "left": {
      "from": 62,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 63
    },
    "right": {
      "from": 62,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 63
    }
  }, {
    "left": {
      "from": 31,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 35
    },
    "right": {
      "from": 31,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 35
    }
  }, {
    "left": {
      "from": 17,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 18
    }
  }, {
    "left": {
      "from": 14,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 181,
      "to": 15
    },
    "right": {
      "from": 14,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 162,
      "to": 15
    }
  }, {
    "left": {
      "from": 61,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 62
    },
    "right": {
      "from": 61,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 62
    }
  }, {
    "left": {
      "from": 82,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 85
    },
    "right": {
      "from": 82,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 85
    }
  }, {
    "left": {
      "from": 51,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 57
    },
    "right": {
      "from": 51,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 57
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 36
    }
  }, {
    "left": {
      "from": 51,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 56
    },
    "right": {
      "from": 51,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 56
    }
  }, {
    "left": {
      "from": 16,
      "line": "    metrics.seq.toList",
      "lineIdx": 62,
      "to": 22
    },
    "right": {
      "from": 16,
      "line": "    metrics.seq.toList",
      "lineIdx": 62,
      "to": 22
    }
  }, {
    "left": {
      "from": 4,
      "line": "    attributeDataset",
      "lineIdx": 77,
      "to": 20
    },
    "right": {
      "from": 4,
      "line": "    attributeDataset",
      "lineIdx": 77,
      "to": 20
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 9
    },
    "right": {
      "from": 8,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 9
    }
  }, {
    "left": {
      "from": 83,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 84
    },
    "right": {
      "from": 83,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 84
    }
  }, {
    "left": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 11
    }
  }, {
    "left": {
      "from": 23,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 32
    },
    "right": {
      "from": 23,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 32
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 10
    }
  }, {
    "left": {
      "from": 33,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 38
    },
    "right": {
      "from": 33,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 38
    }
  }, {
    "left": {
      "from": 57,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 185,
      "to": 58
    },
    "right": {
      "from": 57,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 166,
      "to": 58
    }
  }, {
    "left": {
      "from": 4,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 167,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 179,
      "to": 5
    }
  }, {
    "left": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 40
    },
    "right": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 40
    }
  }, {
    "left": {
      "from": 21,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 22
    }
  }, {
    "left": {
      "from": 59,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 60
    },
    "right": {
      "from": 59,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 60
    }
  }, {
    "left": {
      "from": 35,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 40
    },
    "right": {
      "from": 35,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 40
    }
  }, {
    "left": {
      "from": 22,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 184,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 165,
      "to": 23
    }
  }, {
    "left": {
      "from": 108,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 109
    },
    "right": {
      "from": 108,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 109
    }
  }, {
    "left": {
      "from": 34,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 35
    }
  }, {
    "left": {
      "from": 44,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 57
    },
    "right": {
      "from": 44,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 57
    }
  }, {
    "left": {
      "from": 46,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 194,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 194,
      "to": 47
    }
  }, {
    "left": {
      "from": 41,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 48
    },
    "right": {
      "from": 41,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 48
    }
  }, {
    "left": {
      "from": 36,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 37
    },
    "right": {
      "from": 36,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 37
    }
  }, {
    "left": {
      "from": 13,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 14
    },
    "right": {
      "from": 13,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 14
    }
  }, {
    "left": {
      "from": 30,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 31
    }
  }, {
    "left": {
      "from": 27,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 28
    }
  }, {
    "left": {
      "from": 58,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 59
    },
    "right": {
      "from": 58,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 59
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 11
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 194,
      "to": 15
    },
    "right": {
      "from": 8,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 194,
      "to": 15
    }
  }, {
    "left": {
      "from": 6,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 13
    },
    "right": {
      "from": 6,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 13
    }
  }, {
    "left": {
      "from": 12,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 13
    }
  }, {
    "left": {
      "from": 24,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 31
    },
    "right": {
      "from": 24,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 31
    }
  }, {
    "left": {
      "from": 35,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 185,
      "to": 38
    },
    "right": {
      "from": 35,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 166,
      "to": 38
    }
  }, {
    "left": {
      "from": 12,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 13
    }
  }, {
    "left": {
      "from": 19,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 20
    },
    "right": {
      "from": 19,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 20
    }
  }, {
    "left": {
      "from": 99,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 100
    },
    "right": {
      "from": 99,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 100
    }
  }, {
    "left": {
      "from": 31,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 48
    },
    "right": {
      "from": 31,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 48
    }
  }, {
    "left": {
      "from": 14,
      "line": "  final class ShowOne extends Application {",
      "lineIdx": 148,
      "to": 21
    },
    "right": {
      "from": 14,
      "line": "  final class ShowOne extends Application {",
      "lineIdx": 148,
      "to": 21
    }
  }, {
    "left": {
      "from": 50,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 185,
      "to": 57
    },
    "right": {
      "from": 50,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 166,
      "to": 57
    }
  }, {
    "left": {
      "from": 43,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 54
    },
    "right": {
      "from": 43,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 54
    }
  }, {
    "left": {
      "from": 37,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 184,
      "to": 38
    },
    "right": {
      "from": 37,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 165,
      "to": 38
    }
  }, {
    "left": {
      "from": 27,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 28
    }
  }, {
    "left": {
      "from": 23,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 45
    },
    "right": {
      "from": 23,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 45
    }
  }, {
    "left": {
      "from": 26,
      "line": "    val test = nestedTest.flatten",
      "lineIdx": 83,
      "to": 33
    },
    "right": {
      "from": 26,
      "line": "    val test = nestedTest.flatten",
      "lineIdx": 83,
      "to": 33
    }
  }, {
    "left": {
      "from": 53,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 61
    },
    "right": {
      "from": 53,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 61
    }
  }, {
    "left": {
      "from": 112,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 113
    },
    "right": {
      "from": 112,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 113
    }
  }, {
    "left": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 41
    },
    "right": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 41
    }
  }, {
    "left": {
      "from": 91,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 92
    },
    "right": {
      "from": 91,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 92
    }
  }, {
    "left": {
      "from": 52,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 59
    },
    "right": {
      "from": 52,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 59
    }
  }, {
    "left": {
      "from": 6,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 9
    },
    "right": {
      "from": 6,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 9
    }
  }, {
    "left": {
      "from": 30,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 31
    }
  }, {
    "left": {
      "from": 34,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 35
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 7
    }
  }, {
    "left": {
      "from": 53,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 54
    }
  }, {
    "left": {
      "from": 26,
      "line": "import javafx.application.Application",
      "lineIdx": 13,
      "to": 37
    },
    "right": {
      "from": 26,
      "line": "import javafx.application.Application",
      "lineIdx": 13,
      "to": 37
    }
  }, {
    "left": {
      "from": 42,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 47
    },
    "right": {
      "from": 42,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 47
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 16
    }
  }, {
    "left": {
      "from": 134,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 152
    },
    "right": {
      "from": 134,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 152
    }
  }, {
    "left": {
      "from": 33,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 34
    }
  }, {
    "left": {
      "from": 46,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 53
    },
    "right": {
      "from": 46,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 53
    }
  }, {
    "left": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 27
    }
  }, {
    "left": {
      "from": 40,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 41
    }
  }, {
    "left": {
      "from": 49,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 185,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 166,
      "to": 50
    }
  }, {
    "left": {
      "from": 59,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 60
    },
    "right": {
      "from": 59,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 60
    }
  }, {
    "left": {
      "from": 48,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 49
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 16
    }
  }, {
    "left": {
      "from": 36,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 186,
      "to": 46
    },
    "right": {
      "from": 36,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 167,
      "to": 46
    }
  }, {
    "left": {
      "from": 24,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 27
    },
    "right": {
      "from": 24,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 27
    }
  }, {
    "left": {
      "from": 24,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 28
    },
    "right": {
      "from": 24,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 28
    }
  }, {
    "left": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 6
    }
  }, {
    "left": {
      "from": 23,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 185,
      "to": 34
    },
    "right": {
      "from": 23,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 166,
      "to": 34
    }
  }, {
    "left": {
      "from": 12,
      "line": "  \"plot data\" ignore {",
      "lineIdx": 163,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "  \"plot data\" ignore {",
      "lineIdx": 175,
      "to": 13
    }
  }, {
    "left": {
      "from": 80,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 86
    },
    "right": {
      "from": 80,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 86
    }
  }, {
    "left": {
      "from": 41,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 181,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 162,
      "to": 42
    }
  }, {
    "left": {
      "from": 67,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 68
    },
    "right": {
      "from": 67,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 68
    }
  }, {
    "left": {
      "from": 41,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 42
    }
  }, {
    "left": {
      "from": 31,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 32
    }
  }, {
    "left": {
      "from": 40,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 48
    },
    "right": {
      "from": 40,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 48
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 10
    }
  }, {
    "left": {
      "from": 39,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 40
    },
    "right": {
      "from": 39,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 40
    }
  }, {
    "left": {
      "from": 27,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 28
    }
  }, {
    "left": {
      "from": 22,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 27
    },
    "right": {
      "from": 22,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 27
    }
  }, {
    "left": {
      "from": 32,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 33
    }
  }, {
    "left": {
      "from": 21,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 27
    },
    "right": {
      "from": 21,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 27
    }
  }, {
    "left": {
      "from": 20,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 21
    },
    "right": {
      "from": 20,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 21
    }
  }, {
    "left": {
      "from": 54,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 55
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 194,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 194,
      "to": 7
    }
  }, {
    "left": {
      "from": 13,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 23
    },
    "right": {
      "from": 13,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 23
    }
  }, {
    "left": {
      "from": 52,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 68
    },
    "right": {
      "from": 52,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 68
    }
  }, {
    "left": {
      "from": 4,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 9
    },
    "right": {
      "from": 4,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 9
    }
  }, {
    "left": {
      "from": 47,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 194,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 194,
      "to": 48
    }
  }, {
    "left": {
      "from": 16,
      "line": "import java.awt.Color",
      "lineIdx": 2,
      "to": 21
    },
    "right": {
      "from": 16,
      "line": "import java.awt.Color",
      "lineIdx": 2,
      "to": 21
    }
  }, {
    "left": {
      "from": 26,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 29
    },
    "right": {
      "from": 26,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 29
    }
  }, {
    "left": {
      "from": 45,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 53
    },
    "right": {
      "from": 45,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 53
    }
  }, {
    "left": {
      "from": 22,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 30
    },
    "right": {
      "from": 22,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 30
    }
  }, {
    "left": {
      "from": 13,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 27
    },
    "right": {
      "from": 13,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 27
    }
  }, {
    "left": {
      "from": 26,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 37
    },
    "right": {
      "from": 26,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 37
    }
  }, {
    "left": {
      "from": 113,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 114
    },
    "right": {
      "from": 113,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 114
    }
  }, {
    "left": {
      "from": 47,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 164,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 176,
      "to": 48
    }
  }, {
    "left": {
      "from": 2,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 3
    }
  }, {
    "left": {
      "from": 67,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 82
    },
    "right": {
      "from": 67,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 82
    }
  }, {
    "left": {
      "from": 46,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 47
    }
  }, {
    "left": {
      "from": 41,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 42
    }
  }, {
    "left": {
      "from": 52,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 59
    },
    "right": {
      "from": 52,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 59
    }
  }, {
    "left": {
      "from": 81,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 82
    },
    "right": {
      "from": 81,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 82
    }
  }, {
    "left": {
      "from": 34,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 35
    }
  }, {
    "left": {
      "from": 54,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 55
    }
  }, {
    "left": {
      "from": 57,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 58
    },
    "right": {
      "from": 57,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 58
    }
  }, {
    "left": {
      "from": 54,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 55
    }
  }, {
    "left": {
      "from": 31,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 38
    },
    "right": {
      "from": 31,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 38
    }
  }, {
    "left": {
      "from": 19,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 20
    },
    "right": {
      "from": 19,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 20
    }
  }, {
    "left": {
      "from": 8,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 9
    },
    "right": {
      "from": 8,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 9
    }
  }, {
    "left": {
      "from": 0,
      "line": "import smile.validation._",
      "lineIdx": 21,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import smile.validation._",
      "lineIdx": 21,
      "to": 6
    }
  }, {
    "left": {
      "from": 44,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 45
    }
  }, {
    "left": {
      "from": 61,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 62
    },
    "right": {
      "from": 61,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 62
    }
  }, {
    "left": {
      "from": 50,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 51
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 10
    }
  }, {
    "left": {
      "from": 23,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 176,
      "to": 28
    },
    "right": {
      "from": 23,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 188,
      "to": 28
    }
  }, {
    "left": {
      "from": 20,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 21
    },
    "right": {
      "from": 20,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 21
    }
  }, {
    "left": {
      "from": 55,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 183,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 164,
      "to": 56
    }
  }, {
    "left": {
      "from": 13,
      "line": "    val test = nestedTest.flatten",
      "lineIdx": 83,
      "to": 14
    },
    "right": {
      "from": 13,
      "line": "    val test = nestedTest.flatten",
      "lineIdx": 83,
      "to": 14
    }
  }, {
    "left": {
      "from": 37,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 38
    },
    "right": {
      "from": 37,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 38
    }
  }, {
    "left": {
      "from": 60,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 72
    },
    "right": {
      "from": 60,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 72
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 16
    }
  }, {
    "left": {
      "from": 42,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 52
    },
    "right": {
      "from": 42,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 52
    }
  }, {
    "left": {
      "from": 6,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 19
    },
    "right": {
      "from": 6,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 19
    }
  }, {
    "left": {
      "from": 4,
      "line": "    }",
      "lineIdx": 38,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    }",
      "lineIdx": 38,
      "to": 5
    }
  }, {
    "left": {
      "from": 10,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 13
    },
    "right": {
      "from": 10,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 13
    }
  }, {
    "left": {
      "from": 13,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 28
    },
    "right": {
      "from": 13,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 28
    }
  }, {
    "left": {
      "from": 36,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 40
    },
    "right": {
      "from": 36,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 40
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 16
    }
  }, {
    "left": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 34
    }
  }, {
    "left": {
      "from": 44,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 45
    }
  }, {
    "left": {
      "from": 25,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 32
    },
    "right": {
      "from": 25,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 32
    }
  }, {
    "left": {
      "from": 2,
      "line": "  }",
      "lineIdx": 78,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  }",
      "lineIdx": 78,
      "to": 3
    }
  }, {
    "left": {
      "from": 51,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 52
    },
    "right": {
      "from": 51,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 52
    }
  }, {
    "left": {
      "from": 64,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 65
    },
    "right": {
      "from": 64,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 65
    }
  }, {
    "left": {
      "from": 61,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 62
    },
    "right": {
      "from": 61,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 62
    }
  }, {
    "left": {
      "from": 37,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 41
    },
    "right": {
      "from": 37,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 41
    }
  }, {
    "left": {
      "from": 29,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 30
    }
  }, {
    "left": {
      "from": 9,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 17
    },
    "right": {
      "from": 9,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 17
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 40
    },
    "right": {
      "from": 35,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 40
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 16
    }
  }, {
    "left": {
      "from": 29,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 30
    }
  }, {
    "left": {
      "from": 23,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 24
    },
    "right": {
      "from": 23,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 24
    }
  }, {
    "left": {
      "from": 35,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 53
    },
    "right": {
      "from": 35,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 53
    }
  }, {
    "left": {
      "from": 51,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 52
    },
    "right": {
      "from": 51,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 52
    }
  }, {
    "left": {
      "from": 55,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 56
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 13
    },
    "right": {
      "from": 8,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 13
    }
  }, {
    "left": {
      "from": 39,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 40
    },
    "right": {
      "from": 39,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 40
    }
  }, {
    "left": {
      "from": 26,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 27
    }
  }, {
    "left": {
      "from": 45,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 51
    },
    "right": {
      "from": 45,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 51
    }
  }, {
    "left": {
      "from": 67,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 68
    },
    "right": {
      "from": 67,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 68
    }
  }, {
    "left": {
      "from": 17,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 18
    }
  }, {
    "left": {
      "from": 89,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 90
    },
    "right": {
      "from": 89,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 90
    }
  }, {
    "left": {
      "from": 53,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 61
    },
    "right": {
      "from": 53,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 61
    }
  }, {
    "left": {
      "from": 107,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 114
    },
    "right": {
      "from": 107,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 114
    }
  }, {
    "left": {
      "from": 50,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 51
    }
  }, {
    "left": {
      "from": 2,
      "line": "  private val logger = getLogger",
      "lineIdx": 30,
      "to": 9
    },
    "right": {
      "from": 2,
      "line": "  private val logger = getLogger",
      "lineIdx": 30,
      "to": 9
    }
  }, {
    "left": {
      "from": 28,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 29
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 11
    }
  }, {
    "left": {
      "from": 9,
      "line": "        \"\"))",
      "lineIdx": 155,
      "to": 10
    },
    "right": {
      "from": 9,
      "line": "        \"\"))",
      "lineIdx": 155,
      "to": 10
    }
  }, {
    "left": {
      "from": 5,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 165,
      "to": 21
    },
    "right": {
      "from": 5,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 177,
      "to": 21
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 15
    }
  }, {
    "left": {
      "from": 32,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 41
    },
    "right": {
      "from": 32,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 41
    }
  }, {
    "left": {
      "from": 2,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 3
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 17
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 7
    }
  }, {
    "left": {
      "from": 51,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 56
    },
    "right": {
      "from": 51,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 56
    }
  }, {
    "left": {
      "from": 46,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 164,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 176,
      "to": 47
    }
  }, {
    "left": {
      "from": 25,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 28
    },
    "right": {
      "from": 25,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 28
    }
  }, {
    "left": {
      "from": 54,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 55
    }
  }, {
    "left": {
      "from": 32,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 40
    },
    "right": {
      "from": 32,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 40
    }
  }, {
    "left": {
      "from": 27,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 28
    }
  }, {
    "left": {
      "from": 23,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 24
    },
    "right": {
      "from": 23,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 24
    }
  }, {
    "left": {
      "from": 40,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 183,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 164,
      "to": 41
    }
  }, {
    "left": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 27
    }
  }, {
    "left": {
      "from": 21,
      "line": "import smile.feature.Scaler",
      "lineIdx": 20,
      "to": 27
    },
    "right": {
      "from": 21,
      "line": "import smile.feature.Scaler",
      "lineIdx": 20,
      "to": 27
    }
  }, {
    "left": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 41
    },
    "right": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 41
    }
  }, {
    "left": {
      "from": 47,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 51
    },
    "right": {
      "from": 47,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 51
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 15
    }
  }, {
    "left": {
      "from": 68,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 69
    },
    "right": {
      "from": 68,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 69
    }
  }, {
    "left": {
      "from": 22,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 27
    },
    "right": {
      "from": 22,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 27
    }
  }, {
    "left": {
      "from": 54,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 72
    },
    "right": {
      "from": 54,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 72
    }
  }, {
    "left": {
      "from": 87,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 88
    },
    "right": {
      "from": 87,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 88
    }
  }, {
    "left": {
      "from": 29,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 30
    }
  }, {
    "left": {
      "from": 49,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 57
    },
    "right": {
      "from": 49,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 57
    }
  }, {
    "left": {
      "from": 28,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 29
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 36
    }
  }, {
    "left": {
      "from": 101,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 110
    },
    "right": {
      "from": 101,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 110
    }
  }, {
    "left": {
      "from": 34,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 35
    }
  }, {
    "left": {
      "from": 26,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 29
    },
    "right": {
      "from": 26,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 29
    }
  }, {
    "left": {
      "from": 6,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 9
    },
    "right": {
      "from": 6,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 9
    }
  }, {
    "left": {
      "from": 9,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 10
    },
    "right": {
      "from": 9,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 10
    }
  }, {
    "left": {
      "from": 67,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 68
    },
    "right": {
      "from": 67,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 68
    }
  }, {
    "left": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 26
    },
    "right": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 26
    }
  }, {
    "left": {
      "from": 21,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 33
    },
    "right": {
      "from": 21,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 33
    }
  }, {
    "left": {
      "from": 44,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 45
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 18
    }
  }, {
    "left": {
      "from": 76,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 78
    },
    "right": {
      "from": 76,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 78
    }
  }, {
    "left": {
      "from": 83,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 99
    },
    "right": {
      "from": 83,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 99
    }
  }, {
    "left": {
      "from": 79,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 80
    },
    "right": {
      "from": 79,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 80
    }
  }, {
    "left": {
      "from": 44,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 51
    },
    "right": {
      "from": 44,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 51
    }
  }, {
    "left": {
      "from": 80,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 88
    },
    "right": {
      "from": 80,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 88
    }
  }, {
    "left": {
      "from": 2,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 9
    },
    "right": {
      "from": 2,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 9
    }
  }, {
    "left": {
      "from": 11,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 12
    },
    "right": {
      "from": 11,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 12
    }
  }, {
    "left": {
      "from": 169,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 170
    },
    "right": {
      "from": 169,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 170
    }
  }, {
    "left": {
      "from": 6,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 24
    },
    "right": {
      "from": 6,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 24
    }
  }, {
    "left": {
      "from": 101,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 104
    },
    "right": {
      "from": 101,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 104
    }
  }, {
    "left": {
      "from": 99,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 100
    },
    "right": {
      "from": 99,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 100
    }
  }, {
    "left": {
      "from": 71,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 72
    },
    "right": {
      "from": 71,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 72
    }
  }, {
    "left": {
      "from": 26,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 27
    }
  }, {
    "left": {
      "from": 57,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 58
    },
    "right": {
      "from": 57,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 58
    }
  }, {
    "left": {
      "from": 56,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 57
    }
  }, {
    "left": {
      "from": 10,
      "line": "import org.scalatest.FreeSpecLike",
      "lineIdx": 16,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "import org.scalatest.FreeSpecLike",
      "lineIdx": 16,
      "to": 11
    }
  }, {
    "left": {
      "from": 2,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 9
    },
    "right": {
      "from": 2,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 9
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 10
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 17
    }
  }, {
    "left": {
      "from": 0,
      "line": "import org.log4s.getLogger",
      "lineIdx": 15,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import org.log4s.getLogger",
      "lineIdx": 15,
      "to": 6
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 16
    }
  }, {
    "left": {
      "from": 26,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 27
    }
  }, {
    "left": {
      "from": 4,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 11
    },
    "right": {
      "from": 4,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 11
    }
  }, {
    "left": {
      "from": 41,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 46
    },
    "right": {
      "from": 41,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 46
    }
  }, {
    "left": {
      "from": 8,
      "line": "  \"plot data\" ignore {",
      "lineIdx": 163,
      "to": 12
    },
    "right": {
      "from": 8,
      "line": "  \"plot data\" ignore {",
      "lineIdx": 175,
      "to": 12
    }
  }, {
    "left": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 11
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 17
    }
  }, {
    "left": {
      "from": 30,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 31
    }
  }, {
    "left": {
      "from": 39,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 40
    },
    "right": {
      "from": 39,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 40
    }
  }, {
    "left": {
      "from": 24,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 182,
      "to": 25
    },
    "right": {
      "from": 24,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 163,
      "to": 25
    }
  }, {
    "left": {
      "from": 26,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 182,
      "to": 44
    },
    "right": {
      "from": 26,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 163,
      "to": 44
    }
  }, {
    "left": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 26
    },
    "right": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 26
    }
  }, {
    "left": {
      "from": 45,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 46
    }
  }, {
    "left": {
      "from": 49,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 54
    },
    "right": {
      "from": 49,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 54
    }
  }, {
    "left": {
      "from": 14,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 188,
      "to": 15
    },
    "right": {
      "from": 14,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 169,
      "to": 15
    }
  }, {
    "left": {
      "from": 41,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 183,
      "to": 54
    },
    "right": {
      "from": 41,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 164,
      "to": 54
    }
  }, {
    "left": {
      "from": 34,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 35
    }
  }, {
    "left": {
      "from": 49,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 50
    }
  }, {
    "left": {
      "from": 103,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 105
    },
    "right": {
      "from": 103,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 105
    }
  }, {
    "left": {
      "from": 72,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 73
    },
    "right": {
      "from": 72,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 73
    }
  }, {
    "left": {
      "from": 70,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 71
    },
    "right": {
      "from": 70,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 71
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 25
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 25
    }
  }, {
    "left": {
      "from": 91,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 92
    },
    "right": {
      "from": 91,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 92
    }
  }, {
    "left": {
      "from": 41,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 42
    }
  }, {
    "left": {
      "from": 45,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 50
    },
    "right": {
      "from": 45,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 50
    }
  }, {
    "left": {
      "from": 30,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 33
    },
    "right": {
      "from": 30,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 33
    }
  }, {
    "left": {
      "from": 28,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 29
    }
  }, {
    "left": {
      "from": 56,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 57
    }
  }, {
    "left": {
      "from": 34,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 35
    }
  }, {
    "left": {
      "from": 78,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 79
    },
    "right": {
      "from": 78,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 79
    }
  }, {
    "left": {
      "from": 11,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 16
    },
    "right": {
      "from": 11,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 16
    }
  }, {
    "left": {
      "from": 46,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 165,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 177,
      "to": 47
    }
  }, {
    "left": {
      "from": 32,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 33
    }
  }, {
    "left": {
      "from": 24,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 25
    },
    "right": {
      "from": 24,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 25
    }
  }, {
    "left": {
      "from": 119,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 120
    },
    "right": {
      "from": 119,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 120
    }
  }, {
    "left": {
      "from": 7,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 11
    },
    "right": {
      "from": 7,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 11
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val training = nestedTraining.flatten",
      "lineIdx": 82,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val training = nestedTraining.flatten",
      "lineIdx": 82,
      "to": 7
    }
  }, {
    "left": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 11
    }
  }, {
    "left": {
      "from": 88,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 90
    },
    "right": {
      "from": 88,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 90
    }
  }, {
    "left": {
      "from": 56,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 57
    }
  }, {
    "left": {
      "from": 7,
      "line": "import java.awt.Color",
      "lineIdx": 2,
      "to": 11
    },
    "right": {
      "from": 7,
      "line": "import java.awt.Color",
      "lineIdx": 2,
      "to": 11
    }
  }, {
    "left": {
      "from": 36,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 43
    },
    "right": {
      "from": 36,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 43
    }
  }, {
    "left": {
      "from": 60,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 61
    },
    "right": {
      "from": 60,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 61
    }
  }, {
    "left": {
      "from": 62,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 63
    },
    "right": {
      "from": 62,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 63
    }
  }, {
    "left": {
      "from": 15,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 16
    }
  }, {
    "left": {
      "from": 62,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 63
    },
    "right": {
      "from": 62,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 63
    }
  }, {
    "left": {
      "from": 17,
      "line": "        sys.exit(1)",
      "lineIdx": 36,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "        sys.exit(1)",
      "lineIdx": 36,
      "to": 18
    }
  }, {
    "left": {
      "from": 40,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 41
    }
  }, {
    "left": {
      "from": 81,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 105
    },
    "right": {
      "from": 81,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 105
    }
  }, {
    "left": {
      "from": 19,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 20
    },
    "right": {
      "from": 19,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 20
    }
  }, {
    "left": {
      "from": 34,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 35
    }
  }, {
    "left": {
      "from": 53,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 54
    }
  }, {
    "left": {
      "from": 18,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 21
    },
    "right": {
      "from": 18,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 21
    }
  }, {
    "left": {
      "from": 22,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 23
    }
  }, {
    "left": {
      "from": 55,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 60
    },
    "right": {
      "from": 55,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 60
    }
  }, {
    "left": {
      "from": 86,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 87
    },
    "right": {
      "from": 86,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 87
    }
  }, {
    "left": {
      "from": 29,
      "line": "final class PlotData extends FreeSpecLike {",
      "lineIdx": 162,
      "to": 41
    },
    "right": {
      "from": 29,
      "line": "final class PlotData extends FreeSpecLike {",
      "lineIdx": 174,
      "to": 41
    }
  }, {
    "left": {
      "from": 75,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 79
    },
    "right": {
      "from": 75,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 79
    }
  }, {
    "left": {
      "from": 111,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 112
    },
    "right": {
      "from": 111,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 112
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 17
    }
  }, {
    "left": {
      "from": 41,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 56
    },
    "right": {
      "from": 41,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 56
    }
  }, {
    "left": {
      "from": 50,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 51
    }
  }, {
    "left": {
      "from": 88,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 89
    },
    "right": {
      "from": 88,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 89
    }
  }, {
    "left": {
      "from": 43,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 44
    },
    "right": {
      "from": 43,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 44
    }
  }, {
    "left": {
      "from": 23,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 27
    },
    "right": {
      "from": 23,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 27
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 10
    }
  }, {
    "left": {
      "from": 18,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 19
    },
    "right": {
      "from": 18,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 19
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 11
    }
  }, {
    "left": {
      "from": 38,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 46
    },
    "right": {
      "from": 38,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 46
    }
  }, {
    "left": {
      "from": 14,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 22
    },
    "right": {
      "from": 14,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 22
    }
  }, {
    "left": {
      "from": 51,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 52
    },
    "right": {
      "from": 51,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 52
    }
  }, {
    "left": {
      "from": 46,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 47
    }
  }, {
    "left": {
      "from": 22,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 25
    },
    "right": {
      "from": 22,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 25
    }
  }, {
    "left": {
      "from": 110,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 111
    },
    "right": {
      "from": 110,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 111
    }
  }, {
    "left": {
      "from": 48,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 49
    }
  }, {
    "left": {
      "from": 49,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 50
    }
  }, {
    "left": {
      "from": 49,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 50
    }
  }, {
    "left": {
      "from": 62,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 63
    },
    "right": {
      "from": 62,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 63
    }
  }, {
    "left": {
      "from": 55,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 62
    },
    "right": {
      "from": 55,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 62
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 16
    },
    "right": {
      "from": 8,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 16
    }
  }, {
    "left": {
      "from": 47,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 56
    },
    "right": {
      "from": 47,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 56
    }
  }, {
    "left": {
      "from": 32,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 33
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 16
    }
  }, {
    "left": {
      "from": 24,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 25
    },
    "right": {
      "from": 24,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 25
    }
  }, {
    "left": {
      "from": 45,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 53
    },
    "right": {
      "from": 45,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 53
    }
  }, {
    "left": {
      "from": 28,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 181,
      "to": 38
    },
    "right": {
      "from": 28,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 162,
      "to": 38
    }
  }, {
    "left": {
      "from": 4,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 10
    }
  }, {
    "left": {
      "from": 34,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 35
    }
  }, {
    "left": {
      "from": 37,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 38
    },
    "right": {
      "from": 37,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 38
    }
  }, {
    "left": {
      "from": 18,
      "line": "        sys.exit(1)",
      "lineIdx": 36,
      "to": 19
    },
    "right": {
      "from": 18,
      "line": "        sys.exit(1)",
      "lineIdx": 36,
      "to": 19
    }
  }, {
    "left": {
      "from": 32,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 40
    },
    "right": {
      "from": 32,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 40
    }
  }, {
    "left": {
      "from": 57,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 58
    },
    "right": {
      "from": 57,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 58
    }
  }, {
    "left": {
      "from": 65,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 66
    },
    "right": {
      "from": 65,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 66
    }
  }, {
    "left": {
      "from": 19,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 28
    },
    "right": {
      "from": 19,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 28
    }
  }, {
    "left": {
      "from": 58,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 59
    },
    "right": {
      "from": 58,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 59
    }
  }, {
    "left": {
      "from": 28,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 33
    },
    "right": {
      "from": 28,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 33
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 17
    }
  }, {
    "left": {
      "from": 73,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 74
    },
    "right": {
      "from": 73,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 74
    }
  }, {
    "left": {
      "from": 48,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 49
    }
  }, {
    "left": {
      "from": 33,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 34
    }
  }, {
    "left": {
      "from": 14,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 15
    },
    "right": {
      "from": 14,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 15
    }
  }, {
    "left": {
      "from": 34,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 35
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 11
    }
  }, {
    "left": {
      "from": 64,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 65
    },
    "right": {
      "from": 64,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 65
    }
  }, {
    "left": {
      "from": 7,
      "line": "import smile.feature.Scaler",
      "lineIdx": 20,
      "to": 12
    },
    "right": {
      "from": 7,
      "line": "import smile.feature.Scaler",
      "lineIdx": 20,
      "to": 12
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 17
    }
  }, {
    "left": {
      "from": 31,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 47
    },
    "right": {
      "from": 31,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 47
    }
  }, {
    "left": {
      "from": 33,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 50
    },
    "right": {
      "from": 33,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 50
    }
  }, {
    "left": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 27
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 7
    }
  }, {
    "left": {
      "from": 62,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 63
    },
    "right": {
      "from": 62,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 63
    }
  }, {
    "left": {
      "from": 29,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 39
    },
    "right": {
      "from": 29,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 39
    }
  }, {
    "left": {
      "from": 16,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 17
    }
  }, {
    "left": {
      "from": 0,
      "line": "}",
      "lineIdx": 218,
      "to": 1
    },
    "right": {
      "from": 0,
      "line": "}",
      "lineIdx": 218,
      "to": 1
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 11
    }
  }, {
    "left": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 27
    }
  }, {
    "left": {
      "from": 25,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 35
    },
    "right": {
      "from": 25,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 35
    }
  }, {
    "left": {
      "from": 67,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 68
    },
    "right": {
      "from": 67,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 68
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 7
    }
  }, {
    "left": {
      "from": 45,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 46
    }
  }, {
    "left": {
      "from": 72,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 80
    },
    "right": {
      "from": 72,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 80
    }
  }, {
    "left": {
      "from": 4,
      "line": "    }",
      "lineIdx": 157,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    }",
      "lineIdx": 157,
      "to": 5
    }
  }, {
    "left": {
      "from": 47,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 48
    }
  }, {
    "left": {
      "from": 3,
      "line": "  \"plot data\" ignore {",
      "lineIdx": 163,
      "to": 7
    },
    "right": {
      "from": 3,
      "line": "  \"plot data\" ignore {",
      "lineIdx": 175,
      "to": 7
    }
  }, {
    "left": {
      "from": 98,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 99
    },
    "right": {
      "from": 98,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 99
    }
  }, {
    "left": {
      "from": 24,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 25
    },
    "right": {
      "from": 24,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 25
    }
  }, {
    "left": {
      "from": 40,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 41
    }
  }, {
    "left": {
      "from": 69,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 70
    },
    "right": {
      "from": 69,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 70
    }
  }, {
    "left": {
      "from": 32,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 33
    }
  }, {
    "left": {
      "from": 41,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 46
    },
    "right": {
      "from": 41,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 46
    }
  }, {
    "left": {
      "from": 83,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 84
    },
    "right": {
      "from": 83,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 84
    }
  }, {
    "left": {
      "from": 14,
      "line": "  private val logger = getLogger",
      "lineIdx": 30,
      "to": 20
    },
    "right": {
      "from": 14,
      "line": "  private val logger = getLogger",
      "lineIdx": 30,
      "to": 20
    }
  }, {
    "left": {
      "from": 6,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 183,
      "to": 9
    },
    "right": {
      "from": 6,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 164,
      "to": 9
    }
  }, {
    "left": {
      "from": 7,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 12
    },
    "right": {
      "from": 7,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 12
    }
  }, {
    "left": {
      "from": 58,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 65
    },
    "right": {
      "from": 58,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 65
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 19
    },
    "right": {
      "from": 8,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 19
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 36
    }
  }, {
    "left": {
      "from": 60,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 61
    },
    "right": {
      "from": 60,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 61
    }
  }, {
    "left": {
      "from": 8,
      "line": "  final class ShowOne extends Application {",
      "lineIdx": 148,
      "to": 13
    },
    "right": {
      "from": 8,
      "line": "  final class ShowOne extends Application {",
      "lineIdx": 148,
      "to": 13
    }
  }, {
    "left": {
      "from": 21,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 35
    },
    "right": {
      "from": 21,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 35
    }
  }, {
    "left": {
      "from": 85,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 86
    },
    "right": {
      "from": 85,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 86
    }
  }, {
    "left": {
      "from": 83,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 89
    },
    "right": {
      "from": 83,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 89
    }
  }, {
    "left": {
      "from": 37,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 38
    },
    "right": {
      "from": 37,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 38
    }
  }, {
    "left": {
      "from": 6,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 16
    },
    "right": {
      "from": 6,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 16
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 7
    }
  }, {
    "left": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 33
    },
    "right": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 33
    }
  }, {
    "left": {
      "from": 36,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 43
    },
    "right": {
      "from": 36,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 43
    }
  }, {
    "left": {
      "from": 105,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 118
    },
    "right": {
      "from": 105,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 118
    }
  }, {
    "left": {
      "from": 28,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 44
    },
    "right": {
      "from": 28,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 44
    }
  }, {
    "left": {
      "from": 4,
      "line": "    (classifier, scaler)",
      "lineIdx": 122,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    (classifier, scaler)",
      "lineIdx": 122,
      "to": 5
    }
  }, {
    "left": {
      "from": 9,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 10
    },
    "right": {
      "from": 9,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 10
    }
  }, {
    "left": {
      "from": 85,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 86
    },
    "right": {
      "from": 85,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 86
    }
  }, {
    "left": {
      "from": 74,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 81
    },
    "right": {
      "from": 74,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 81
    }
  }, {
    "left": {
      "from": 10,
      "line": "  private val logger = getLogger",
      "lineIdx": 30,
      "to": 13
    },
    "right": {
      "from": 10,
      "line": "  private val logger = getLogger",
      "lineIdx": 30,
      "to": 13
    }
  }, {
    "left": {
      "from": 15,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 16
    }
  }, {
    "left": {
      "from": 58,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 59
    },
    "right": {
      "from": 58,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 59
    }
  }, {
    "left": {
      "from": 26,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 27
    }
  }, {
    "left": {
      "from": 38,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 44
    },
    "right": {
      "from": 38,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 44
    }
  }, {
    "left": {
      "from": 44,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 45
    }
  }, {
    "left": {
      "from": 47,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 48
    }
  }, {
    "left": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 26
    },
    "right": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 26
    }
  }, {
    "left": {
      "from": 43,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 50
    },
    "right": {
      "from": 43,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 50
    }
  }, {
    "left": {
      "from": 21,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 23
    },
    "right": {
      "from": 21,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 23
    }
  }, {
    "left": {
      "from": 47,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 165,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 177,
      "to": 48
    }
  }, {
    "left": {
      "from": 16,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 17
    }
  }, {
    "left": {
      "from": 12,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 13
    }
  }, {
    "left": {
      "from": 13,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 17
    },
    "right": {
      "from": 13,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 17
    }
  }, {
    "left": {
      "from": 8,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 13
    },
    "right": {
      "from": 8,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 13
    }
  }, {
    "left": {
      "from": 39,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 40
    },
    "right": {
      "from": 39,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 40
    }
  }, {
    "left": {
      "from": 55,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 182,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 163,
      "to": 56
    }
  }, {
    "left": {
      "from": 24,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 32
    },
    "right": {
      "from": 24,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 32
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 15
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 10
    }
  }, {
    "left": {
      "from": 57,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 58
    },
    "right": {
      "from": 57,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 58
    }
  }, {
    "left": {
      "from": 0,
      "line": "import javafx.application.Application",
      "lineIdx": 13,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import javafx.application.Application",
      "lineIdx": 13,
      "to": 6
    }
  }, {
    "left": {
      "from": 24,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 30
    },
    "right": {
      "from": 24,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 30
    }
  }, {
    "left": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 33
    },
    "right": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 33
    }
  }, {
    "left": {
      "from": 47,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 54
    },
    "right": {
      "from": 47,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 54
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 10
    }
  }, {
    "left": {
      "from": 3,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 8
    },
    "right": {
      "from": 3,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 8
    }
  }, {
    "left": {
      "from": 8,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 11
    },
    "right": {
      "from": 8,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 11
    }
  }, {
    "left": {
      "from": 106,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 113
    },
    "right": {
      "from": 106,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 113
    }
  }, {
    "left": {
      "from": 45,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 46
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 10
    }
  }, {
    "left": {
      "from": 8,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 9
    },
    "right": {
      "from": 8,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 9
    }
  }, {
    "left": {
      "from": 27,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 30
    },
    "right": {
      "from": 27,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 30
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 17
    }
  }, {
    "left": {
      "from": 56,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 68
    },
    "right": {
      "from": 56,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 68
    }
  }, {
    "left": {
      "from": 2,
      "line": "  }",
      "lineIdx": 52,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  }",
      "lineIdx": 52,
      "to": 3
    }
  }, {
    "left": {
      "from": 27,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 28
    }
  }, {
    "left": {
      "from": 45,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 46
    }
  }, {
    "left": {
      "from": 15,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 16
    }
  }, {
    "left": {
      "from": 82,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 83
    },
    "right": {
      "from": 82,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 83
    }
  }, {
    "left": {
      "from": 41,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 42
    }
  }, {
    "left": {
      "from": 78,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 79
    },
    "right": {
      "from": 78,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 79
    }
  }, {
    "left": {
      "from": 82,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 83
    },
    "right": {
      "from": 82,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 83
    }
  }, {
    "left": {
      "from": 31,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 32
    }
  }, {
    "left": {
      "from": 33,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 34
    }
  }, {
    "left": {
      "from": 28,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 32
    },
    "right": {
      "from": 28,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 32
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 164,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 176,
      "to": 7
    }
  }, {
    "left": {
      "from": 19,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 24
    },
    "right": {
      "from": 19,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 24
    }
  }, {
    "left": {
      "from": 43,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 44
    },
    "right": {
      "from": 43,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 44
    }
  }, {
    "left": {
      "from": 2,
      "line": "  }",
      "lineIdx": 189,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  }",
      "lineIdx": 170,
      "to": 3
    }
  }, {
    "left": {
      "from": 41,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 42
    }
  }, {
    "left": {
      "from": 87,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 88
    },
    "right": {
      "from": 87,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 88
    }
  }, {
    "left": {
      "from": 4,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 7
    }
  }, {
    "left": {
      "from": 43,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 44
    },
    "right": {
      "from": 43,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 44
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 7
    }
  }, {
    "left": {
      "from": 14,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 19
    },
    "right": {
      "from": 14,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 19
    }
  }, {
    "left": {
      "from": 20,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 24
    },
    "right": {
      "from": 20,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 24
    }
  }, {
    "left": {
      "from": 17,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 18
    }
  }, {
    "left": {
      "from": 27,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 28
    }
  }, {
    "left": {
      "from": 31,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 32
    }
  }, {
    "left": {
      "from": 15,
      "line": "    metrics.seq.toList",
      "lineIdx": 62,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    metrics.seq.toList",
      "lineIdx": 62,
      "to": 16
    }
  }, {
    "left": {
      "from": 94,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 95
    },
    "right": {
      "from": 94,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 95
    }
  }, {
    "left": {
      "from": 22,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 30
    },
    "right": {
      "from": 22,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 30
    }
  }, {
    "left": {
      "from": 44,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 45
    }
  }, {
    "left": {
      "from": 82,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 90
    },
    "right": {
      "from": 82,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 90
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 11
    }
  }, {
    "left": {
      "from": 37,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 38
    },
    "right": {
      "from": 37,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 38
    }
  }, {
    "left": {
      "from": 55,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 65
    },
    "right": {
      "from": 55,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 65
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 11
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 17
    }
  }, {
    "left": {
      "from": 22,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 28
    },
    "right": {
      "from": 22,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 28
    }
  }, {
    "left": {
      "from": 4,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 5
    }
  }, {
    "left": {
      "from": 11,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 18
    },
    "right": {
      "from": 11,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 18
    }
  }, {
    "left": {
      "from": 7,
      "line": "object PlotData {",
      "lineIdx": 29,
      "to": 15
    },
    "right": {
      "from": 7,
      "line": "object PlotData {",
      "lineIdx": 29,
      "to": 15
    }
  }, {
    "left": {
      "from": 101,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 102
    },
    "right": {
      "from": 101,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 102
    }
  }, {
    "left": {
      "from": 77,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 78
    },
    "right": {
      "from": 77,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 78
    }
  }, {
    "left": {
      "from": 53,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 54
    }
  }, {
    "left": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 10
    },
    "right": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 10
    }
  }, {
    "left": {
      "from": 47,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 48
    }
  }, {
    "left": {
      "from": 99,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 100
    },
    "right": {
      "from": 99,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 100
    }
  }, {
    "left": {
      "from": 55,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 56
    }
  }, {
    "left": {
      "from": 41,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 42
    }
  }, {
    "left": {
      "from": 49,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 53
    },
    "right": {
      "from": 49,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 53
    }
  }, {
    "left": {
      "from": 31,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 32
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 17
    }
  }, {
    "left": {
      "from": 18,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 19
    },
    "right": {
      "from": 18,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 19
    }
  }, {
    "left": {
      "from": 48,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 49
    }
  }, {
    "left": {
      "from": 70,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 78
    },
    "right": {
      "from": 70,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 78
    }
  }, {
    "left": {
      "from": 28,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 34
    },
    "right": {
      "from": 28,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 34
    }
  }, {
    "left": {
      "from": 38,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 39
    }
  }, {
    "left": {
      "from": 4,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 188,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 169,
      "to": 5
    }
  }, {
    "left": {
      "from": 37,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 38
    },
    "right": {
      "from": 37,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 38
    }
  }, {
    "left": {
      "from": 2,
      "line": "  \"plot data\" ignore {",
      "lineIdx": 163,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  \"plot data\" ignore {",
      "lineIdx": 175,
      "to": 3
    }
  }, {
    "left": {
      "from": 58,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 66
    },
    "right": {
      "from": 58,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 66
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 17
    }
  }, {
    "left": {
      "from": 49,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 55
    },
    "right": {
      "from": 49,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 55
    }
  }, {
    "left": {
      "from": 38,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 181,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 162,
      "to": 39
    }
  }, {
    "left": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 37
    },
    "right": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 37
    }
  }, {
    "left": {
      "from": 28,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 34
    },
    "right": {
      "from": 28,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 34
    }
  }, {
    "left": {
      "from": 22,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 167,
      "to": 27
    },
    "right": {
      "from": 22,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 179,
      "to": 27
    }
  }, {
    "left": {
      "from": 25,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 26
    }
  }, {
    "left": {
      "from": 74,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 75
    },
    "right": {
      "from": 74,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 75
    }
  }, {
    "left": {
      "from": 30,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 31
    }
  }, {
    "left": {
      "from": 58,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 66
    },
    "right": {
      "from": 58,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 66
    }
  }, {
    "left": {
      "from": 21,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 22
    }
  }, {
    "left": {
      "from": 50,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 60
    },
    "right": {
      "from": 50,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 60
    }
  }, {
    "left": {
      "from": 12,
      "line": "    metrics.seq.toList",
      "lineIdx": 62,
      "to": 15
    },
    "right": {
      "from": 12,
      "line": "    metrics.seq.toList",
      "lineIdx": 62,
      "to": 15
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 17
    }
  }, {
    "left": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 26
    },
    "right": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 26
    }
  }, {
    "left": {
      "from": 42,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 50
    },
    "right": {
      "from": 42,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 50
    }
  }, {
    "left": {
      "from": 66,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 67
    },
    "right": {
      "from": 66,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 67
    }
  }, {
    "left": {
      "from": 42,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 43
    },
    "right": {
      "from": 42,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 43
    }
  }, {
    "left": {
      "from": 16,
      "line": "import org.log4s.getLogger",
      "lineIdx": 15,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "import org.log4s.getLogger",
      "lineIdx": 15,
      "to": 17
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 10
    }
  }, {
    "left": {
      "from": 38,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 184,
      "to": 44
    },
    "right": {
      "from": 38,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 165,
      "to": 44
    }
  }, {
    "left": {
      "from": 14,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 26
    },
    "right": {
      "from": 14,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 26
    }
  }, {
    "left": {
      "from": 31,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 34
    },
    "right": {
      "from": 31,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 34
    }
  }, {
    "left": {
      "from": 38,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 39
    }
  }, {
    "left": {
      "from": 49,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 50
    }
  }, {
    "left": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 6
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 16
    }
  }, {
    "left": {
      "from": 19,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 20
    },
    "right": {
      "from": 19,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 20
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 15
    }
  }, {
    "left": {
      "from": 95,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 96
    },
    "right": {
      "from": 95,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 96
    }
  }, {
    "left": {
      "from": 11,
      "line": "      path -> f1Score",
      "lineIdx": 187,
      "to": 12
    },
    "right": {
      "from": 11,
      "line": "      path -> f1Score",
      "lineIdx": 168,
      "to": 12
    }
  }, {
    "left": {
      "from": 96,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 103
    },
    "right": {
      "from": 96,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 103
    }
  }, {
    "left": {
      "from": 21,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 22
    }
  }, {
    "left": {
      "from": 60,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 61
    },
    "right": {
      "from": 60,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 61
    }
  }, {
    "left": {
      "from": 30,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 31
    }
  }, {
    "left": {
      "from": 9,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 181,
      "to": 10
    },
    "right": {
      "from": 9,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 162,
      "to": 10
    }
  }, {
    "left": {
      "from": 30,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 31
    }
  }, {
    "left": {
      "from": 15,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 16
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 16
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val test = nestedTest.flatten",
      "lineIdx": 83,
      "to": 12
    },
    "right": {
      "from": 8,
      "line": "    val test = nestedTest.flatten",
      "lineIdx": 83,
      "to": 12
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 7
    }
  }, {
    "left": {
      "from": 37,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 42
    },
    "right": {
      "from": 37,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 42
    }
  }, {
    "left": {
      "from": 37,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 38
    },
    "right": {
      "from": 37,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 38
    }
  }, {
    "left": {
      "from": 96,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 97
    },
    "right": {
      "from": 96,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 97
    }
  }, {
    "left": {
      "from": 69,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 70
    },
    "right": {
      "from": 69,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 70
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 7
    }
  }, {
    "left": {
      "from": 44,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 184,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 165,
      "to": 45
    }
  }, {
    "left": {
      "from": 18,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 24
    },
    "right": {
      "from": 18,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 24
    }
  }, {
    "left": {
      "from": 109,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 110
    },
    "right": {
      "from": 109,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 110
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 15
    },
    "right": {
      "from": 8,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 15
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 36
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 15
    },
    "right": {
      "from": 8,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 15
    }
  }, {
    "left": {
      "from": 7,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 12
    },
    "right": {
      "from": 7,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 12
    }
  }, {
    "left": {
      "from": 38,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 39
    }
  }, {
    "left": {
      "from": 22,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 23
    }
  }, {
    "left": {
      "from": 86,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 87
    },
    "right": {
      "from": 86,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 87
    }
  }, {
    "left": {
      "from": 39,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 46
    },
    "right": {
      "from": 39,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 46
    }
  }, {
    "left": {
      "from": 4,
      "line": "    metrics.seq.toList",
      "lineIdx": 62,
      "to": 11
    },
    "right": {
      "from": 4,
      "line": "    metrics.seq.toList",
      "lineIdx": 62,
      "to": 11
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 36
    }
  }, {
    "left": {
      "from": 52,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 53
    },
    "right": {
      "from": 52,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 53
    }
  }, {
    "left": {
      "from": 40,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 49
    },
    "right": {
      "from": 40,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 49
    }
  }, {
    "left": {
      "from": 36,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 37
    },
    "right": {
      "from": 36,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 37
    }
  }, {
    "left": {
      "from": 73,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 74
    },
    "right": {
      "from": 73,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 74
    }
  }, {
    "left": {
      "from": 31,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 32
    }
  }, {
    "left": {
      "from": 40,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 43
    },
    "right": {
      "from": 40,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 43
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 7
    }
  }, {
    "left": {
      "from": 18,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 34
    },
    "right": {
      "from": 18,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 34
    }
  }, {
    "left": {
      "from": 49,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 56
    },
    "right": {
      "from": 49,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 56
    }
  }, {
    "left": {
      "from": 23,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 24
    },
    "right": {
      "from": 23,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 24
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 17
    }
  }, {
    "left": {
      "from": 47,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 48
    }
  }, {
    "left": {
      "from": 41,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 58
    },
    "right": {
      "from": 41,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 58
    }
  }, {
    "left": {
      "from": 4,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 9
    },
    "right": {
      "from": 4,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 9
    }
  }, {
    "left": {
      "from": 53,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 54
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 18
    }
  }, {
    "left": {
      "from": 100,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 101
    },
    "right": {
      "from": 100,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 101
    }
  }, {
    "left": {
      "from": 18,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 26
    },
    "right": {
      "from": 18,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 26
    }
  }, {
    "left": {
      "from": 6,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 12
    },
    "right": {
      "from": 6,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 12
    }
  }, {
    "left": {
      "from": 65,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 66
    },
    "right": {
      "from": 65,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 66
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 7
    }
  }, {
    "left": {
      "from": 27,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 30
    },
    "right": {
      "from": 27,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 30
    }
  }, {
    "left": {
      "from": 69,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 70
    },
    "right": {
      "from": 69,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 70
    }
  }, {
    "left": {
      "from": 27,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 28
    }
  }, {
    "left": {
      "from": 60,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 61
    },
    "right": {
      "from": 60,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 61
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 16
    }
  }, {
    "left": {
      "from": 53,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 54
    }
  }, {
    "left": {
      "from": 79,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 80
    },
    "right": {
      "from": 79,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 80
    }
  }, {
    "left": {
      "from": 30,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 31
    }
  }, {
    "left": {
      "from": 114,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 118
    },
    "right": {
      "from": 114,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 118
    }
  }, {
    "left": {
      "from": 53,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 54
    }
  }, {
    "left": {
      "from": 32,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 33
    }
  }, {
    "left": {
      "from": 96,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 97
    },
    "right": {
      "from": 96,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 97
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 15
    }
  }, {
    "left": {
      "from": 10,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 13
    },
    "right": {
      "from": 10,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 13
    }
  }, {
    "left": {
      "from": 90,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 91
    },
    "right": {
      "from": 90,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 91
    }
  }, {
    "left": {
      "from": 48,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 49
    }
  }, {
    "left": {
      "from": 2,
      "line": "  \"show difference\" in {",
      "lineIdx": 213,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  \"show difference\" in {",
      "lineIdx": 213,
      "to": 3
    }
  }, {
    "left": {
      "from": 59,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 60
    },
    "right": {
      "from": 59,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 60
    }
  }, {
    "left": {
      "from": 90,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 91
    },
    "right": {
      "from": 90,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 91
    }
  }, {
    "left": {
      "from": 77,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 78
    },
    "right": {
      "from": 77,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 78
    }
  }, {
    "left": {
      "from": 90,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 91
    },
    "right": {
      "from": 90,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 91
    }
  }, {
    "left": {
      "from": 16,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 23
    },
    "right": {
      "from": 16,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 23
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 11
    }
  }, {
    "left": {
      "from": 65,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 66
    },
    "right": {
      "from": 65,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 66
    }
  }, {
    "left": {
      "from": 47,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 48
    }
  }, {
    "left": {
      "from": 44,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 45
    }
  }, {
    "left": {
      "from": 52,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 53
    },
    "right": {
      "from": 52,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 53
    }
  }, {
    "left": {
      "from": 48,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 49
    }
  }, {
    "left": {
      "from": 31,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 183,
      "to": 40
    },
    "right": {
      "from": 31,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 164,
      "to": 40
    }
  }, {
    "left": {
      "from": 42,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 43
    },
    "right": {
      "from": 42,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 43
    }
  }, {
    "left": {
      "from": 57,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 182,
      "to": 72
    },
    "right": {
      "from": 57,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 163,
      "to": 72
    }
  }, {
    "left": {
      "from": 22,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 181,
      "to": 26
    },
    "right": {
      "from": 22,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 162,
      "to": 26
    }
  }, {
    "left": {
      "from": 47,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 48
    }
  }, {
    "left": {
      "from": 59,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 73
    },
    "right": {
      "from": 59,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 73
    }
  }, {
    "left": {
      "from": 14,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 33
    },
    "right": {
      "from": 14,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 33
    }
  }, {
    "left": {
      "from": 66,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 78
    },
    "right": {
      "from": 66,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 78
    }
  }, {
    "left": {
      "from": 36,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 37
    },
    "right": {
      "from": 36,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 37
    }
  }, {
    "left": {
      "from": 63,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 64
    },
    "right": {
      "from": 63,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 64
    }
  }, {
    "left": {
      "from": 12,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 13
    }
  }, {
    "left": {
      "from": 63,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 76
    },
    "right": {
      "from": 63,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 76
    }
  }, {
    "left": {
      "from": 48,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 61
    },
    "right": {
      "from": 48,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 61
    }
  }, {
    "left": {
      "from": 106,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 107
    },
    "right": {
      "from": 106,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 107
    }
  }, {
    "left": {
      "from": 30,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 31
    }
  }, {
    "left": {
      "from": 56,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 57
    }
  }, {
    "left": {
      "from": 61,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 62
    },
    "right": {
      "from": 61,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 62
    }
  }, {
    "left": {
      "from": 54,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 55
    }
  }, {
    "left": {
      "from": 63,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 67
    },
    "right": {
      "from": 63,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 67
    }
  }, {
    "left": {
      "from": 4,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 12
    },
    "right": {
      "from": 4,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 12
    }
  }, {
    "left": {
      "from": 28,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 36
    },
    "right": {
      "from": 28,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 36
    }
  }, {
    "left": {
      "from": 37,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 38
    },
    "right": {
      "from": 37,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 38
    }
  }, {
    "left": {
      "from": 6,
      "line": "      path -> f1Score",
      "lineIdx": 187,
      "to": 10
    },
    "right": {
      "from": 6,
      "line": "      path -> f1Score",
      "lineIdx": 168,
      "to": 10
    }
  }, {
    "left": {
      "from": 55,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 56
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 24
    },
    "right": {
      "from": 8,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 24
    }
  }, {
    "left": {
      "from": 76,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 77
    },
    "right": {
      "from": 76,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 77
    }
  }, {
    "left": {
      "from": 72,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 73
    },
    "right": {
      "from": 72,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 73
    }
  }, {
    "left": {
      "from": 12,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 13
    }
  }, {
    "left": {
      "from": 72,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 73
    },
    "right": {
      "from": 72,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 73
    }
  }, {
    "left": {
      "from": 2,
      "line": "  }",
      "lineIdx": 211,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  }",
      "lineIdx": 211,
      "to": 3
    }
  }, {
    "left": {
      "from": 2,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 9
    },
    "right": {
      "from": 2,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 9
    }
  }, {
    "left": {
      "from": 55,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 71
    },
    "right": {
      "from": 55,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 71
    }
  }, {
    "left": {
      "from": 26,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 34
    },
    "right": {
      "from": 26,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 34
    }
  }, {
    "left": {
      "from": 2,
      "line": "  }",
      "lineIdx": 123,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  }",
      "lineIdx": 123,
      "to": 3
    }
  }, {
    "left": {
      "from": 0,
      "line": "import java.awt.Color",
      "lineIdx": 2,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import java.awt.Color",
      "lineIdx": 2,
      "to": 6
    }
  }, {
    "left": {
      "from": 16,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 22
    },
    "right": {
      "from": 16,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 22
    }
  }, {
    "left": {
      "from": 74,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 82
    },
    "right": {
      "from": 74,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 82
    }
  }, {
    "left": {
      "from": 82,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 83
    },
    "right": {
      "from": 82,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 83
    }
  }, {
    "left": {
      "from": 30,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 31
    }
  }, {
    "left": {
      "from": 89,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 90
    },
    "right": {
      "from": 89,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 90
    }
  }, {
    "left": {
      "from": 11,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 12
    },
    "right": {
      "from": 11,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 12
    }
  }, {
    "left": {
      "from": 21,
      "line": "import org.scalatest.FreeSpecLike",
      "lineIdx": 16,
      "to": 33
    },
    "right": {
      "from": 21,
      "line": "import org.scalatest.FreeSpecLike",
      "lineIdx": 16,
      "to": 33
    }
  }, {
    "left": {
      "from": 48,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 49
    }
  }, {
    "left": {
      "from": 59,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 60
    },
    "right": {
      "from": 59,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 60
    }
  }, {
    "left": {
      "from": 70,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 74
    },
    "right": {
      "from": 70,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 74
    }
  }, {
    "left": {
      "from": 23,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 24
    },
    "right": {
      "from": 23,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 24
    }
  }, {
    "left": {
      "from": 31,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 32
    }
  }, {
    "left": {
      "from": 79,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 80
    },
    "right": {
      "from": 79,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 80
    }
  }, {
    "left": {
      "from": 44,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 50
    },
    "right": {
      "from": 44,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 50
    }
  }, {
    "left": {
      "from": 30,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 31
    }
  }, {
    "left": {
      "from": 111,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 112
    },
    "right": {
      "from": 111,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 112
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 21
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 21
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 11
    }
  }, {
    "left": {
      "from": 19,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 20
    },
    "right": {
      "from": 19,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 20
    }
  }, {
    "left": {
      "from": 104,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 105
    },
    "right": {
      "from": 104,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 105
    }
  }, {
    "left": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 10
    },
    "right": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 10
    }
  }, {
    "left": {
      "from": 24,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 25
    },
    "right": {
      "from": 24,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 25
    }
  }, {
    "left": {
      "from": 28,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 171,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 183,
      "to": 29
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 17
    }
  }, {
    "left": {
      "from": 54,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 55
    }
  }, {
    "left": {
      "from": 45,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 46
    }
  }, {
    "left": {
      "from": 19,
      "line": "    val matchesSet = matches.toSet",
      "lineIdx": 45,
      "to": 20
    },
    "right": {
      "from": 19,
      "line": "    val matchesSet = matches.toSet",
      "lineIdx": 45,
      "to": 20
    }
  }, {
    "left": {
      "from": 47,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 48
    }
  }, {
    "left": {
      "from": 55,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 56
    }
  }, {
    "left": {
      "from": 54,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 69
    },
    "right": {
      "from": 54,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 69
    }
  }, {
    "left": {
      "from": 47,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 48
    }
  }, {
    "left": {
      "from": 37,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 45
    },
    "right": {
      "from": 37,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 45
    }
  }, {
    "left": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 6
    }
  }, {
    "left": {
      "from": 79,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 80
    },
    "right": {
      "from": 79,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 80
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 15
    }
  }, {
    "left": {
      "from": 39,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 47
    },
    "right": {
      "from": 39,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 47
    }
  }, {
    "left": {
      "from": 60,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 180,
      "to": 61
    },
    "right": {
      "from": 60,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 161,
      "to": 61
    }
  }, {
    "left": {
      "from": 72,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 182,
      "to": 73
    },
    "right": {
      "from": 72,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 163,
      "to": 73
    }
  }, {
    "left": {
      "from": 60,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 72
    },
    "right": {
      "from": 60,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 72
    }
  }, {
    "left": {
      "from": 34,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 41
    },
    "right": {
      "from": 34,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 41
    }
  }, {
    "left": {
      "from": 47,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 54
    },
    "right": {
      "from": 47,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 54
    }
  }, {
    "left": {
      "from": 80,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 88
    },
    "right": {
      "from": 80,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 88
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 16
    }
  }, {
    "left": {
      "from": 72,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 73
    },
    "right": {
      "from": 72,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 73
    }
  }, {
    "left": {
      "from": 26,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 27
    }
  }, {
    "left": {
      "from": 79,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 82
    },
    "right": {
      "from": 79,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 82
    }
  }, {
    "left": {
      "from": 21,
      "line": "final class PlotData extends FreeSpecLike {",
      "lineIdx": 162,
      "to": 28
    },
    "right": {
      "from": 21,
      "line": "final class PlotData extends FreeSpecLike {",
      "lineIdx": 174,
      "to": 28
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 15
    },
    "right": {
      "from": 8,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 15
    }
  }, {
    "left": {
      "from": 52,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 53
    },
    "right": {
      "from": 52,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 53
    }
  }, {
    "left": {
      "from": 8,
      "line": "  \"show difference\" in {",
      "lineIdx": 213,
      "to": 18
    },
    "right": {
      "from": 8,
      "line": "  \"show difference\" in {",
      "lineIdx": 213,
      "to": 18
    }
  }, {
    "left": {
      "from": 28,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 33
    },
    "right": {
      "from": 28,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 33
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 11
    }
  }, {
    "left": {
      "from": 39,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 47
    },
    "right": {
      "from": 39,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 47
    }
  }, {
    "left": {
      "from": 44,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 45
    }
  }, {
    "left": {
      "from": 88,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 89
    },
    "right": {
      "from": 88,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 89
    }
  }, {
    "left": {
      "from": 45,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 54
    },
    "right": {
      "from": 45,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 54
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 15
    },
    "right": {
      "from": 8,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 15
    }
  }, {
    "left": {
      "from": 36,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 37
    },
    "right": {
      "from": 36,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 37
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 7
    }
  }, {
    "left": {
      "from": 59,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 60
    },
    "right": {
      "from": 59,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 60
    }
  }, {
    "left": {
      "from": 15,
      "line": "    val test = nestedTest.flatten",
      "lineIdx": 83,
      "to": 25
    },
    "right": {
      "from": 15,
      "line": "    val test = nestedTest.flatten",
      "lineIdx": 83,
      "to": 25
    }
  }, {
    "left": {
      "from": 50,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 51
    }
  }, {
    "left": {
      "from": 21,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 22
    }
  }, {
    "left": {
      "from": 113,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 114
    },
    "right": {
      "from": 113,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 114
    }
  }, {
    "left": {
      "from": 39,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 47
    },
    "right": {
      "from": 39,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 47
    }
  }, {
    "left": {
      "from": 69,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 70
    },
    "right": {
      "from": 69,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 70
    }
  }, {
    "left": {
      "from": 23,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 32
    },
    "right": {
      "from": 23,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 32
    }
  }, {
    "left": {
      "from": 2,
      "line": "  }",
      "lineIdx": 177,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  }",
      "lineIdx": 189,
      "to": 3
    }
  }, {
    "left": {
      "from": 26,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 34
    },
    "right": {
      "from": 26,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 34
    }
  }, {
    "left": {
      "from": 31,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 34
    },
    "right": {
      "from": 31,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 34
    }
  }, {
    "left": {
      "from": 42,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 43
    },
    "right": {
      "from": 42,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 43
    }
  }, {
    "left": {
      "from": 28,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 29
    }
  }, {
    "left": {
      "from": 49,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 50
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 11
    }
  }, {
    "left": {
      "from": 16,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 17
    }
  }, {
    "left": {
      "from": 49,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 50
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 17
    },
    "right": {
      "from": 8,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 17
    }
  }, {
    "left": {
      "from": 74,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 75
    },
    "right": {
      "from": 74,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 75
    }
  }, {
    "left": {
      "from": 41,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 49
    },
    "right": {
      "from": 41,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 49
    }
  }, {
    "left": {
      "from": 50,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 60
    },
    "right": {
      "from": 50,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 60
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 10
    }
  }, {
    "left": {
      "from": 48,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 49
    }
  }, {
    "left": {
      "from": 49,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 52
    },
    "right": {
      "from": 49,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 52
    }
  }, {
    "left": {
      "from": 24,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 25
    },
    "right": {
      "from": 24,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 25
    }
  }, {
    "left": {
      "from": 0,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 7
    },
    "right": {
      "from": 0,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 7
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 10
    }
  }, {
    "left": {
      "from": 22,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 29
    },
    "right": {
      "from": 22,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 29
    }
  }, {
    "left": {
      "from": 69,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 77
    },
    "right": {
      "from": 69,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 77
    }
  }, {
    "left": {
      "from": 21,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 22
    }
  }, {
    "left": {
      "from": 19,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 26
    },
    "right": {
      "from": 19,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 26
    }
  }, {
    "left": {
      "from": 89,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 90
    },
    "right": {
      "from": 89,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 90
    }
  }, {
    "left": {
      "from": 56,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 57
    }
  }, {
    "left": {
      "from": 43,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 44
    },
    "right": {
      "from": 43,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 44
    }
  }, {
    "left": {
      "from": 52,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 53
    },
    "right": {
      "from": 52,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 53
    }
  }, {
    "left": {
      "from": 99,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 100
    },
    "right": {
      "from": 99,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 100
    }
  }, {
    "left": {
      "from": 51,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 52
    },
    "right": {
      "from": 51,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 52
    }
  }, {
    "left": {
      "from": 46,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 47
    }
  }, {
    "left": {
      "from": 18,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 180,
      "to": 28
    },
    "right": {
      "from": 18,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 161,
      "to": 28
    }
  }, {
    "left": {
      "from": 70,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 71
    },
    "right": {
      "from": 70,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 71
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 13
    },
    "right": {
      "from": 8,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 13
    }
  }, {
    "left": {
      "from": 27,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 32
    },
    "right": {
      "from": 27,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 32
    }
  }, {
    "left": {
      "from": 31,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 32
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 18
    }
  }, {
    "left": {
      "from": 24,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 184,
      "to": 37
    },
    "right": {
      "from": 24,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 165,
      "to": 37
    }
  }, {
    "left": {
      "from": 69,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 70
    },
    "right": {
      "from": 69,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 70
    }
  }, {
    "left": {
      "from": 33,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 34
    }
  }, {
    "left": {
      "from": 26,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 27
    }
  }, {
    "left": {
      "from": 32,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 39
    },
    "right": {
      "from": 32,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 39
    }
  }, {
    "left": {
      "from": 62,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 67
    },
    "right": {
      "from": 62,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 67
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 10
    }
  }, {
    "left": {
      "from": 14,
      "line": "      path -> f1Score",
      "lineIdx": 187,
      "to": 21
    },
    "right": {
      "from": 14,
      "line": "      path -> f1Score",
      "lineIdx": 168,
      "to": 21
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 18
    },
    "right": {
      "from": 8,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 18
    }
  }, {
    "left": {
      "from": 13,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 14
    },
    "right": {
      "from": 13,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 14
    }
  }, {
    "left": {
      "from": 51,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 56
    },
    "right": {
      "from": 51,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 56
    }
  }, {
    "left": {
      "from": 30,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 32
    },
    "right": {
      "from": 30,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 32
    }
  }, {
    "left": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 34
    }
  }, {
    "left": {
      "from": 24,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 32
    },
    "right": {
      "from": 24,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 32
    }
  }, {
    "left": {
      "from": 6,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 186,
      "to": 9
    },
    "right": {
      "from": 6,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 167,
      "to": 9
    }
  }, {
    "left": {
      "from": 5,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 188,
      "to": 6
    },
    "right": {
      "from": 5,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 169,
      "to": 6
    }
  }, {
    "left": {
      "from": 5,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 21
    },
    "right": {
      "from": 5,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 21
    }
  }, {
    "left": {
      "from": 40,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 41
    }
  }, {
    "left": {
      "from": 2,
      "line": "  }",
      "lineIdx": 39,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  }",
      "lineIdx": 39,
      "to": 3
    }
  }, {
    "left": {
      "from": 30,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 31
    }
  }, {
    "left": {
      "from": 10,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 24
    },
    "right": {
      "from": 10,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 24
    }
  }, {
    "left": {
      "from": 9,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 23
    },
    "right": {
      "from": 9,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 23
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 17
    }
  }, {
    "left": {
      "from": 49,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 53
    },
    "right": {
      "from": 49,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 53
    }
  }, {
    "left": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 6
    }
  }, {
    "left": {
      "from": 17,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 18
    }
  }, {
    "left": {
      "from": 12,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 13
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 15
    }
  }, {
    "left": {
      "from": 25,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 26
    }
  }, {
    "left": {
      "from": 28,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 29
    }
  }, {
    "left": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 34
    }
  }, {
    "left": {
      "from": 27,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 28
    }
  }, {
    "left": {
      "from": 13,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 21
    },
    "right": {
      "from": 13,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 21
    }
  }, {
    "left": {
      "from": 14,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 28
    },
    "right": {
      "from": 14,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 28
    }
  }, {
    "left": {
      "from": 46,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 47
    }
  }, {
    "left": {
      "from": 49,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 54
    },
    "right": {
      "from": 49,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 54
    }
  }, {
    "left": {
      "from": 10,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 183,
      "to": 21
    },
    "right": {
      "from": 10,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 164,
      "to": 21
    }
  }, {
    "left": {
      "from": 12,
      "line": "import smile.feature.Scaler",
      "lineIdx": 20,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "import smile.feature.Scaler",
      "lineIdx": 20,
      "to": 13
    }
  }, {
    "left": {
      "from": 19,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 23
    },
    "right": {
      "from": 19,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 23
    }
  }, {
    "left": {
      "from": 39,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 50
    },
    "right": {
      "from": 39,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 50
    }
  }, {
    "left": {
      "from": 39,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 40
    },
    "right": {
      "from": 39,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 40
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 7
    }
  }, {
    "left": {
      "from": 6,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 188,
      "to": 12
    },
    "right": {
      "from": 6,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 169,
      "to": 12
    }
  }, {
    "left": {
      "from": 42,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 43
    },
    "right": {
      "from": 42,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 43
    }
  }, {
    "left": {
      "from": 21,
      "line": "  private val logger = getLogger",
      "lineIdx": 30,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "  private val logger = getLogger",
      "lineIdx": 30,
      "to": 22
    }
  }, {
    "left": {
      "from": 57,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 58
    },
    "right": {
      "from": 57,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 58
    }
  }, {
    "left": {
      "from": 21,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 22
    }
  }, {
    "left": {
      "from": 63,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 67
    },
    "right": {
      "from": 63,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 67
    }
  }, {
    "left": {
      "from": 48,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 60
    },
    "right": {
      "from": 48,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 60
    }
  }, {
    "left": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 27
    }
  }, {
    "left": {
      "from": 28,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 41
    },
    "right": {
      "from": 28,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 41
    }
  }, {
    "left": {
      "from": 52,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 53
    },
    "right": {
      "from": 52,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 53
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 7
    }
  }, {
    "left": {
      "from": 55,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 64
    },
    "right": {
      "from": 55,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 64
    }
  }, {
    "left": {
      "from": 62,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 63
    },
    "right": {
      "from": 62,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 63
    }
  }, {
    "left": {
      "from": 80,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 81
    },
    "right": {
      "from": 80,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 81
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 15
    }
  }, {
    "left": {
      "from": 59,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 60
    },
    "right": {
      "from": 59,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 60
    }
  }, {
    "left": {
      "from": 45,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 46
    }
  }, {
    "left": {
      "from": 58,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 59
    },
    "right": {
      "from": 58,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 59
    }
  }, {
    "left": {
      "from": 68,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 76
    },
    "right": {
      "from": 68,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 76
    }
  }, {
    "left": {
      "from": 72,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 73
    },
    "right": {
      "from": 72,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 73
    }
  }, {
    "left": {
      "from": 62,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 63
    },
    "right": {
      "from": 62,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 63
    }
  }, {
    "left": {
      "from": 13,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 17
    },
    "right": {
      "from": 13,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 17
    }
  }, {
    "left": {
      "from": 28,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 29
    }
  }, {
    "left": {
      "from": 111,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 112
    },
    "right": {
      "from": 111,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 112
    }
  }, {
    "left": {
      "from": 22,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 23
    }
  }, {
    "left": {
      "from": 3,
      "line": "  \"show difference\" in {",
      "lineIdx": 213,
      "to": 7
    },
    "right": {
      "from": 3,
      "line": "  \"show difference\" in {",
      "lineIdx": 213,
      "to": 7
    }
  }, {
    "left": {
      "from": 11,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 12
    },
    "right": {
      "from": 11,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 12
    }
  }, {
    "left": {
      "from": 42,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 43
    },
    "right": {
      "from": 42,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 43
    }
  }, {
    "left": {
      "from": 22,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 23
    }
  }, {
    "left": {
      "from": 49,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 50
    }
  }, {
    "left": {
      "from": 11,
      "line": "import org.log4s.getLogger",
      "lineIdx": 15,
      "to": 16
    },
    "right": {
      "from": 11,
      "line": "import org.log4s.getLogger",
      "lineIdx": 15,
      "to": 16
    }
  }, {
    "left": {
      "from": 33,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 34
    }
  }, {
    "left": {
      "from": 41,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 42
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 10
    }
  }, {
    "left": {
      "from": 11,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 18
    },
    "right": {
      "from": 11,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 18
    }
  }, {
    "left": {
      "from": 11,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 12
    },
    "right": {
      "from": 11,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 12
    }
  }, {
    "left": {
      "from": 34,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 35
    }
  }, {
    "left": {
      "from": 26,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 27
    }
  }, {
    "left": {
      "from": 18,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 186,
      "to": 19
    },
    "right": {
      "from": 18,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 167,
      "to": 19
    }
  }, {
    "left": {
      "from": 45,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 50
    },
    "right": {
      "from": 45,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 50
    }
  }, {
    "left": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 34
    }
  }, {
    "left": {
      "from": 39,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 40
    },
    "right": {
      "from": 39,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 40
    }
  }, {
    "left": {
      "from": 63,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 64
    },
    "right": {
      "from": 63,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 64
    }
  }, {
    "left": {
      "from": 19,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 171,
      "to": 20
    },
    "right": {
      "from": 19,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 183,
      "to": 20
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 15
    }
  }, {
    "left": {
      "from": 63,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 75
    },
    "right": {
      "from": 63,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 75
    }
  }, {
    "left": {
      "from": 19,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 29
    },
    "right": {
      "from": 19,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 29
    }
  }, {
    "left": {
      "from": 16,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 22
    },
    "right": {
      "from": 16,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 22
    }
  }, {
    "left": {
      "from": 44,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 45
    }
  }, {
    "left": {
      "from": 4,
      "line": "    }",
      "lineIdx": 76,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    }",
      "lineIdx": 76,
      "to": 5
    }
  }, {
    "left": {
      "from": 36,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 37
    },
    "right": {
      "from": 36,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 37
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 16
    }
  }, {
    "left": {
      "from": 54,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 55
    }
  }, {
    "left": {
      "from": 10,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 181,
      "to": 13
    },
    "right": {
      "from": 10,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 162,
      "to": 13
    }
  }, {
    "left": {
      "from": 40,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 41
    }
  }, {
    "left": {
      "from": 71,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 72
    },
    "right": {
      "from": 71,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 72
    }
  }, {
    "left": {
      "from": 77,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 81
    },
    "right": {
      "from": 77,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 81
    }
  }, {
    "left": {
      "from": 99,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 100
    },
    "right": {
      "from": 99,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 100
    }
  }, {
    "left": {
      "from": 18,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 28
    },
    "right": {
      "from": 18,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 28
    }
  }, {
    "left": {
      "from": 24,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 29
    },
    "right": {
      "from": 24,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 29
    }
  }, {
    "left": {
      "from": 53,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 72
    },
    "right": {
      "from": 53,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 72
    }
  }, {
    "left": {
      "from": 44,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 58
    },
    "right": {
      "from": 44,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 58
    }
  }, {
    "left": {
      "from": 56,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 57
    }
  }, {
    "left": {
      "from": 41,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 42
    }
  }, {
    "left": {
      "from": 47,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 48
    }
  }, {
    "left": {
      "from": 118,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 119
    },
    "right": {
      "from": 118,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 119
    }
  }, {
    "left": {
      "from": 15,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 16
    }
  }, {
    "left": {
      "from": 54,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 62
    },
    "right": {
      "from": 54,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 62
    }
  }, {
    "left": {
      "from": 24,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 31
    },
    "right": {
      "from": 24,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 31
    }
  }, {
    "left": {
      "from": 18,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 26
    },
    "right": {
      "from": 18,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 26
    }
  }, {
    "left": {
      "from": 10,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 20
    },
    "right": {
      "from": 10,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 20
    }
  }, {
    "left": {
      "from": 26,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 34
    },
    "right": {
      "from": 26,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 34
    }
  }, {
    "left": {
      "from": 28,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 29
    }
  }, {
    "left": {
      "from": 64,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 65
    },
    "right": {
      "from": 64,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 65
    }
  }, {
    "left": {
      "from": 52,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 59
    },
    "right": {
      "from": 52,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 59
    }
  }, {
    "left": {
      "from": 42,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 50
    },
    "right": {
      "from": 42,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 50
    }
  }, {
    "left": {
      "from": 38,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 39
    }
  }, {
    "left": {
      "from": 45,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 46
    }
  }, {
    "left": {
      "from": 120,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 121
    },
    "right": {
      "from": 120,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 121
    }
  }, {
    "left": {
      "from": 35,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 36
    }
  }, {
    "left": {
      "from": 90,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 91
    },
    "right": {
      "from": 90,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 91
    }
  }, {
    "left": {
      "from": 17,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 28
    },
    "right": {
      "from": 17,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 28
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 11
    }
  }, {
    "left": {
      "from": 52,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 57
    },
    "right": {
      "from": 52,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 57
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 16
    }
  }, {
    "left": {
      "from": 21,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 26
    },
    "right": {
      "from": 21,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 26
    }
  }, {
    "left": {
      "from": 70,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 72
    },
    "right": {
      "from": 70,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 72
    }
  }, {
    "left": {
      "from": 47,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 48
    }
  }, {
    "left": {
      "from": 57,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 61
    },
    "right": {
      "from": 57,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 61
    }
  }, {
    "left": {
      "from": 45,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 184,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 165,
      "to": 46
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 16
    }
  }, {
    "left": {
      "from": 13,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 188,
      "to": 14
    },
    "right": {
      "from": 13,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 169,
      "to": 14
    }
  }, {
    "left": {
      "from": 80,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 81
    },
    "right": {
      "from": 80,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 81
    }
  }, {
    "left": {
      "from": 12,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 16
    },
    "right": {
      "from": 12,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 16
    }
  }, {
    "left": {
      "from": 71,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 77
    },
    "right": {
      "from": 71,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 77
    }
  }, {
    "left": {
      "from": 34,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 47
    },
    "right": {
      "from": 34,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 47
    }
  }, {
    "left": {
      "from": 29,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 30
    }
  }, {
    "left": {
      "from": 18,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 19
    },
    "right": {
      "from": 18,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 19
    }
  }, {
    "left": {
      "from": 42,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 48
    },
    "right": {
      "from": 42,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 48
    }
  }, {
    "left": {
      "from": 80,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 81
    },
    "right": {
      "from": 80,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 81
    }
  }, {
    "left": {
      "from": 79,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 80
    },
    "right": {
      "from": 79,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 80
    }
  }, {
    "left": {
      "from": 62,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 67
    },
    "right": {
      "from": 62,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 67
    }
  }, {
    "left": {
      "from": 58,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 70
    },
    "right": {
      "from": 58,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 70
    }
  }, {
    "left": {
      "from": 35,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 36
    }
  }, {
    "left": {
      "from": 70,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 71
    },
    "right": {
      "from": 70,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 71
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 11
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 7
    }
  }, {
    "left": {
      "from": 42,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 43
    },
    "right": {
      "from": 42,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 43
    }
  }, {
    "left": {
      "from": 18,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 20
    },
    "right": {
      "from": 18,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 20
    }
  }, {
    "left": {
      "from": 22,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 25
    },
    "right": {
      "from": 22,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 25
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 16
    }
  }, {
    "left": {
      "from": 37,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 48
    },
    "right": {
      "from": 37,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 48
    }
  }, {
    "left": {
      "from": 30,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 31
    }
  }, {
    "left": {
      "from": 41,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 42
    }
  }, {
    "left": {
      "from": 14,
      "line": "  \"plot data\" ignore {",
      "lineIdx": 163,
      "to": 20
    },
    "right": {
      "from": 14,
      "line": "  \"plot data\" ignore {",
      "lineIdx": 175,
      "to": 20
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 17
    },
    "right": {
      "from": 8,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 17
    }
  }, {
    "left": {
      "from": 70,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 71
    },
    "right": {
      "from": 70,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 71
    }
  }, {
    "left": {
      "from": 18,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 19
    },
    "right": {
      "from": 18,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 19
    }
  }, {
    "left": {
      "from": 4,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 11
    },
    "right": {
      "from": 4,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 11
    }
  }, {
    "left": {
      "from": 32,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 38
    },
    "right": {
      "from": 32,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 38
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 10
    }
  }, {
    "left": {
      "from": 39,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 45
    },
    "right": {
      "from": 39,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 45
    }
  }, {
    "left": {
      "from": 30,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 38
    },
    "right": {
      "from": 30,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 38
    }
  }, {
    "left": {
      "from": 11,
      "line": "    metrics.seq.toList",
      "lineIdx": 62,
      "to": 12
    },
    "right": {
      "from": 11,
      "line": "    metrics.seq.toList",
      "lineIdx": 62,
      "to": 12
    }
  }, {
    "left": {
      "from": 4,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 176,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 188,
      "to": 10
    }
  }, {
    "left": {
      "from": 34,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 35
    }
  }, {
    "left": {
      "from": 7,
      "line": "import org.scalatest.FreeSpecLike",
      "lineIdx": 16,
      "to": 10
    },
    "right": {
      "from": 7,
      "line": "import org.scalatest.FreeSpecLike",
      "lineIdx": 16,
      "to": 10
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 15
    }
  }, {
    "left": {
      "from": 56,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 57
    }
  }, {
    "left": {
      "from": 9,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 19
    },
    "right": {
      "from": 9,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 19
    }
  }, {
    "left": {
      "from": 20,
      "line": "import smile.feature.Scaler",
      "lineIdx": 20,
      "to": 21
    },
    "right": {
      "from": 20,
      "line": "import smile.feature.Scaler",
      "lineIdx": 20,
      "to": 21
    }
  }, {
    "left": {
      "from": 76,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 77
    },
    "right": {
      "from": 76,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 77
    }
  }, {
    "left": {
      "from": 4,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 12
    },
    "right": {
      "from": 4,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 12
    }
  }, {
    "left": {
      "from": 10,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 13
    },
    "right": {
      "from": 10,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 13
    }
  }, {
    "left": {
      "from": 12,
      "line": "import java.awt.Color",
      "lineIdx": 2,
      "to": 15
    },
    "right": {
      "from": 12,
      "line": "import java.awt.Color",
      "lineIdx": 2,
      "to": 15
    }
  }, {
    "left": {
      "from": 41,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 42
    }
  }, {
    "left": {
      "from": 78,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 79
    },
    "right": {
      "from": 78,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 79
    }
  }, {
    "left": {
      "from": 19,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 20
    },
    "right": {
      "from": 19,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 20
    }
  }, {
    "left": {
      "from": 16,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 176,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 188,
      "to": 17
    }
  }, {
    "left": {
      "from": 58,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 183,
      "to": 59
    },
    "right": {
      "from": 58,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 164,
      "to": 59
    }
  }, {
    "left": {
      "from": 65,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 180,
      "to": 66
    },
    "right": {
      "from": 65,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 161,
      "to": 66
    }
  }, {
    "left": {
      "from": 32,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 33
    }
  }, {
    "left": {
      "from": 60,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 61
    },
    "right": {
      "from": 60,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 61
    }
  }, {
    "left": {
      "from": 44,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 45
    }
  }, {
    "left": {
      "from": 43,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 51
    },
    "right": {
      "from": 43,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 51
    }
  }, {
    "left": {
      "from": 25,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 26
    }
  }, {
    "left": {
      "from": 66,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 74
    },
    "right": {
      "from": 66,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 74
    }
  }, {
    "left": {
      "from": 30,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 33
    },
    "right": {
      "from": 30,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 33
    }
  }, {
    "left": {
      "from": 25,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 26
    }
  }, {
    "left": {
      "from": 33,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 34
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 10
    }
  }, {
    "left": {
      "from": 27,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 28
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 25
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 25
    }
  }, {
    "left": {
      "from": 46,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 186,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 167,
      "to": 47
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 10
    }
  }, {
    "left": {
      "from": 19,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 22
    },
    "right": {
      "from": 19,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 22
    }
  }, {
    "left": {
      "from": 23,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 27
    },
    "right": {
      "from": 23,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 27
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 10
    }
  }, {
    "left": {
      "from": 80,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 81
    },
    "right": {
      "from": 80,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 81
    }
  }, {
    "left": {
      "from": 17,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 19
    },
    "right": {
      "from": 17,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 19
    }
  }, {
    "left": {
      "from": 31,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 32
    }
  }, {
    "left": {
      "from": 73,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 74
    },
    "right": {
      "from": 73,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 74
    }
  }, {
    "left": {
      "from": 12,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 27
    },
    "right": {
      "from": 12,
      "line": "package com.kristofszilagyi.sedito.gui",
      "lineIdx": 0,
      "to": 27
    }
  }, {
    "left": {
      "from": 4,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 12
    },
    "right": {
      "from": 4,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 12
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 15
    }
  }, {
    "left": {
      "from": 18,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 19
    },
    "right": {
      "from": 18,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 19
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 25
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 25
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 25
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 25
    }
  }, {
    "left": {
      "from": 70,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 71
    },
    "right": {
      "from": 70,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 71
    }
  }, {
    "left": {
      "from": 48,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 49
    }
  }, {
    "left": {
      "from": 36,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 37
    },
    "right": {
      "from": 36,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 37
    }
  }, {
    "left": {
      "from": 34,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 48
    },
    "right": {
      "from": 34,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 48
    }
  }, {
    "left": {
      "from": 20,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 21
    },
    "right": {
      "from": 20,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 21
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 15
    }
  }, {
    "left": {
      "from": 40,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 41
    }
  }, {
    "left": {
      "from": 0,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 6
    }
  }, {
    "left": {
      "from": 43,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 54
    },
    "right": {
      "from": 43,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 54
    }
  }, {
    "left": {
      "from": 48,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 53
    },
    "right": {
      "from": 48,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 53
    }
  }, {
    "left": {
      "from": 21,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 27
    },
    "right": {
      "from": 21,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 27
    }
  }, {
    "left": {
      "from": 95,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 96
    },
    "right": {
      "from": 95,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 96
    }
  }, {
    "left": {
      "from": 26,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 37
    },
    "right": {
      "from": 26,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 37
    }
  }, {
    "left": {
      "from": 17,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 188,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 169,
      "to": 18
    }
  }, {
    "left": {
      "from": 67,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 68
    },
    "right": {
      "from": 67,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 68
    }
  }, {
    "left": {
      "from": 38,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 39
    }
  }, {
    "left": {
      "from": 18,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 22
    },
    "right": {
      "from": 18,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 22
    }
  }, {
    "left": {
      "from": 81,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 82
    },
    "right": {
      "from": 81,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 82
    }
  }, {
    "left": {
      "from": 18,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 22
    },
    "right": {
      "from": 18,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 22
    }
  }, {
    "left": {
      "from": 39,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 49
    },
    "right": {
      "from": 39,
      "line": "      MetricsWithResults(m, matching = matchesSet.contains(potentialMatch))",
      "lineIdx": 50,
      "to": 49
    }
  }, {
    "left": {
      "from": 63,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 64
    },
    "right": {
      "from": 63,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 64
    }
  }, {
    "left": {
      "from": 71,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 72
    },
    "right": {
      "from": 71,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 72
    }
  }, {
    "left": {
      "from": 80,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 83
    },
    "right": {
      "from": 80,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 83
    }
  }, {
    "left": {
      "from": 22,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 29
    },
    "right": {
      "from": 22,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 29
    }
  }, {
    "left": {
      "from": 60,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 61
    },
    "right": {
      "from": 60,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 61
    }
  }, {
    "left": {
      "from": 27,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 31
    },
    "right": {
      "from": 27,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 31
    }
  }, {
    "left": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 34
    }
  }, {
    "left": {
      "from": 28,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 176,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 188,
      "to": 29
    }
  }, {
    "left": {
      "from": 12,
      "line": "        sys.exit(1)",
      "lineIdx": 36,
      "to": 16
    },
    "right": {
      "from": 12,
      "line": "        sys.exit(1)",
      "lineIdx": 36,
      "to": 16
    }
  }, {
    "left": {
      "from": 76,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 77
    },
    "right": {
      "from": 76,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 77
    }
  }, {
    "left": {
      "from": 46,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 47
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 44
    },
    "right": {
      "from": 35,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 44
    }
  }, {
    "left": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 26
    },
    "right": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 26
    }
  }, {
    "left": {
      "from": 6,
      "line": "final class PlotData extends FreeSpecLike {",
      "lineIdx": 162,
      "to": 11
    },
    "right": {
      "from": 6,
      "line": "final class PlotData extends FreeSpecLike {",
      "lineIdx": 174,
      "to": 11
    }
  }, {
    "left": {
      "from": 37,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 45
    },
    "right": {
      "from": 37,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 45
    }
  }, {
    "left": {
      "from": 75,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 79
    },
    "right": {
      "from": 75,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 79
    }
  }, {
    "left": {
      "from": 58,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 66
    },
    "right": {
      "from": 58,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 66
    }
  }, {
    "left": {
      "from": 10,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 26
    },
    "right": {
      "from": 10,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 26
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 36
    }
  }, {
    "left": {
      "from": 36,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 39
    },
    "right": {
      "from": 36,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 39
    }
  }, {
    "left": {
      "from": 28,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 29
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 11
    }
  }, {
    "left": {
      "from": 4,
      "line": "    }",
      "lineIdx": 173,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    }",
      "lineIdx": 185,
      "to": 5
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 36
    }
  }, {
    "left": {
      "from": 24,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 38
    },
    "right": {
      "from": 24,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 38
    }
  }, {
    "left": {
      "from": 25,
      "line": "import javafx.application.Application",
      "lineIdx": 13,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "import javafx.application.Application",
      "lineIdx": 13,
      "to": 26
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 15
    },
    "right": {
      "from": 8,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 15
    }
  }, {
    "left": {
      "from": 93,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 94
    },
    "right": {
      "from": 93,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 94
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 22
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"Start\")",
      "lineIdx": 192,
      "to": 22
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 11
    }
  }, {
    "left": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 6
    }
  }, {
    "left": {
      "from": 45,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 46
    }
  }, {
    "left": {
      "from": 36,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 37
    },
    "right": {
      "from": 36,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 37
    }
  }, {
    "left": {
      "from": 33,
      "line": "    val training = nestedTraining.flatten",
      "lineIdx": 82,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    val training = nestedTraining.flatten",
      "lineIdx": 82,
      "to": 34
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 15
    }
  }, {
    "left": {
      "from": 48,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 49
    }
  }, {
    "left": {
      "from": 4,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 8
    },
    "right": {
      "from": 4,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 8
    }
  }, {
    "left": {
      "from": 31,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 47
    },
    "right": {
      "from": 31,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 47
    }
  }, {
    "left": {
      "from": 22,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 40
    },
    "right": {
      "from": 22,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 40
    }
  }, {
    "left": {
      "from": 17,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 176,
      "to": 22
    },
    "right": {
      "from": 17,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 188,
      "to": 22
    }
  }, {
    "left": {
      "from": 34,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 35
    }
  }, {
    "left": {
      "from": 18,
      "line": "  \"show difference\" in {",
      "lineIdx": 213,
      "to": 19
    },
    "right": {
      "from": 18,
      "line": "  \"show difference\" in {",
      "lineIdx": 213,
      "to": 19
    }
  }, {
    "left": {
      "from": 66,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 84
    },
    "right": {
      "from": 66,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 84
    }
  }, {
    "left": {
      "from": 71,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 72
    },
    "right": {
      "from": 71,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 72
    }
  }, {
    "left": {
      "from": 59,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 68
    },
    "right": {
      "from": 59,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 68
    }
  }, {
    "left": {
      "from": 35,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 36
    }
  }, {
    "left": {
      "from": 71,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 72
    },
    "right": {
      "from": 71,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 72
    }
  }, {
    "left": {
      "from": 34,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 36
    },
    "right": {
      "from": 34,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 36
    }
  }, {
    "left": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 27
    }
  }, {
    "left": {
      "from": 43,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 44
    },
    "right": {
      "from": 43,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 44
    }
  }, {
    "left": {
      "from": 25,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 26
    }
  }, {
    "left": {
      "from": 53,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 54
    }
  }, {
    "left": {
      "from": 86,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 87
    },
    "right": {
      "from": 86,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 87
    }
  }, {
    "left": {
      "from": 68,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 69
    },
    "right": {
      "from": 68,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 69
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 15
    }
  }, {
    "left": {
      "from": 56,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 57
    }
  }, {
    "left": {
      "from": 19,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 26
    },
    "right": {
      "from": 19,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 26
    }
  }, {
    "left": {
      "from": 54,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 55
    }
  }, {
    "left": {
      "from": 62,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 63
    },
    "right": {
      "from": 62,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 63
    }
  }, {
    "left": {
      "from": 57,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 65
    },
    "right": {
      "from": 57,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 65
    }
  }, {
    "left": {
      "from": 22,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 165,
      "to": 27
    },
    "right": {
      "from": 22,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 177,
      "to": 27
    }
  }, {
    "left": {
      "from": 30,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 31
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 17
    }
  }, {
    "left": {
      "from": 25,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 30
    },
    "right": {
      "from": 25,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 30
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 16
    }
  }, {
    "left": {
      "from": 50,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 62
    },
    "right": {
      "from": 50,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 62
    }
  }, {
    "left": {
      "from": 14,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 15
    },
    "right": {
      "from": 14,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 15
    }
  }, {
    "left": {
      "from": 43,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 44
    },
    "right": {
      "from": 43,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 44
    }
  }, {
    "left": {
      "from": 34,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 41
    },
    "right": {
      "from": 34,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 41
    }
  }, {
    "left": {
      "from": 10,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 13
    },
    "right": {
      "from": 10,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 13
    }
  }, {
    "left": {
      "from": 21,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 181,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 162,
      "to": 22
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"training fallout: \" + fallout(trainingY, trainingPred).toString)",
      "lineIdx": 111,
      "to": 16
    }
  }, {
    "left": {
      "from": 47,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 50
    },
    "right": {
      "from": 47,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 50
    }
  }, {
    "left": {
      "from": 17,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 20
    },
    "right": {
      "from": 17,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 20
    }
  }, {
    "left": {
      "from": 45,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 46
    }
  }, {
    "left": {
      "from": 34,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 167,
      "to": 48
    },
    "right": {
      "from": 34,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 179,
      "to": 48
    }
  }, {
    "left": {
      "from": 58,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 70
    },
    "right": {
      "from": 58,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 70
    }
  }, {
    "left": {
      "from": 51,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 61
    },
    "right": {
      "from": 51,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 61
    }
  }, {
    "left": {
      "from": 6,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 22
    },
    "right": {
      "from": 6,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 22
    }
  }, {
    "left": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 26
    },
    "right": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 26
    }
  }, {
    "left": {
      "from": 13,
      "line": "import smile.feature.Scaler",
      "lineIdx": 20,
      "to": 20
    },
    "right": {
      "from": 13,
      "line": "import smile.feature.Scaler",
      "lineIdx": 20,
      "to": 20
    }
  }, {
    "left": {
      "from": 0,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 6
    }
  }, {
    "left": {
      "from": 10,
      "line": "import org.log4s.getLogger",
      "lineIdx": 15,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "import org.log4s.getLogger",
      "lineIdx": 15,
      "to": 11
    }
  }, {
    "left": {
      "from": 68,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 69
    },
    "right": {
      "from": 68,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 69
    }
  }, {
    "left": {
      "from": 12,
      "line": "final class PlotData extends FreeSpecLike {",
      "lineIdx": 162,
      "to": 20
    },
    "right": {
      "from": 12,
      "line": "final class PlotData extends FreeSpecLike {",
      "lineIdx": 174,
      "to": 20
    }
  }, {
    "left": {
      "from": 13,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 17
    },
    "right": {
      "from": 13,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 17
    }
  }, {
    "left": {
      "from": 11,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 12
    },
    "right": {
      "from": 11,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 12
    }
  }, {
    "left": {
      "from": 67,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 68
    },
    "right": {
      "from": 67,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 68
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 164,
      "to": 15
    },
    "right": {
      "from": 8,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 176,
      "to": 15
    }
  }, {
    "left": {
      "from": 93,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 94
    },
    "right": {
      "from": 93,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 94
    }
  }, {
    "left": {
      "from": 32,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 33
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 16
    },
    "right": {
      "from": 8,
      "line": "    val expected = new MainWindow()",
      "lineIdx": 127,
      "to": 16
    }
  }, {
    "left": {
      "from": 29,
      "line": "    val matchesSet = matches.toSet",
      "lineIdx": 45,
      "to": 34
    },
    "right": {
      "from": 29,
      "line": "    val matchesSet = matches.toSet",
      "lineIdx": 45,
      "to": 34
    }
  }, {
    "left": {
      "from": 26,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 27
    }
  }, {
    "left": {
      "from": 33,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 40
    },
    "right": {
      "from": 33,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 40
    }
  }, {
    "left": {
      "from": 36,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 40
    },
    "right": {
      "from": 36,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 40
    }
  }, {
    "left": {
      "from": 38,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 39
    }
  }, {
    "left": {
      "from": 22,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 33
    },
    "right": {
      "from": 22,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 33
    }
  }, {
    "left": {
      "from": 50,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "      displayTestCase(testCase, classifier, scaler)",
      "lineIdx": 156,
      "to": 51
    }
  }, {
    "left": {
      "from": 28,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 165,
      "to": 33
    },
    "right": {
      "from": 28,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 177,
      "to": 33
    }
  }, {
    "left": {
      "from": 60,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 61
    },
    "right": {
      "from": 60,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 61
    }
  }, {
    "left": {
      "from": 11,
      "line": "        \"\"))",
      "lineIdx": 155,
      "to": 12
    },
    "right": {
      "from": 11,
      "line": "        \"\"))",
      "lineIdx": 155,
      "to": 12
    }
  }, {
    "left": {
      "from": 33,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 167,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 179,
      "to": 34
    }
  }, {
    "left": {
      "from": 53,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 54
    }
  }, {
    "left": {
      "from": 26,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 45
    },
    "right": {
      "from": 26,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 45
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 11
    },
    "right": {
      "from": 8,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 11
    }
  }, {
    "left": {
      "from": 58,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 59
    },
    "right": {
      "from": 58,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 59
    }
  }, {
    "left": {
      "from": 64,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 70
    },
    "right": {
      "from": 64,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 70
    }
  }, {
    "left": {
      "from": 58,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 59
    },
    "right": {
      "from": 58,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 59
    }
  }, {
    "left": {
      "from": 30,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 34
    },
    "right": {
      "from": 30,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 34
    }
  }, {
    "left": {
      "from": 56,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 62
    },
    "right": {
      "from": 56,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 62
    }
  }, {
    "left": {
      "from": 23,
      "line": "    (classifier, scaler)",
      "lineIdx": 122,
      "to": 24
    },
    "right": {
      "from": 23,
      "line": "    (classifier, scaler)",
      "lineIdx": 122,
      "to": 24
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 14
    },
    "right": {
      "from": 8,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 14
    }
  }, {
    "left": {
      "from": 35,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 36
    }
  }, {
    "left": {
      "from": 15,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 16
    }
  }, {
    "left": {
      "from": 32,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 33
    }
  }, {
    "left": {
      "from": 21,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 22
    }
  }, {
    "left": {
      "from": 20,
      "line": "import org.scalatest.FreeSpecLike",
      "lineIdx": 16,
      "to": 21
    },
    "right": {
      "from": 20,
      "line": "import org.scalatest.FreeSpecLike",
      "lineIdx": 16,
      "to": 21
    }
  }, {
    "left": {
      "from": 67,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 180,
      "to": 68
    },
    "right": {
      "from": 67,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 161,
      "to": 68
    }
  }, {
    "left": {
      "from": 11,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 12
    },
    "right": {
      "from": 11,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 12
    }
  }, {
    "left": {
      "from": 25,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 26
    }
  }, {
    "left": {
      "from": 50,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 51
    }
  }, {
    "left": {
      "from": 63,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 64
    },
    "right": {
      "from": 63,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 64
    }
  }, {
    "left": {
      "from": 22,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 176,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "    Thread.sleep(10000*10000)",
      "lineIdx": 188,
      "to": 23
    }
  }, {
    "left": {
      "from": 16,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 17
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 14
    },
    "right": {
      "from": 8,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 14
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val matchesSet = matches.toSet",
      "lineIdx": 45,
      "to": 18
    },
    "right": {
      "from": 8,
      "line": "    val matchesSet = matches.toSet",
      "lineIdx": 45,
      "to": 18
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 25
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 25
    }
  }, {
    "left": {
      "from": 48,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 49
    }
  }, {
    "left": {
      "from": 22,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 23
    }
  }, {
    "left": {
      "from": 4,
      "line": "    }",
      "lineIdx": 70,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    }",
      "lineIdx": 70,
      "to": 5
    }
  }, {
    "left": {
      "from": 60,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 74
    },
    "right": {
      "from": 60,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 74
    }
  }, {
    "left": {
      "from": 50,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 64
    },
    "right": {
      "from": 50,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 64
    }
  }, {
    "left": {
      "from": 42,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 58
    },
    "right": {
      "from": 42,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 58
    }
  }, {
    "left": {
      "from": 42,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 43
    },
    "right": {
      "from": 42,
      "line": "import com.kristofszilagyi.sedito.aligner.{Aligner, MetricCalculator}",
      "lineIdx": 7,
      "to": 43
    }
  }, {
    "left": {
      "from": 4,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 165,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 177,
      "to": 5
    }
  }, {
    "left": {
      "from": 22,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 30
    },
    "right": {
      "from": 22,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 30
    }
  }, {
    "left": {
      "from": 58,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 59
    },
    "right": {
      "from": 58,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 59
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 15
    },
    "right": {
      "from": 8,
      "line": "    val metrics = MetricCalculator.calcAlignerMetrics(testCase.left, testCase.right)",
      "lineIdx": 42,
      "to": 15
    }
  }, {
    "left": {
      "from": 35,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 36
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 15
    }
  }, {
    "left": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 40
    },
    "right": {
      "from": 34,
      "line": "import com.kristofszilagyi.sedito.common.Warts._",
      "lineIdx": 9,
      "to": 40
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 10
    }
  }, {
    "left": {
      "from": 21,
      "line": "  \"plot data\" ignore {",
      "lineIdx": 163,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "  \"plot data\" ignore {",
      "lineIdx": 175,
      "to": 22
    }
  }, {
    "left": {
      "from": 42,
      "line": "  final class ShowOne extends Application {",
      "lineIdx": 148,
      "to": 43
    },
    "right": {
      "from": 42,
      "line": "  final class ShowOne extends Application {",
      "lineIdx": 148,
      "to": 43
    }
  }, {
    "left": {
      "from": 36,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 37
    },
    "right": {
      "from": 36,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 37
    }
  }, {
    "left": {
      "from": 46,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 47
    }
  }, {
    "left": {
      "from": 55,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 56
    }
  }, {
    "left": {
      "from": 46,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 47
    },
    "right": {
      "from": 46,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 47
    }
  }, {
    "left": {
      "from": 30,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 31
    }
  }, {
    "left": {
      "from": 44,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 48
    },
    "right": {
      "from": 44,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 48
    }
  }, {
    "left": {
      "from": 23,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 24
    },
    "right": {
      "from": 23,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 24
    }
  }, {
    "left": {
      "from": 28,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 35
    },
    "right": {
      "from": 28,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 35
    }
  }, {
    "left": {
      "from": 26,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 30
    },
    "right": {
      "from": 26,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 30
    }
  }, {
    "left": {
      "from": 53,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 54
    }
  }, {
    "left": {
      "from": 37,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 47
    },
    "right": {
      "from": 37,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 47
    }
  }, {
    "left": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 6
    }
  }, {
    "left": {
      "from": 14,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 32
    },
    "right": {
      "from": 14,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 32
    }
  }, {
    "left": {
      "from": 28,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 29
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 7
    }
  }, {
    "left": {
      "from": 10,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 186,
      "to": 17
    },
    "right": {
      "from": 10,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 167,
      "to": 17
    }
  }, {
    "left": {
      "from": 3,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 19
    },
    "right": {
      "from": 3,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 19
    }
  }, {
    "left": {
      "from": 39,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 48
    },
    "right": {
      "from": 39,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 48
    }
  }, {
    "left": {
      "from": 60,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 72
    },
    "right": {
      "from": 60,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 72
    }
  }, {
    "left": {
      "from": 6,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 184,
      "to": 9
    },
    "right": {
      "from": 6,
      "line": "      val singleTestY = singleDataSet.labels()",
      "lineIdx": 165,
      "to": 9
    }
  }, {
    "left": {
      "from": 64,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 65
    },
    "right": {
      "from": 64,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 65
    }
  }, {
    "left": {
      "from": 52,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 60
    },
    "right": {
      "from": 52,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 60
    }
  }, {
    "left": {
      "from": 7,
      "line": "import org.log4s.getLogger",
      "lineIdx": 15,
      "to": 10
    },
    "right": {
      "from": 7,
      "line": "import org.log4s.getLogger",
      "lineIdx": 15,
      "to": 10
    }
  }, {
    "left": {
      "from": 42,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 53
    },
    "right": {
      "from": 42,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 53
    }
  }, {
    "left": {
      "from": 18,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 28
    },
    "right": {
      "from": 18,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 28
    }
  }, {
    "left": {
      "from": 27,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 34
    },
    "right": {
      "from": 27,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 34
    }
  }, {
    "left": {
      "from": 72,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 73
    },
    "right": {
      "from": 72,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 73
    }
  }, {
    "left": {
      "from": 17,
      "line": "    val training = nestedTraining.flatten",
      "lineIdx": 82,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    val training = nestedTraining.flatten",
      "lineIdx": 82,
      "to": 18
    }
  }, {
    "left": {
      "from": 17,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 20
    },
    "right": {
      "from": 17,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 20
    }
  }, {
    "left": {
      "from": 36,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 37
    },
    "right": {
      "from": 36,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 37
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 7
    }
  }, {
    "left": {
      "from": 33,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 34
    }
  }, {
    "left": {
      "from": 33,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "  \"train logistic regression\" in {",
      "lineIdx": 191,
      "to": 34
    }
  }, {
    "left": {
      "from": 17,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 18
    }
  }, {
    "left": {
      "from": 48,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 167,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 179,
      "to": 49
    }
  }, {
    "left": {
      "from": 64,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 74
    },
    "right": {
      "from": 64,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 74
    }
  }, {
    "left": {
      "from": 0,
      "line": "import javafx.stage.Stage",
      "lineIdx": 14,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import javafx.stage.Stage",
      "lineIdx": 14,
      "to": 6
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 23
    },
    "right": {
      "from": 8,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics)",
      "lineIdx": 195,
      "to": 23
    }
  }, {
    "left": {
      "from": 23,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 24
    },
    "right": {
      "from": 23,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 24
    }
  }, {
    "left": {
      "from": 51,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 52
    },
    "right": {
      "from": 51,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 52
    }
  }, {
    "left": {
      "from": 31,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "      case Failure(exception) =>",
      "lineIdx": 34,
      "to": 32
    }
  }, {
    "left": {
      "from": 27,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 44
    },
    "right": {
      "from": 27,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 44
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val actual = new MainWindow()",
      "lineIdx": 133,
      "to": 7
    }
  }, {
    "left": {
      "from": 22,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 186,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 167,
      "to": 23
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 17
    }
  }, {
    "left": {
      "from": 33,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 40
    },
    "right": {
      "from": 33,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 40
    }
  }, {
    "left": {
      "from": 50,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 51
    }
  }, {
    "left": {
      "from": 39,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 53
    },
    "right": {
      "from": 39,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 53
    }
  }, {
    "left": {
      "from": 70,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 71
    },
    "right": {
      "from": 70,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 71
    }
  }, {
    "left": {
      "from": 19,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 26
    },
    "right": {
      "from": 19,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 26
    }
  }, {
    "left": {
      "from": 51,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 56
    },
    "right": {
      "from": 51,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 56
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 11
    }
  }, {
    "left": {
      "from": 152,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 153
    },
    "right": {
      "from": 152,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 153
    }
  }, {
    "left": {
      "from": 41,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 42
    }
  }, {
    "left": {
      "from": 11,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 21
    },
    "right": {
      "from": 11,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 21
    }
  }, {
    "left": {
      "from": 46,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 49
    },
    "right": {
      "from": 46,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 49
    }
  }, {
    "left": {
      "from": 52,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 53
    },
    "right": {
      "from": 52,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 53
    }
  }, {
    "left": {
      "from": 0,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 6
    }
  }, {
    "left": {
      "from": 64,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 65
    },
    "right": {
      "from": 64,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 65
    }
  }, {
    "left": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 10
    },
    "right": {
      "from": 7,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 10
    }
  }, {
    "left": {
      "from": 0,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 6
    }
  }, {
    "left": {
      "from": 77,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 78
    },
    "right": {
      "from": 77,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 78
    }
  }, {
    "left": {
      "from": 118,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 119
    },
    "right": {
      "from": 118,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 119
    }
  }, {
    "left": {
      "from": 21,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 22
    }
  }, {
    "left": {
      "from": 31,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 32
    }
  }, {
    "left": {
      "from": 30,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 31
    }
  }, {
    "left": {
      "from": 31,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 32
    }
  }, {
    "left": {
      "from": 28,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 29
    }
  }, {
    "left": {
      "from": 28,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 29
    }
  }, {
    "left": {
      "from": 35,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "      val classifier = read.xstream(\"linear_regression.model\").asInstanceOf[NeuralNetwork]",
      "lineIdx": 151,
      "to": 36
    }
  }, {
    "left": {
      "from": 20,
      "line": "  \"show difference\" in {",
      "lineIdx": 213,
      "to": 22
    },
    "right": {
      "from": 20,
      "line": "  \"show difference\" in {",
      "lineIdx": 213,
      "to": 22
    }
  }, {
    "left": {
      "from": 18,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 20
    },
    "right": {
      "from": 18,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 20
    }
  }, {
    "left": {
      "from": 32,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 33
    }
  }, {
    "left": {
      "from": 23,
      "line": "  \"show difference\" in {",
      "lineIdx": 213,
      "to": 24
    },
    "right": {
      "from": 23,
      "line": "  \"show difference\" in {",
      "lineIdx": 213,
      "to": 24
    }
  }, {
    "left": {
      "from": 10,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 17
    },
    "right": {
      "from": 10,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 17
    }
  }, {
    "left": {
      "from": 31,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 32
    }
  }, {
    "left": {
      "from": 57,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 58
    },
    "right": {
      "from": 57,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 58
    }
  }, {
    "left": {
      "from": 55,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 64
    },
    "right": {
      "from": 55,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 64
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 15
    }
  }, {
    "left": {
      "from": 40,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 41
    }
  }, {
    "left": {
      "from": 92,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 95
    },
    "right": {
      "from": 92,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 95
    }
  }, {
    "left": {
      "from": 29,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 33
    },
    "right": {
      "from": 29,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 33
    }
  }, {
    "left": {
      "from": 44,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 45
    }
  }, {
    "left": {
      "from": 37,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 42
    },
    "right": {
      "from": 37,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 42
    }
  }, {
    "left": {
      "from": 93,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 108
    },
    "right": {
      "from": 93,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 108
    }
  }, {
    "left": {
      "from": 84,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 99
    },
    "right": {
      "from": 84,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 99
    }
  }, {
    "left": {
      "from": 48,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 49
    }
  }, {
    "left": {
      "from": 10,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 13
    },
    "right": {
      "from": 10,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 13
    }
  }, {
    "left": {
      "from": 28,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "    actual.setTitle(\"Actual\")",
      "lineIdx": 134,
      "to": 29
    }
  }, {
    "left": {
      "from": 101,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 102
    },
    "right": {
      "from": 101,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 102
    }
  }, {
    "left": {
      "from": 12,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 188,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "    }.sortBy(_._2)",
      "lineIdx": 169,
      "to": 13
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 36
    }
  }, {
    "left": {
      "from": 57,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 58
    },
    "right": {
      "from": 57,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 58
    }
  }, {
    "left": {
      "from": 51,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 66
    },
    "right": {
      "from": 51,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 66
    }
  }, {
    "left": {
      "from": 38,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 185,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 166,
      "to": 39
    }
  }, {
    "left": {
      "from": 37,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 46
    },
    "right": {
      "from": 37,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 46
    }
  }, {
    "left": {
      "from": 18,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 19
    },
    "right": {
      "from": 18,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 19
    }
  }, {
    "left": {
      "from": 32,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 33
    }
  }, {
    "left": {
      "from": 27,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 28
    }
  }, {
    "left": {
      "from": 33,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 34
    }
  }, {
    "left": {
      "from": 13,
      "line": "import smile.validation._",
      "lineIdx": 21,
      "to": 23
    },
    "right": {
      "from": 13,
      "line": "import smile.validation._",
      "lineIdx": 21,
      "to": 23
    }
  }, {
    "left": {
      "from": 91,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 94
    },
    "right": {
      "from": 91,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 94
    }
  }, {
    "left": {
      "from": 53,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 54
    }
  }, {
    "left": {
      "from": 36,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 37
    },
    "right": {
      "from": 36,
      "line": "    logger.info(\"training recall: \" + recall(trainingY, trainingPred).toString)",
      "lineIdx": 108,
      "to": 37
    }
  }, {
    "left": {
      "from": 19,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 20
    },
    "right": {
      "from": 19,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 20
    }
  }, {
    "left": {
      "from": 40,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 41
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 11
    }
  }, {
    "left": {
      "from": 34,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 39
    },
    "right": {
      "from": 34,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 39
    }
  }, {
    "left": {
      "from": 48,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 49
    }
  }, {
    "left": {
      "from": 20,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 186,
      "to": 22
    },
    "right": {
      "from": 20,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 167,
      "to": 22
    }
  }, {
    "left": {
      "from": 0,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 6
    }
  }, {
    "left": {
      "from": 32,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 44
    },
    "right": {
      "from": 32,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 44
    }
  }, {
    "left": {
      "from": 37,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 38
    },
    "right": {
      "from": 37,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 38
    }
  }, {
    "left": {
      "from": 64,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 65
    },
    "right": {
      "from": 64,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 65
    }
  }, {
    "left": {
      "from": 13,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 21
    },
    "right": {
      "from": 13,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 21
    }
  }, {
    "left": {
      "from": 60,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 68
    },
    "right": {
      "from": 60,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 68
    }
  }, {
    "left": {
      "from": 55,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 56
    }
  }, {
    "left": {
      "from": 87,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 88
    },
    "right": {
      "from": 87,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 88
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 16
    }
  }, {
    "left": {
      "from": 72,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 78
    },
    "right": {
      "from": 72,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 78
    }
  }, {
    "left": {
      "from": 40,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "    val trainingSet = toAttributeDataSet(training, numOfAttributes)",
      "lineIdx": 91,
      "to": 41
    }
  }, {
    "left": {
      "from": 23,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 30
    },
    "right": {
      "from": 23,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 30
    }
  }, {
    "left": {
      "from": 9,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 14
    },
    "right": {
      "from": 9,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 14
    }
  }, {
    "left": {
      "from": 44,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 182,
      "to": 45
    },
    "right": {
      "from": 44,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 163,
      "to": 45
    }
  }, {
    "left": {
      "from": 2,
      "line": "  }",
      "lineIdx": 215,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  }",
      "lineIdx": 215,
      "to": 3
    }
  }, {
    "left": {
      "from": 11,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 171,
      "to": 12
    },
    "right": {
      "from": 11,
      "line": "    dataSet.asScala.foreach { row =>",
      "lineIdx": 183,
      "to": 12
    }
  }, {
    "left": {
      "from": 76,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 77
    },
    "right": {
      "from": 76,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 77
    }
  }, {
    "left": {
      "from": 24,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 28
    },
    "right": {
      "from": 24,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 28
    }
  }, {
    "left": {
      "from": 49,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 59
    },
    "right": {
      "from": 49,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 59
    }
  }, {
    "left": {
      "from": 14,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 48
    },
    "right": {
      "from": 14,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 48
    }
  }, {
    "left": {
      "from": 40,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 41
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"Training finished\")",
      "lineIdx": 98,
      "to": 15
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 17
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 17
    }
  }, {
    "left": {
      "from": 22,
      "line": "  final class ShowOne extends Application {",
      "lineIdx": 148,
      "to": 29
    },
    "right": {
      "from": 22,
      "line": "  final class ShowOne extends Application {",
      "lineIdx": 148,
      "to": 29
    }
  }, {
    "left": {
      "from": 6,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 185,
      "to": 9
    },
    "right": {
      "from": 6,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 166,
      "to": 9
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 11
    }
  }, {
    "left": {
      "from": 12,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 13
    }
  }, {
    "left": {
      "from": 60,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 67
    },
    "right": {
      "from": 60,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 67
    }
  }, {
    "left": {
      "from": 4,
      "line": "    }",
      "lineIdx": 58,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    }",
      "lineIdx": 58,
      "to": 5
    }
  }, {
    "left": {
      "from": 43,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 58
    },
    "right": {
      "from": 43,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 58
    }
  }, {
    "left": {
      "from": 38,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 39
    }
  }, {
    "left": {
      "from": 52,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 53
    },
    "right": {
      "from": 52,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 53
    }
  }, {
    "left": {
      "from": 36,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 37
    },
    "right": {
      "from": 36,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 37
    }
  }, {
    "left": {
      "from": 49,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 50
    }
  }, {
    "left": {
      "from": 22,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 23
    }
  }, {
    "left": {
      "from": 61,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 62
    },
    "right": {
      "from": 61,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 62
    }
  }, {
    "left": {
      "from": 68,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 69
    },
    "right": {
      "from": 68,
      "line": "    val trainingPred = transformedTrainingSet.map(classifier.predict)",
      "lineIdx": 103,
      "to": 69
    }
  }, {
    "left": {
      "from": 10,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 17
    },
    "right": {
      "from": 10,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 17
    }
  }, {
    "left": {
      "from": 72,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 73
    },
    "right": {
      "from": 72,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 73
    }
  }, {
    "left": {
      "from": 18,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 19
    },
    "right": {
      "from": 18,
      "line": "import scala.util.{Failure, Random, Success}",
      "lineIdx": 25,
      "to": 19
    }
  }, {
    "left": {
      "from": 39,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 40
    },
    "right": {
      "from": 39,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 40
    }
  }, {
    "left": {
      "from": 33,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 34
    }
  }, {
    "left": {
      "from": 75,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 76
    },
    "right": {
      "from": 75,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 76
    }
  }, {
    "left": {
      "from": 10,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 13
    },
    "right": {
      "from": 10,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 13
    }
  }, {
    "left": {
      "from": 67,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 68
    },
    "right": {
      "from": 67,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 68
    }
  }, {
    "left": {
      "from": 27,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 31
    },
    "right": {
      "from": 27,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 31
    }
  }, {
    "left": {
      "from": 31,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 32
    }
  }, {
    "left": {
      "from": 91,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 92
    },
    "right": {
      "from": 91,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 92
    }
  }, {
    "left": {
      "from": 36,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 44
    },
    "right": {
      "from": 36,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 44
    }
  }, {
    "left": {
      "from": 13,
      "line": "import javafx.stage.Stage",
      "lineIdx": 14,
      "to": 14
    },
    "right": {
      "from": 13,
      "line": "import javafx.stage.Stage",
      "lineIdx": 14,
      "to": 14
    }
  }, {
    "left": {
      "from": 45,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 180,
      "to": 60
    },
    "right": {
      "from": 45,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 161,
      "to": 60
    }
  }, {
    "left": {
      "from": 53,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 54
    }
  }, {
    "left": {
      "from": 41,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 42
    }
  }, {
    "left": {
      "from": 75,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 80
    },
    "right": {
      "from": 75,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 80
    }
  }, {
    "left": {
      "from": 2,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 9
    },
    "right": {
      "from": 2,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 9
    }
  }, {
    "left": {
      "from": 15,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 16
    }
  }, {
    "left": {
      "from": 23,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 186,
      "to": 34
    },
    "right": {
      "from": 23,
      "line": "      val f1Score = f1(singleTestY, singlePred)",
      "lineIdx": 167,
      "to": 34
    }
  }, {
    "left": {
      "from": 24,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 183,
      "to": 30
    },
    "right": {
      "from": 24,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 164,
      "to": 30
    }
  }, {
    "left": {
      "from": 0,
      "line": "object PlotData {",
      "lineIdx": 29,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "object PlotData {",
      "lineIdx": 29,
      "to": 6
    }
  }, {
    "left": {
      "from": 14,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 15
    },
    "right": {
      "from": 14,
      "line": "      testDir -> readSingleDataSetAndMeasureMetrics(testDir)",
      "lineIdx": 60,
      "to": 15
    }
  }, {
    "left": {
      "from": 62,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 70
    },
    "right": {
      "from": 62,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 70
    }
  }, {
    "left": {
      "from": 2,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 9
    },
    "right": {
      "from": 2,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 9
    }
  }, {
    "left": {
      "from": 62,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 70
    },
    "right": {
      "from": 62,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 70
    }
  }, {
    "left": {
      "from": 40,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 41
    }
  }, {
    "left": {
      "from": 24,
      "line": "import smile.validation._",
      "lineIdx": 21,
      "to": 25
    },
    "right": {
      "from": 24,
      "line": "import smile.validation._",
      "lineIdx": 21,
      "to": 25
    }
  }, {
    "left": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 33
    },
    "right": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 33
    }
  }, {
    "left": {
      "from": 58,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 59
    },
    "right": {
      "from": 58,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 59
    }
  }, {
    "left": {
      "from": 31,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "      new NumericAttribute(name.toString)",
      "lineIdx": 69,
      "to": 32
    }
  }, {
    "left": {
      "from": 33,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 34
    }
  }, {
    "left": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 33
    },
    "right": {
      "from": 27,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 33
    }
  }, {
    "left": {
      "from": 23,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 26
    },
    "right": {
      "from": 23,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 26
    }
  }, {
    "left": {
      "from": 24,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 25
    },
    "right": {
      "from": 24,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 25
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 16
    }
  }, {
    "left": {
      "from": 105,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 106
    },
    "right": {
      "from": 105,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 106
    }
  }, {
    "left": {
      "from": 0,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 6
    }
  }, {
    "left": {
      "from": 83,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 93
    },
    "right": {
      "from": 83,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 93
    }
  }, {
    "left": {
      "from": 9,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 13
    },
    "right": {
      "from": 9,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 13
    }
  }, {
    "left": {
      "from": 32,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 36
    },
    "right": {
      "from": 32,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 36
    }
  }, {
    "left": {
      "from": 7,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 11
    },
    "right": {
      "from": 7,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 11
    }
  }, {
    "left": {
      "from": 33,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 34
    }
  }, {
    "left": {
      "from": 35,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 36
    }
  }, {
    "left": {
      "from": 53,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 54
    },
    "right": {
      "from": 53,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 54
    }
  }, {
    "left": {
      "from": 17,
      "line": "import org.log4s.getLogger",
      "lineIdx": 15,
      "to": 26
    },
    "right": {
      "from": 17,
      "line": "import org.log4s.getLogger",
      "lineIdx": 15,
      "to": 26
    }
  }, {
    "left": {
      "from": 0,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 6
    },
    "right": {
      "from": 0,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 6
    }
  }, {
    "left": {
      "from": 105,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 106
    },
    "right": {
      "from": 105,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 106
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 10
    }
  }, {
    "left": {
      "from": 21,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 165,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "    @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 177,
      "to": 22
    }
  }, {
    "left": {
      "from": 30,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 183,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "      val singleTestX = scaler.transform(singleDataSet.x())",
      "lineIdx": 164,
      "to": 31
    }
  }, {
    "left": {
      "from": 12,
      "line": "import smile.validation._",
      "lineIdx": 21,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "import smile.validation._",
      "lineIdx": 21,
      "to": 13
    }
  }, {
    "left": {
      "from": 54,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 60
    },
    "right": {
      "from": 54,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 60
    }
  }, {
    "left": {
      "from": 21,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 167,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 179,
      "to": 22
    }
  }, {
    "left": {
      "from": 31,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 49
    },
    "right": {
      "from": 31,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 49
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 7
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 21
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 21
    }
  }, {
    "left": {
      "from": 30,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 38
    },
    "right": {
      "from": 30,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 38
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 15
    }
  }, {
    "left": {
      "from": 27,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 28
    }
  }, {
    "left": {
      "from": 24,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 25
    },
    "right": {
      "from": 24,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 25
    }
  }, {
    "left": {
      "from": 20,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 21
    },
    "right": {
      "from": 20,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 21
    }
  }, {
    "left": {
      "from": 23,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 24
    },
    "right": {
      "from": 23,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 24
    }
  }, {
    "left": {
      "from": 29,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 30
    }
  }, {
    "left": {
      "from": 22,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "    expected.setTitle(\"Excpected\")",
      "lineIdx": 128,
      "to": 23
    }
  }, {
    "left": {
      "from": 59,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 66
    },
    "right": {
      "from": 59,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 66
    }
  }, {
    "left": {
      "from": 31,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 172,
      "to": 40
    },
    "right": {
      "from": 31,
      "line": "      scaledDataSet.add(scaler.transform(row.x), row.y)",
      "lineIdx": 184,
      "to": 40
    }
  }, {
    "left": {
      "from": 38,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 39
    }
  }, {
    "left": {
      "from": 74,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 78
    },
    "right": {
      "from": 74,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 78
    }
  }, {
    "left": {
      "from": 22,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 33
    },
    "right": {
      "from": 22,
      "line": "    logger.info(\"test specificity: \" + specificity(testY, testPred).toString)",
      "lineIdx": 118,
      "to": 33
    }
  }, {
    "left": {
      "from": 6,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 9
    },
    "right": {
      "from": 6,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 9
    }
  }, {
    "left": {
      "from": 56,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 57
    }
  }, {
    "left": {
      "from": 67,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 81
    },
    "right": {
      "from": 67,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 81
    }
  }, {
    "left": {
      "from": 62,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 76
    },
    "right": {
      "from": 62,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 76
    }
  }, {
    "left": {
      "from": 15,
      "line": "import java.awt.Color",
      "lineIdx": 2,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "import java.awt.Color",
      "lineIdx": 2,
      "to": 16
    }
  }, {
    "left": {
      "from": 12,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 13
    },
    "right": {
      "from": 12,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 13
    }
  }, {
    "left": {
      "from": 34,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 40
    },
    "right": {
      "from": 34,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 40
    }
  }, {
    "left": {
      "from": 67,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 75
    },
    "right": {
      "from": 67,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 75
    }
  }, {
    "left": {
      "from": 18,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 20
    },
    "right": {
      "from": 18,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 20
    }
  }, {
    "left": {
      "from": 21,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 23
    },
    "right": {
      "from": 21,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 23
    }
  }, {
    "left": {
      "from": 16,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 181,
      "to": 20
    },
    "right": {
      "from": 16,
      "line": "    files.map { case (path, singleTest) =>",
      "lineIdx": 162,
      "to": 20
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"training specificity: \" + specificity(trainingY, trainingPred).toString)",
      "lineIdx": 110,
      "to": 10
    }
  }, {
    "left": {
      "from": 40,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 62
    },
    "right": {
      "from": 40,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 62
    }
  }, {
    "left": {
      "from": 22,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 23
    }
  }, {
    "left": {
      "from": 66,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 67
    },
    "right": {
      "from": 66,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 67
    }
  }, {
    "left": {
      "from": 25,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 26
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val testCase = readTestCase(testDir)",
      "lineIdx": 41,
      "to": 7
    }
  }, {
    "left": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 26
    },
    "right": {
      "from": 11,
      "line": "import com.kristofszilagyi.sedito.aligner.MetricCalculator.Metrics",
      "lineIdx": 6,
      "to": 26
    }
  }, {
    "left": {
      "from": 29,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 30
    }
  }, {
    "left": {
      "from": 21,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "    metrics.map { m =>",
      "lineIdx": 48,
      "to": 22
    }
  }, {
    "left": {
      "from": 46,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 51
    },
    "right": {
      "from": 46,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 51
    }
  }, {
    "left": {
      "from": 72,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 73
    },
    "right": {
      "from": 72,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 73
    }
  }, {
    "left": {
      "from": 24,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 30
    },
    "right": {
      "from": 24,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 30
    }
  }, {
    "left": {
      "from": 49,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 56
    },
    "right": {
      "from": 49,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 56
    }
  }, {
    "left": {
      "from": 8,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 15
    },
    "right": {
      "from": 8,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 15
    }
  }, {
    "left": {
      "from": 61,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 62
    },
    "right": {
      "from": 61,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 62
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val attributes = (0 until numOfAttributes).map { name =>",
      "lineIdx": 68,
      "to": 7
    }
  }, {
    "left": {
      "from": 18,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 19
    },
    "right": {
      "from": 18,
      "line": "        println(s\"$testDir -> ${exception.getMessage}\")",
      "lineIdx": 35,
      "to": 19
    }
  }, {
    "left": {
      "from": 17,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    val nonEmpty = metrics.find(_._2.nonEmpty).get",
      "lineIdx": 140,
      "to": 18
    }
  }, {
    "left": {
      "from": 40,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 41
    }
  }, {
    "left": {
      "from": 30,
      "line": "  final class ShowOne extends Application {",
      "lineIdx": 148,
      "to": 41
    },
    "right": {
      "from": 30,
      "line": "  final class ShowOne extends Application {",
      "lineIdx": 148,
      "to": 41
    }
  }, {
    "left": {
      "from": 38,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "      nestedTest = nestedTest.map(_._2), numOfAttributes)",
      "lineIdx": 198,
      "to": 39
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 15
    }
  }, {
    "left": {
      "from": 31,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 35
    },
    "right": {
      "from": 31,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 35
    }
  }, {
    "left": {
      "from": 2,
      "line": "  }",
      "lineIdx": 158,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  }",
      "lineIdx": 158,
      "to": 3
    }
  }, {
    "left": {
      "from": 4,
      "line": "    }",
      "lineIdx": 61,
      "to": 5
    },
    "right": {
      "from": 4,
      "line": "    }",
      "lineIdx": 61,
      "to": 5
    }
  }, {
    "left": {
      "from": 89,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 90
    },
    "right": {
      "from": 89,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 90
    }
  }, {
    "left": {
      "from": 75,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 90
    },
    "right": {
      "from": 75,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 90
    }
  }, {
    "left": {
      "from": 51,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 52
    },
    "right": {
      "from": 51,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 52
    }
  }, {
    "left": {
      "from": 66,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 67
    },
    "right": {
      "from": 66,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 67
    }
  }, {
    "left": {
      "from": 10,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 13
    },
    "right": {
      "from": 10,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 13
    }
  }, {
    "left": {
      "from": 18,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 36
    },
    "right": {
      "from": 18,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 36
    }
  }, {
    "left": {
      "from": 38,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 39
    },
    "right": {
      "from": 38,
      "line": "    Application.launch(classOf[ShowOne])",
      "lineIdx": 214,
      "to": 39
    }
  }, {
    "left": {
      "from": 74,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 75
    },
    "right": {
      "from": 74,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 75
    }
  }, {
    "left": {
      "from": 14,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 27
    },
    "right": {
      "from": 14,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 27
    }
  }, {
    "left": {
      "from": 6,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 9
    },
    "right": {
      "from": 6,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 9
    }
  }, {
    "left": {
      "from": 6,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 10
    },
    "right": {
      "from": 6,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 10
    }
  }, {
    "left": {
      "from": 30,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 31
    }
  }, {
    "left": {
      "from": 8,
      "line": "        sys.exit(1)",
      "lineIdx": 36,
      "to": 11
    },
    "right": {
      "from": 8,
      "line": "        sys.exit(1)",
      "lineIdx": 36,
      "to": 11
    }
  }, {
    "left": {
      "from": 22,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 29
    },
    "right": {
      "from": 22,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 29
    }
  }, {
    "left": {
      "from": 26,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "    val matches = testCase.wordAlignment.matches.toSeq",
      "lineIdx": 44,
      "to": 27
    }
  }, {
    "left": {
      "from": 65,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 66
    },
    "right": {
      "from": 65,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 66
    }
  }, {
    "left": {
      "from": 10,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 16
    },
    "right": {
      "from": 10,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 16
    }
  }, {
    "left": {
      "from": 43,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 44
    },
    "right": {
      "from": 43,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 44
    }
  }, {
    "left": {
      "from": 27,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 28
    }
  }, {
    "left": {
      "from": 6,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 182,
      "to": 9
    },
    "right": {
      "from": 6,
      "line": "      val singleDataSet = toAttributeDataSet(singleTest, numOfAttributes)",
      "lineIdx": 163,
      "to": 9
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(s\"Test size: ${test.size}\")",
      "lineIdx": 85,
      "to": 10
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 25
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"training fdr: \" + fdr(trainingY, trainingPred).toString)",
      "lineIdx": 112,
      "to": 25
    }
  }, {
    "left": {
      "from": 61,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 63
    },
    "right": {
      "from": 61,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 63
    }
  }, {
    "left": {
      "from": 40,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 41
    }
  }, {
    "left": {
      "from": 59,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 60
    },
    "right": {
      "from": 59,
      "line": "import com.kristofszilagyi.sedito.common.TypeSafeEqualsOps._",
      "lineIdx": 8,
      "to": 60
    }
  }, {
    "left": {
      "from": 25,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 26
    }
  }, {
    "left": {
      "from": 97,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 98
    },
    "right": {
      "from": 97,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 98
    }
  }, {
    "left": {
      "from": 49,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 167,
      "to": 50
    },
    "right": {
      "from": 49,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 179,
      "to": 50
    }
  }, {
    "left": {
      "from": 26,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 34
    },
    "right": {
      "from": 26,
      "line": "    logger.info(\"Starting training\")",
      "lineIdx": 96,
      "to": 34
    }
  }, {
    "left": {
      "from": 31,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    val testY = testSet.labels()",
      "lineIdx": 102,
      "to": 32
    }
  }, {
    "left": {
      "from": 70,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 71
    },
    "right": {
      "from": 70,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 71
    }
  }, {
    "left": {
      "from": 24,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 32
    },
    "right": {
      "from": 24,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 32
    }
  }, {
    "left": {
      "from": 16,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 194,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    val metrics = readDataSetAndMeasureMetrics()",
      "lineIdx": 194,
      "to": 17
    }
  }, {
    "left": {
      "from": 50,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 51
    }
  }, {
    "left": {
      "from": 50,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 58
    },
    "right": {
      "from": 50,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 58
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 9
    },
    "right": {
      "from": 8,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 9
    }
  }, {
    "left": {
      "from": 70,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 166,
      "to": 71
    },
    "right": {
      "from": 70,
      "line": "    val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 178,
      "to": 71
    }
  }, {
    "left": {
      "from": 23,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 24
    },
    "right": {
      "from": 23,
      "line": "import scala.collection.JavaConverters._",
      "lineIdx": 24,
      "to": 24
    }
  }, {
    "left": {
      "from": 19,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 27
    },
    "right": {
      "from": 19,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 27
    }
  }, {
    "left": {
      "from": 19,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 24
    },
    "right": {
      "from": 19,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 24
    }
  }, {
    "left": {
      "from": 30,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 31
    },
    "right": {
      "from": 30,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 31
    }
  }, {
    "left": {
      "from": 7,
      "line": "import javafx.stage.Stage",
      "lineIdx": 14,
      "to": 13
    },
    "right": {
      "from": 7,
      "line": "import javafx.stage.Stage",
      "lineIdx": 14,
      "to": 13
    }
  }, {
    "left": {
      "from": 5,
      "line": "    (classifier, scaler)",
      "lineIdx": 122,
      "to": 15
    },
    "right": {
      "from": 5,
      "line": "    (classifier, scaler)",
      "lineIdx": 122,
      "to": 15
    }
  }, {
    "left": {
      "from": 6,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 9
    },
    "right": {
      "from": 6,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 9
    }
  }, {
    "left": {
      "from": 26,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 28
    },
    "right": {
      "from": 26,
      "line": "    logger.info(\"training f1: \" + f1(trainingY, trainingPred).toString)",
      "lineIdx": 113,
      "to": 28
    }
  }, {
    "left": {
      "from": 51,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 52
    },
    "right": {
      "from": 51,
      "line": "    actual.setContent(testCase.left, testCase.right, calculatedAlignment)",
      "lineIdx": 135,
      "to": 52
    }
  }, {
    "left": {
      "from": 64,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 65
    },
    "right": {
      "from": 64,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 65
    }
  }, {
    "left": {
      "from": 112,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 113
    },
    "right": {
      "from": 112,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 113
    }
  }, {
    "left": {
      "from": 63,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 64
    },
    "right": {
      "from": 63,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 64
    }
  }, {
    "left": {
      "from": 17,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "import smile.data.{AttributeDataset, NominalAttribute, NumericAttribute}",
      "lineIdx": 19,
      "to": 18
    }
  }, {
    "left": {
      "from": 37,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 38
    },
    "right": {
      "from": 37,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 38
    }
  }, {
    "left": {
      "from": 31,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 38
    },
    "right": {
      "from": 31,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 38
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 15
    }
  }, {
    "left": {
      "from": 36,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 44
    },
    "right": {
      "from": 36,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 44
    }
  }, {
    "left": {
      "from": 50,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 60
    },
    "right": {
      "from": 50,
      "line": "    val trainingF1s = f1s(nestedTraining, scaler, classifier, numOfAttributes)",
      "lineIdx": 200,
      "to": 60
    }
  }, {
    "left": {
      "from": 65,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 66
    },
    "right": {
      "from": 65,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 66
    }
  }, {
    "left": {
      "from": 119,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 132
    },
    "right": {
      "from": 119,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 132
    }
  }, {
    "left": {
      "from": 40,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 47
    },
    "right": {
      "from": 40,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 47
    }
  }, {
    "left": {
      "from": 2,
      "line": "  }",
      "lineIdx": 144,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  }",
      "lineIdx": 144,
      "to": 3
    }
  }, {
    "left": {
      "from": 73,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 74
    },
    "right": {
      "from": 73,
      "line": "    logger.info(\"training accuracy: \" + accuracy(trainingY, trainingPred).toString)",
      "lineIdx": 107,
      "to": 74
    }
  }, {
    "left": {
      "from": 73,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 74
    },
    "right": {
      "from": 73,
      "line": "      assert(numOfAttributes ==== doubles.length, s\"$numOfAttributes != ${doubles.length}\")",
      "lineIdx": 74,
      "to": 74
    }
  }, {
    "left": {
      "from": 34,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 40
    },
    "right": {
      "from": 34,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 40
    }
  }, {
    "left": {
      "from": 51,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 60
    },
    "right": {
      "from": 51,
      "line": "      val potentialMatch = WordMatch(m.leftWord, m.rightWord)",
      "lineIdx": 49,
      "to": 60
    }
  }, {
    "left": {
      "from": 22,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 23
    },
    "right": {
      "from": 22,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 23
    }
  }, {
    "left": {
      "from": 103,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 104
    },
    "right": {
      "from": 103,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 104
    }
  }, {
    "left": {
      "from": 21,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 27
    },
    "right": {
      "from": 21,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 27
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 32
    },
    "right": {
      "from": 8,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 32
    }
  }, {
    "left": {
      "from": 107,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 108
    },
    "right": {
      "from": 107,
      "line": "  private def displayTestCase(testCase: TestCase, classifier: SoftClassifier[Array[Double]], scaler: Scaler) = {",
      "lineIdx": 125,
      "to": 108
    }
  }, {
    "left": {
      "from": 76,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 77
    },
    "right": {
      "from": 76,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 77
    }
  }, {
    "left": {
      "from": 50,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 59
    },
    "right": {
      "from": 50,
      "line": "    val testDirs = using(Files.newDirectoryStream(parentDir)) { stream =>",
      "lineIdx": 56,
      "to": 59
    }
  }, {
    "left": {
      "from": 70,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 77
    },
    "right": {
      "from": 70,
      "line": "    val attributeDataset = new AttributeDataset(\"matches\", attributes.toArray, new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 71,
      "to": 77
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"Training f1s: \\n\" + trainingF1s.mkString(\"\\n\"))",
      "lineIdx": 202,
      "to": 16
    }
  }, {
    "left": {
      "from": 18,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 19
    },
    "right": {
      "from": 18,
      "line": "      case Success(testCase) => testCase",
      "lineIdx": 37,
      "to": 19
    }
  }, {
    "left": {
      "from": 22,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 25
    },
    "right": {
      "from": 22,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 25
    }
  }, {
    "left": {
      "from": 47,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 48
    },
    "right": {
      "from": 47,
      "line": "import com.kristofszilagyi.sedito.gui.PlotData._",
      "lineIdx": 12,
      "to": 48
    }
  }, {
    "left": {
      "from": 40,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 41
    }
  }, {
    "left": {
      "from": 43,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 54
    },
    "right": {
      "from": 43,
      "line": "    logger.info(\"training sensitivity: \" + sensitivity(trainingY, trainingPred).toString)",
      "lineIdx": 109,
      "to": 54
    }
  }, {
    "left": {
      "from": 79,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 82
    },
    "right": {
      "from": 79,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 82
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 18
    }
  }, {
    "left": {
      "from": 91,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 100
    },
    "right": {
      "from": 91,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 100
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 21
    },
    "right": {
      "from": 17,
      "line": "    logger.info(\"test f1: \" + f1(testY, testPred).toString)",
      "lineIdx": 121,
      "to": 21
    }
  }, {
    "left": {
      "from": 41,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 42
    }
  }, {
    "left": {
      "from": 33,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 34
    },
    "right": {
      "from": 33,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 34
    }
  }, {
    "left": {
      "from": 43,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 47
    },
    "right": {
      "from": 43,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 47
    }
  }, {
    "left": {
      "from": 39,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 40
    },
    "right": {
      "from": 39,
      "line": "    val transformedTrainingSet = scaler.transform(trainingSet.x())",
      "lineIdx": 94,
      "to": 40
    }
  }, {
    "left": {
      "from": 35,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    discard(assert(matches.size ==== matchesSet.size))",
      "lineIdx": 46,
      "to": 36
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 7
    }
  }, {
    "left": {
      "from": 80,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 86
    },
    "right": {
      "from": 80,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 86
    }
  }, {
    "left": {
      "from": 21,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 22
    },
    "right": {
      "from": 21,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 22
    }
  }, {
    "left": {
      "from": 41,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 49
    },
    "right": {
      "from": 41,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 49
    }
  }, {
    "left": {
      "from": 55,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 56
    },
    "right": {
      "from": 55,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 56
    }
  }, {
    "left": {
      "from": 45,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 50
    },
    "right": {
      "from": 45,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 50
    }
  }, {
    "left": {
      "from": 17,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 18
    }
  }, {
    "left": {
      "from": 65,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 66
    },
    "right": {
      "from": 65,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 66
    }
  }, {
    "left": {
      "from": 101,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 102
    },
    "right": {
      "from": 101,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 102
    }
  }, {
    "left": {
      "from": 64,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 65
    },
    "right": {
      "from": 64,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 65
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 11
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 10
    }
  }, {
    "left": {
      "from": 48,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    @SuppressWarnings(Array(Warts.OptionPartial))",
      "lineIdx": 139,
      "to": 49
    }
  }, {
    "left": {
      "from": 24,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 170,
      "to": 27
    },
    "right": {
      "from": 24,
      "line": "    val scaledDataSet = new AttributeDataset(\"something\", dataSet.attributes(), new NominalAttribute(\"doesMatch\"))",
      "lineIdx": 182,
      "to": 27
    }
  }, {
    "left": {
      "from": 29,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "      val doubles = m.metrics.toLdLenSimDouble",
      "lineIdx": 73,
      "to": 30
    }
  }, {
    "left": {
      "from": 37,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 38
    },
    "right": {
      "from": 37,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 38
    }
  }, {
    "left": {
      "from": 42,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 43
    },
    "right": {
      "from": 42,
      "line": "    val testX = scaler.transform(testSet.x())",
      "lineIdx": 101,
      "to": 43
    }
  }, {
    "left": {
      "from": 0,
      "line": "final class PlotData extends FreeSpecLike {",
      "lineIdx": 162,
      "to": 5
    },
    "right": {
      "from": 0,
      "line": "final class PlotData extends FreeSpecLike {",
      "lineIdx": 174,
      "to": 5
    }
  }, {
    "left": {
      "from": 25,
      "line": "    val test = nestedTest.flatten",
      "lineIdx": 83,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "    val test = nestedTest.flatten",
      "lineIdx": 83,
      "to": 26
    }
  }, {
    "left": {
      "from": 41,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 42
    },
    "right": {
      "from": 41,
      "line": "    val duration = Duration.between(start, Instant.now())",
      "lineIdx": 209,
      "to": 42
    }
  }, {
    "left": {
      "from": 35,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 42
    },
    "right": {
      "from": 35,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 42
    }
  }, {
    "left": {
      "from": 12,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 15
    },
    "right": {
      "from": 12,
      "line": "import java.nio.file.{Files, Path, Paths}",
      "lineIdx": 3,
      "to": 15
    }
  }, {
    "left": {
      "from": 23,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 24
    },
    "right": {
      "from": 23,
      "line": "    val start = Instant.now()",
      "lineIdx": 193,
      "to": 24
    }
  }, {
    "left": {
      "from": 31,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 48
    },
    "right": {
      "from": 31,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 48
    }
  }, {
    "left": {
      "from": 18,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 23
    },
    "right": {
      "from": 18,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 23
    }
  }, {
    "left": {
      "from": 84,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 85
    },
    "right": {
      "from": 84,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 85
    }
  }, {
    "left": {
      "from": 27,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    val (classifier, scaler) = generateClassifier(nestedTraining = nestedTraining.map(_._2),",
      "lineIdx": 197,
      "to": 28
    }
  }, {
    "left": {
      "from": 73,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 79
    },
    "right": {
      "from": 73,
      "line": "      val scaler = read.xstream(\"linear_regression.scaler\").asInstanceOf[Scaler]",
      "lineIdx": 152,
      "to": 79
    }
  }, {
    "left": {
      "from": 51,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 52
    },
    "right": {
      "from": 51,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 52
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val matchesSet = matches.toSet",
      "lineIdx": 45,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val matchesSet = matches.toSet",
      "lineIdx": 45,
      "to": 7
    }
  }, {
    "left": {
      "from": 4,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 10
    },
    "right": {
      "from": 4,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 10
    }
  }, {
    "left": {
      "from": 48,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 49
    }
  }, {
    "left": {
      "from": 74,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 75
    },
    "right": {
      "from": 74,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 75
    }
  }, {
    "left": {
      "from": 11,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 15
    },
    "right": {
      "from": 11,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 15
    }
  }, {
    "left": {
      "from": 153,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 169
    },
    "right": {
      "from": 153,
      "line": "    val classifier = classification.mlp(transformedTrainingSet, trainingY, Array(numOfAttributes, 5, 1), ErrorFunction.CROSS_ENTROPY, ActivationFunction.LOGISTIC_SIGMOID)",
      "lineIdx": 97,
      "to": 169
    }
  }, {
    "left": {
      "from": 26,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "    write.xstream(scaler, \"linear_regression.scaler\")",
      "lineIdx": 208,
      "to": 27
    }
  }, {
    "left": {
      "from": 16,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    logger.info(s\"0s in training: ${training.count(_.matching ==== false)}\")",
      "lineIdx": 87,
      "to": 17
    }
  }, {
    "left": {
      "from": 69,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 180,
      "to": 70
    },
    "right": {
      "from": 69,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 161,
      "to": 70
    }
  }, {
    "left": {
      "from": 57,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 58
    },
    "right": {
      "from": 57,
      "line": "import com.kristofszilagyi.sedito.common.{TestCase, Warts, WordMatch}",
      "lineIdx": 11,
      "to": 58
    }
  }, {
    "left": {
      "from": 16,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 17
    }
  }, {
    "left": {
      "from": 31,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    logger.info(\"Test f1s: \\n\" + testf1s.mkString(\"\\n\"))",
      "lineIdx": 206,
      "to": 32
    }
  }, {
    "left": {
      "from": 55,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 79
    },
    "right": {
      "from": 55,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 79
    }
  }, {
    "left": {
      "from": 16,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 17
    },
    "right": {
      "from": 16,
      "line": "        \"scala-2.12/test-classes/algorithm_tests/full_tests/test_model_py2\" +",
      "lineIdx": 154,
      "to": 17
    }
  }, {
    "left": {
      "from": 48,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    logger.info(s\"Training size: ${training.size}\")",
      "lineIdx": 84,
      "to": 49
    }
  }, {
    "left": {
      "from": 31,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "  @SuppressWarnings(Array(Warts.AsInstanceOf))",
      "lineIdx": 147,
      "to": 32
    }
  }, {
    "left": {
      "from": 12,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 19
    },
    "right": {
      "from": 12,
      "line": "    metrics.foreach { m =>",
      "lineIdx": 72,
      "to": 19
    }
  }, {
    "left": {
      "from": 85,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 86
    },
    "right": {
      "from": 85,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 86
    }
  }, {
    "left": {
      "from": 17,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 18
    },
    "right": {
      "from": 17,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 18
    }
  }, {
    "left": {
      "from": 18,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 26
    },
    "right": {
      "from": 18,
      "line": "import java.time.{Duration, Instant}",
      "lineIdx": 4,
      "to": 26
    }
  }, {
    "left": {
      "from": 80,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 169,
      "to": 81
    },
    "right": {
      "from": 80,
      "line": "    val dataSet = toAttributeDataSet(Random.shuffle(metrics.flatMap(_._2)).toSet.take(1000), numOfAttributes)",
      "lineIdx": 181,
      "to": 81
    }
  }, {
    "left": {
      "from": 4,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 7
    },
    "right": {
      "from": 4,
      "line": "    val unambiguousWordAlignment = testCase.wordAlignment.toUnambigous",
      "lineIdx": 129,
      "to": 7
    }
  }, {
    "left": {
      "from": 0,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 5
    },
    "right": {
      "from": 0,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 5
    }
  }, {
    "left": {
      "from": 18,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 36
    },
    "right": {
      "from": 18,
      "line": "    val testSet = toAttributeDataSet(test, numOfAttributes)",
      "lineIdx": 100,
      "to": 36
    }
  }, {
    "left": {
      "from": 49,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 179,
      "to": 67
    },
    "right": {
      "from": 49,
      "line": "  private def f1s(files:  List[(Path, IndexedSeq[MetricsWithResults])], scaler: Scaler,",
      "lineIdx": 160,
      "to": 67
    }
  }, {
    "left": {
      "from": 33,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 40
    },
    "right": {
      "from": 33,
      "line": "  private def toAttributeDataSet(metrics: Traversable[MetricsWithResults], numOfAttributes: Int) = {",
      "lineIdx": 67,
      "to": 40
    }
  }, {
    "left": {
      "from": 39,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 185,
      "to": 49
    },
    "right": {
      "from": 39,
      "line": "      val singlePred = singleTestX.map(classifier.predict)",
      "lineIdx": 166,
      "to": 49
    }
  }, {
    "left": {
      "from": 68,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 72
    },
    "right": {
      "from": 68,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 72
    }
  }, {
    "left": {
      "from": 79,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 80
    },
    "right": {
      "from": 79,
      "line": "    expected.setContent(testCase.left, testCase.right, unambiguousWordAlignment)",
      "lineIdx": 132,
      "to": 80
    }
  }, {
    "left": {
      "from": 32,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 33
    },
    "right": {
      "from": 32,
      "line": "    val scaler = new Scaler(true)",
      "lineIdx": 92,
      "to": 33
    }
  }, {
    "left": {
      "from": 8,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 168,
      "to": 23
    },
    "right": {
      "from": 8,
      "line": "    val numOfAttributes = calcNumOfAttributes(metrics) //this might fail, todo map flatten set",
      "lineIdx": 180,
      "to": 23
    }
  }, {
    "left": {
      "from": 81,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 82
    },
    "right": {
      "from": 81,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 82
    }
  }, {
    "left": {
      "from": 50,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "    logger.info(\"test sensitivity: \" + sensitivity(testY, testPred).toString)",
      "lineIdx": 117,
      "to": 51
    }
  }, {
    "left": {
      "from": 27,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 28
    },
    "right": {
      "from": 27,
      "line": "    def start(stage: Stage): Unit = {",
      "lineIdx": 149,
      "to": 28
    }
  }, {
    "left": {
      "from": 10,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    scaler.learn(trainingSet.attributes(), trainingSet.x())",
      "lineIdx": 93,
      "to": 11
    }
  }, {
    "left": {
      "from": 22,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 27
    },
    "right": {
      "from": 22,
      "line": "    @SuppressWarnings(Array(Warts.TraversableOps))",
      "lineIdx": 141,
      "to": 27
    }
  }, {
    "left": {
      "from": 6,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 12
    },
    "right": {
      "from": 6,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 12
    }
  }, {
    "left": {
      "from": 43,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 61
    },
    "right": {
      "from": 43,
      "line": "import smile.classification.NeuralNetwork.{ActivationFunction, ErrorFunction}",
      "lineIdx": 17,
      "to": 61
    }
  }, {
    "left": {
      "from": 48,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 51
    },
    "right": {
      "from": 48,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 51
    }
  }, {
    "left": {
      "from": 31,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 32
    },
    "right": {
      "from": 31,
      "line": "    logger.info(s\"1s in test: ${test.count(_.matching)}\")",
      "lineIdx": 88,
      "to": 32
    }
  }, {
    "left": {
      "from": 56,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 57
    },
    "right": {
      "from": 56,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 57
    }
  }, {
    "left": {
      "from": 2,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 9
    },
    "right": {
      "from": 2,
      "line": "  private def calcNumOfAttributes(metrics: List[(Path, IndexedSeq[MetricsWithResults])]) = {",
      "lineIdx": 138,
      "to": 9
    }
  }, {
    "left": {
      "from": 26,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 27
    },
    "right": {
      "from": 26,
      "line": "      attributeDataset.add(new attributeDataset.Row(doubles, if (m.matching) 1.0 else 0.0))",
      "lineIdx": 75,
      "to": 27
    }
  }, {
    "left": {
      "from": 48,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "  private def readSingleDataSetAndMeasureMetrics(testDir: Path) = {",
      "lineIdx": 40,
      "to": 49
    }
  }, {
    "left": {
      "from": 29,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 30
    },
    "right": {
      "from": 29,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 30
    }
  }, {
    "left": {
      "from": 54,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 55
    },
    "right": {
      "from": 54,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 55
    }
  }, {
    "left": {
      "from": 28,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 180,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 161,
      "to": 29
    }
  }, {
    "left": {
      "from": 18,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 26
    },
    "right": {
      "from": 18,
      "line": "    val metrics = testDirs.par.map{ testDir =>",
      "lineIdx": 59,
      "to": 26
    }
  }, {
    "left": {
      "from": 39,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 40
    },
    "right": {
      "from": 39,
      "line": "    val trainingY = trainingSet.labels()",
      "lineIdx": 95,
      "to": 40
    }
  }, {
    "left": {
      "from": 68,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 69
    },
    "right": {
      "from": 68,
      "line": "    logger.info(\"test fallout: \" + fallout(testY, testPred).toString)",
      "lineIdx": 119,
      "to": 69
    }
  }, {
    "left": {
      "from": 34,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 35
    },
    "right": {
      "from": 34,
      "line": "  private def readTestCase(testDir: Path): TestCase = {",
      "lineIdx": 32,
      "to": 35
    }
  }, {
    "left": {
      "from": 50,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 51
    },
    "right": {
      "from": 50,
      "line": "    logger.info(s\"1s in training: ${training.count(_.matching)}\")",
      "lineIdx": 86,
      "to": 51
    }
  }, {
    "left": {
      "from": 10,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 11
    },
    "right": {
      "from": 10,
      "line": "    logger.info(s\"Reducing conflict: ${testCase.wordAlignment.matches.size} to ${unambiguousWordAlignment.matches.size}\")",
      "lineIdx": 130,
      "to": 11
    }
  }, {
    "left": {
      "from": 15,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 16
    },
    "right": {
      "from": 15,
      "line": "    logger.info(\"test recall: \" + recall(testY, testPred).toString)",
      "lineIdx": 116,
      "to": 16
    }
  }, {
    "left": {
      "from": 25,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 26
    },
    "right": {
      "from": 25,
      "line": "    TestCase.open(testDir) match {",
      "lineIdx": 33,
      "to": 26
    }
  }, {
    "left": {
      "from": 61,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 62
    },
    "right": {
      "from": 61,
      "line": "    logger.info(\"test accuracy: \" + accuracy(testY, testPred).toString)",
      "lineIdx": 115,
      "to": 62
    }
  }, {
    "left": {
      "from": 41,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 46
    },
    "right": {
      "from": 41,
      "line": "import com.kristofszilagyi.sedito.common.utils.Control._",
      "lineIdx": 10,
      "to": 46
    }
  }, {
    "left": {
      "from": 40,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 41
    },
    "right": {
      "from": 40,
      "line": "    logger.info(\"test fdr: \" + fdr(testY, testPred).toString)",
      "lineIdx": 120,
      "to": 41
    }
  }, {
    "left": {
      "from": 65,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 83
    },
    "right": {
      "from": 65,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 83
    }
  }, {
    "left": {
      "from": 48,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 49
    },
    "right": {
      "from": 48,
      "line": "    write.xstream(classifier, \"linear_regression.model\")",
      "lineIdx": 207,
      "to": 49
    }
  }, {
    "left": {
      "from": 45,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 46
    },
    "right": {
      "from": 45,
      "line": "  private def readDataSetAndMeasureMetrics() = {",
      "lineIdx": 54,
      "to": 46
    }
  }, {
    "left": {
      "from": 2,
      "line": "  }",
      "lineIdx": 136,
      "to": 3
    },
    "right": {
      "from": 2,
      "line": "  }",
      "lineIdx": 136,
      "to": 3
    }
  }, {
    "left": {
      "from": 35,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 36
    },
    "right": {
      "from": 35,
      "line": "    val (nestedTraining, nestedTest) = metrics.splitAt(metrics.size / 2)",
      "lineIdx": 196,
      "to": 36
    }
  }, {
    "left": {
      "from": 32,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 38
    },
    "right": {
      "from": 32,
      "line": "      stream.iterator().asScala.toList.filter(p => Files.isDirectory(p))",
      "lineIdx": 57,
      "to": 38
    }
  }, {
    "left": {
      "from": 54,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 64
    },
    "right": {
      "from": 54,
      "line": "  private def generateClassifier(nestedTraining: List[IndexedSeq[MetricsWithResults]],",
      "lineIdx": 80,
      "to": 64
    }
  }, {
    "left": {
      "from": 45,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 52
    },
    "right": {
      "from": 45,
      "line": "final case class MetricsWithResults(metrics: Metrics, matching: Boolean)",
      "lineIdx": 27,
      "to": 52
    }
  }, {
    "left": {
      "from": 74,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 75
    },
    "right": {
      "from": 74,
      "line": "    logger.info(s\"Took: ${duration.toMinutes} minutes, ${duration.toMillis/1000 - duration.toMinutes * 60} seconds\")",
      "lineIdx": 210,
      "to": 75
    }
  }, {
    "left": {
      "from": 97,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 98
    },
    "right": {
      "from": 97,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 98
    }
  }, {
    "left": {
      "from": 28,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "import smile.{classification, plot, read, write}",
      "lineIdx": 22,
      "to": 29
    }
  }, {
    "left": {
      "from": 108,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 109
    },
    "right": {
      "from": 108,
      "line": "                                 nestedTest : List[IndexedSeq[MetricsWithResults]], numOfAttributes: Int) = {",
      "lineIdx": 81,
      "to": 109
    }
  }, {
    "left": {
      "from": 23,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 25
    },
    "right": {
      "from": 23,
      "line": "    val num = nonEmpty._2.head.metrics.toLdLenSimDouble.length",
      "lineIdx": 142,
      "to": 25
    }
  }, {
    "left": {
      "from": 66,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 67
    },
    "right": {
      "from": 66,
      "line": "    val parentDir = Paths.get(getClass.getClassLoader.getResource(\"algorithm_tests/full_tests\").getPath)",
      "lineIdx": 55,
      "to": 67
    }
  }, {
    "left": {
      "from": 87,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 93
    },
    "right": {
      "from": 87,
      "line": "      val testCase = readTestCase(Paths.get(\"//home/szkster/IdeaProjects/SeDiTo/common/target/\" +",
      "lineIdx": 153,
      "to": 93
    }
  }, {
    "left": {
      "from": 46,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 174,
      "to": 49
    },
    "right": {
      "from": 46,
      "line": "    plot.plot(scaledDataSet, '.', Array(Color.RED, Color.BLUE)).setVisible(true)",
      "lineIdx": 186,
      "to": 49
    }
  }, {
    "left": {
      "from": 14,
      "line": "import javafx.stage.Stage",
      "lineIdx": 14,
      "to": 19
    },
    "right": {
      "from": 14,
      "line": "import javafx.stage.Stage",
      "lineIdx": 14,
      "to": 19
    }
  }, {
    "left": {
      "from": 39,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 40
    },
    "right": {
      "from": 39,
      "line": "    val testPred = testX.map(classifier.predict)",
      "lineIdx": 104,
      "to": 40
    }
  }, {
    "left": {
      "from": 43,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 180,
      "to": 44
    },
    "right": {
      "from": 43,
      "line": "                  classifier: NeuralNetwork, numOfAttributes: Int) = {",
      "lineIdx": 161,
      "to": 44
    }
  }, {
    "left": {
      "from": 28,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 29
    },
    "right": {
      "from": 28,
      "line": "import smile.classification.{NeuralNetwork, SoftClassifier}",
      "lineIdx": 18,
      "to": 29
    }
  }, {
    "left": {
      "from": 42,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 52
    },
    "right": {
      "from": 42,
      "line": "    val calculatedAlignment = new Aligner(classifier, scaler).align(testCase.left, testCase.right)",
      "lineIdx": 126,
      "to": 52
    }
  }, {
    "left": {
      "from": 18,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 20
    },
    "right": {
      "from": 18,
      "line": "    logger.info(s\"0s in test: ${test.count(_.matching ==== false)}\")",
      "lineIdx": 89,
      "to": 20
    }
  }, {
    "left": {
      "from": 0,
      "line": "}",
      "lineIdx": 159,
      "to": 1
    },
    "right": {
      "from": 0,
      "line": "}",
      "lineIdx": 171,
      "to": 1
    }
  }, {
    "left": {
      "from": 69,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 70
    },
    "right": {
      "from": 69,
      "line": "    val testf1s = f1s(nestedTest, scaler, classifier, numOfAttributes)",
      "lineIdx": 204,
      "to": 70
    }
  }]
}