{
  "matches": [{
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 87,
      "to": 88
    }
  }, {
    "left": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 41,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 46,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 90,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 95,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 70,
      "to": 74
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 70,
      "to": 74
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 25,
      "to": 35
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 25,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 23,
      "to": 34
    },
    "right": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 23,
      "to": 34
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 78,
      "to": 79
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 67,
      "to": 72
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 98,
      "from": 67,
      "to": 72
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 71,
      "to": 74
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 71,
      "to": 74
    }
  }, {
    "left": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 79,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 84,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 35,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 40,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 12,
      "to": 15
    },
    "right": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 12,
      "to": 15
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 129,
      "to": 130
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 129,
      "to": 130
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 63,
      "from": 32,
      "to": 36
    },
    "right": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 68,
      "from": 32,
      "to": 36
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 64,
      "to": 65
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 73,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 78,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 48,
      "from": 20,
      "to": 30
    },
    "right": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 53,
      "from": 20,
      "to": 30
    }
  }, {
    "left": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 78,
      "from": 8,
      "to": 11
    },
    "right": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 83,
      "from": 8,
      "to": 11
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 85,
      "from": 34,
      "to": 39
    },
    "right": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 90,
      "from": 34,
      "to": 39
    }
  }, {
    "left": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 39,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 44,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 47,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 52,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 81,
      "to": 98
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 81,
      "to": 98
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 5,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 5,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 96,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 101,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 53,
      "to": 66
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 53,
      "to": 66
    }
  }, {
    "left": {
      "line": "#include <QTextBlock>",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QTextBlock>",
      "lineIdx": 9,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 66,
      "from": 42,
      "to": 50
    },
    "right": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 71,
      "from": 42,
      "to": 50
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 31,
      "to": 47
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 31,
      "to": 47
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 66,
      "to": 74
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 66,
      "to": 74
    }
  }, {
    "left": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 47,
      "from": 8,
      "to": 18
    },
    "right": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 52,
      "from": 8,
      "to": 18
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 68,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 73,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 90,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 95,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 2,
      "to": 15
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 2,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 35,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 40,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 35,
      "from": 63,
      "to": 68
    },
    "right": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 40,
      "from": 63,
      "to": 68
    }
  }, {
    "left": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 34,
      "to": 38
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 34,
      "to": 38
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 86,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 91,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 84,
      "to": 88
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 84,
      "to": 88
    }
  }, {
    "left": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 44,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 49,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 53,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 58,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 131,
      "to": 135
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 131,
      "to": 135
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 115,
      "to": 116
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 115,
      "to": 116
    }
  }, {
    "left": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 67,
      "to": 68
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 46,
      "from": 8,
      "to": 12
    },
    "right": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 51,
      "from": 8,
      "to": 12
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 73,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 78,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 0,
      "to": 4
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 0,
      "to": 4
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 17,
      "to": 26
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 17,
      "to": 26
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 82,
      "to": 85
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 82,
      "to": 85
    }
  }, {
    "left": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 63,
      "from": 12,
      "to": 17
    },
    "right": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 68,
      "from": 12,
      "to": 17
    }
  }, {
    "left": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 41,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 46,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 85,
      "from": 9,
      "to": 18
    },
    "right": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 90,
      "from": 9,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 13
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 10,
      "to": 13
    }
  }, {
    "left": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 35,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 40,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 90,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 95,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 98,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 36,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 41,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 38,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 43,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 68,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 73,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 70,
      "to": 74
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 70,
      "to": 74
    }
  }, {
    "left": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 57,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 62,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 38,
      "to": 52
    },
    "right": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 38,
      "to": 52
    }
  }, {
    "left": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 90,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 95,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 47,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 52,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 47,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 52,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 35,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 40,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 79,
      "to": 80
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 79,
      "to": 80
    }
  }, {
    "left": {
      "line": "#include <QSplitter>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QSplitter>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 95,
      "to": 100
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 95,
      "to": 100
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 78,
      "from": 13,
      "to": 18
    },
    "right": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 83,
      "from": 13,
      "to": 18
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 25,
      "to": 33
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 25,
      "to": 33
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 59,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 64,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 53,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 58,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 58,
      "from": 25,
      "to": 48
    },
    "right": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 63,
      "from": 25,
      "to": 48
    }
  }, {
    "left": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 58,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 63,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 37,
      "to": 62
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 37,
      "to": 62
    }
  }, {
    "left": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 95,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 100,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 52,
      "to": 57
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 52,
      "to": 57
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 79,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 84,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 76,
      "from": 30,
      "to": 46
    },
    "right": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 81,
      "from": 30,
      "to": 46
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 85,
      "to": 89
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 85,
      "to": 89
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 16,
      "to": 24
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 16,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 96,
      "to": 97
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 96,
      "to": 97
    }
  }, {
    "left": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 66,
      "from": 0,
      "to": 7
    },
    "right": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 71,
      "from": 0,
      "to": 7
    }
  }, {
    "left": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 83,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 88,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 88,
      "from": 72,
      "to": 73
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 72,
      "to": 73
    }
  }, {
    "left": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 46,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 51,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 83,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 88,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 138,
      "to": 139
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 138,
      "to": 139
    }
  }, {
    "left": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 44,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 49,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 53,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 58,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 76,
      "from": 0,
      "to": 3
    },
    "right": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 81,
      "from": 0,
      "to": 3
    }
  }, {
    "left": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 63,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 68,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 98,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  return sizes.at(0);",
      "lineIdx": 80,
      "from": 15,
      "to": 17
    },
    "right": {
      "line": "  return sizes.at(0);",
      "lineIdx": 85,
      "from": 15,
      "to": 17
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 81,
      "to": 82
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 141,
      "to": 142
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 141,
      "to": 142
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 91,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 96,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 64,
      "to": 65
    }
  }, {
    "left": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 34,
      "to": 37
    },
    "right": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 34,
      "to": 37
    }
  }, {
    "left": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 48,
      "from": 9,
      "to": 19
    },
    "right": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 53,
      "from": 9,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 90,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 95,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 88,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 76,
      "to": 80
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 76,
      "to": 80
    }
  }, {
    "left": {
      "line": "#include <QStackedLayout>",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QStackedLayout>",
      "lineIdx": 1,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include <QStackedLayout>",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QStackedLayout>",
      "lineIdx": 1,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 61,
      "to": 65
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 61,
      "to": 65
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 67,
      "to": 75
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 67,
      "to": 75
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 33,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 38,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 38,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 43,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 68,
      "from": 26,
      "to": 37
    },
    "right": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 73,
      "from": 26,
      "to": 37
    }
  }, {
    "left": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 78,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 83,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 143,
      "to": 144
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 143,
      "to": 144
    }
  }, {
    "left": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 63,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 68,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 95,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 100,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 68,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 73,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 73,
      "from": 43,
      "to": 50
    },
    "right": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 78,
      "from": 43,
      "to": 50
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 94,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 99,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 26,
      "to": 36
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 26,
      "to": 36
    }
  }, {
    "left": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 90,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 95,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 68,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 73,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 66,
      "from": 8,
      "to": 32
    },
    "right": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 71,
      "from": 8,
      "to": 32
    }
  }, {
    "left": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 18,
      "to": 27
    },
    "right": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 18,
      "to": 27
    }
  }, {
    "left": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 53,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 58,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 41,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 46,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 125,
      "to": 129
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 125,
      "to": 129
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 39,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 44,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 48,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 53,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "#include <QTextBlock>",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <QTextBlock>",
      "lineIdx": 9,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 7,
      "to": 15
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 7,
      "to": 15
    }
  }, {
    "left": {
      "line": "  return sizes.at(0);",
      "lineIdx": 80,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  return sizes.at(0);",
      "lineIdx": 85,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 23,
      "to": 25
    },
    "right": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 23,
      "to": 25
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 11,
      "to": 22
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 11,
      "to": 22
    }
  }, {
    "left": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 53,
      "from": 10,
      "to": 19
    },
    "right": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 58,
      "from": 10,
      "to": 19
    }
  }, {
    "left": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 46,
      "from": 14,
      "to": 23
    },
    "right": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 51,
      "from": 14,
      "to": 23
    }
  }, {
    "left": {
      "line": ": QWidget(aParent)",
      "lineIdx": 12,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": ": QWidget(aParent)",
      "lineIdx": 12,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 88,
      "to": 89
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 123,
      "to": 124
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 123,
      "to": 124
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 75,
      "to": 79
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 75,
      "to": 79
    }
  }, {
    "left": {
      "line": "  return sizes.at(0);",
      "lineIdx": 80,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  return sizes.at(0);",
      "lineIdx": 85,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 90,
      "from": 19,
      "to": 23
    },
    "right": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 95,
      "from": 19,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 10,
      "to": 15
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 10,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 41,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 46,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 51,
      "to": 58
    },
    "right": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 51,
      "to": 58
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 90,
      "from": 25,
      "to": 38
    },
    "right": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 95,
      "from": 25,
      "to": 38
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 88,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 98,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 33,
      "to": 47
    },
    "right": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 33,
      "to": 47
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 39,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 44,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 41,
      "from": 2,
      "to": 6
    },
    "right": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 46,
      "from": 2,
      "to": 6
    }
  }, {
    "left": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 77,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 82,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": ": QWidget(aParent)",
      "lineIdx": 12,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": ": QWidget(aParent)",
      "lineIdx": 12,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 58,
      "to": 59
    },
    "right": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 58,
      "to": 59
    }
  }, {
    "left": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 95,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 100,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 74,
      "to": 75
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 91,
      "to": 96
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 91,
      "to": 96
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 74,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 79,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 5,
      "to": 29
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 5,
      "to": 29
    }
  }, {
    "left": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 78,
      "from": 21,
      "to": 30
    },
    "right": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 83,
      "from": 21,
      "to": 30
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 58,
      "to": 68
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 58,
      "to": 68
    }
  }, {
    "left": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 39,
      "from": 26,
      "to": 32
    },
    "right": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 44,
      "from": 26,
      "to": 32
    }
  }, {
    "left": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 78,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 83,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 48,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 53,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 73,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 78,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 47,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 52,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 66,
      "from": 51,
      "to": 56
    },
    "right": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 71,
      "from": 51,
      "to": 56
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "  return sizes.at(0);",
      "lineIdx": 80,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  return sizes.at(0);",
      "lineIdx": 85,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 76,
      "to": 84
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 76,
      "to": 84
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 85,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 90,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "#include <QTextBlock>",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QTextBlock>",
      "lineIdx": 9,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 18,
      "to": 24
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 18,
      "to": 24
    }
  }, {
    "left": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 95,
      "from": 25,
      "to": 31
    },
    "right": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 100,
      "from": 25,
      "to": 31
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 75,
      "to": 80
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 75,
      "to": 80
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 61,
      "to": 65
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 98,
      "from": 61,
      "to": 65
    }
  }, {
    "left": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 79,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 84,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 38,
      "from": 19,
      "to": 23
    },
    "right": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 43,
      "from": 19,
      "to": 23
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 49,
      "to": 65
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 49,
      "to": 65
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 88,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 47,
      "to": 50
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 47,
      "to": 50
    }
  }, {
    "left": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 79,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 84,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 46,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 51,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 47,
      "from": 55,
      "to": 60
    },
    "right": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 52,
      "from": 55,
      "to": 60
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 21,
      "to": 31
    },
    "right": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 21,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 58,
      "from": 19,
      "to": 23
    },
    "right": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 63,
      "from": 19,
      "to": 23
    }
  }, {
    "left": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 95,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 100,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 2,
      "to": 15
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 2,
      "to": 15
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 52,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 57,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 73,
      "from": 9,
      "to": 18
    },
    "right": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 78,
      "from": 9,
      "to": 18
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 38,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 43,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 83,
      "from": 11,
      "to": 35
    },
    "right": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 88,
      "from": 11,
      "to": 35
    }
  }, {
    "left": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 78,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 83,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 35,
      "from": 44,
      "to": 53
    },
    "right": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 40,
      "from": 44,
      "to": 53
    }
  }, {
    "left": {
      "line": "#include <QStackedLayout>",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QStackedLayout>",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 63,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 68,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 41,
      "from": 8,
      "to": 14
    },
    "right": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 46,
      "from": 8,
      "to": 14
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 142,
      "to": 143
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 142,
      "to": 143
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 68,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 73,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 68,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 73,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 11,
      "to": 22
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 11,
      "to": 22
    }
  }, {
    "left": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 79,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 84,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 12,
      "to": 13
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 12,
      "to": 13
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 71,
      "to": 72
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 71,
      "to": 72
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 73,
      "from": 26,
      "to": 42
    },
    "right": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 78,
      "from": 26,
      "to": 42
    }
  }, {
    "left": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 48,
      "from": 33,
      "to": 44
    },
    "right": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 53,
      "from": 33,
      "to": 44
    }
  }, {
    "left": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 66,
      "from": 58,
      "to": 63
    },
    "right": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 71,
      "from": 58,
      "to": 63
    }
  }, {
    "left": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 2,
      "to": 13
    },
    "right": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 2,
      "to": 13
    }
  }, {
    "left": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 79,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 84,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 68,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 73,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 66,
      "to": 70
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 66,
      "to": 70
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 88,
      "from": 68,
      "to": 72
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 68,
      "to": 72
    }
  }, {
    "left": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 83,
      "from": 54,
      "to": 59
    },
    "right": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 88,
      "from": 54,
      "to": 59
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 73,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 78,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 64,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 69,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 48,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 53,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 98,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 72,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 77,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include <QStackedLayout>",
      "lineIdx": 1,
      "from": 10,
      "to": 24
    },
    "right": {
      "line": "#include <QStackedLayout>",
      "lineIdx": 1,
      "from": 10,
      "to": 24
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 72,
      "to": 75
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 72,
      "to": 75
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 85,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 90,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 81,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 86,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 83,
      "from": 37,
      "to": 44
    },
    "right": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 88,
      "from": 37,
      "to": 44
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 48,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 53,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 32,
      "to": 48
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 32,
      "to": 48
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 38,
      "to": 63
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 38,
      "to": 63
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 90,
      "from": 9,
      "to": 18
    },
    "right": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 95,
      "from": 9,
      "to": 18
    }
  }, {
    "left": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 39,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 44,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 84,
      "to": 85
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 83,
      "to": 87
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 83,
      "to": 87
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 66,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 71,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 90,
      "to": 115
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 90,
      "to": 115
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 85,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 90,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 11,
      "to": 12
    },
    "right": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 11,
      "to": 12
    }
  }, {
    "left": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 17,
      "to": 20
    },
    "right": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 17,
      "to": 20
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 26,
      "to": 50
    },
    "right": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 26,
      "to": 50
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 44,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 49,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 137,
      "to": 138
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 137,
      "to": 138
    }
  }, {
    "left": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 95,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 100,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 67,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 72,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 35,
      "from": 18,
      "to": 42
    },
    "right": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 40,
      "from": 18,
      "to": 42
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 78,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 83,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 125,
      "to": 126
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 125,
      "to": 126
    }
  }, {
    "left": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 95,
      "from": 19,
      "to": 23
    },
    "right": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 100,
      "from": 19,
      "to": 23
    }
  }, {
    "left": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 58,
      "from": 9,
      "to": 18
    },
    "right": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 63,
      "from": 9,
      "to": 18
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 76,
      "to": 77
    }
  }, {
    "left": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 57,
      "to": 58
    },
    "right": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 83,
      "from": 72,
      "to": 77
    },
    "right": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 88,
      "from": 72,
      "to": 77
    }
  }, {
    "left": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 76,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 81,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 58,
      "from": 49,
      "to": 53
    },
    "right": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 63,
      "from": 49,
      "to": 53
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 41,
      "from": 30,
      "to": 36
    },
    "right": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 46,
      "from": 30,
      "to": 36
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 89,
      "to": 90
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 89,
      "to": 90
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 69,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 74,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 98,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 58,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 63,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "  return sizes.at(0);",
      "lineIdx": 80,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "  return sizes.at(0);",
      "lineIdx": 85,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 41,
      "to": 46
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 41,
      "to": 46
    }
  }, {
    "left": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 66,
      "from": 34,
      "to": 41
    },
    "right": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 71,
      "from": 34,
      "to": 41
    }
  }, {
    "left": {
      "line": "  return sizes.at(0);",
      "lineIdx": 80,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return sizes.at(0);",
      "lineIdx": 85,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 73,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 78,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 20,
      "to": 30
    },
    "right": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 20,
      "to": 30
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 88,
      "from": 59,
      "to": 67
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 59,
      "to": 67
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 68,
      "to": 69
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 68,
      "to": 69
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 28,
      "to": 35
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 28,
      "to": 35
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 12,
      "to": 21
    },
    "right": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 12,
      "to": 21
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 63,
      "from": 19,
      "to": 31
    },
    "right": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 68,
      "from": 19,
      "to": 31
    }
  }, {
    "left": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 63,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 68,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 35,
      "from": 6,
      "to": 16
    },
    "right": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 40,
      "from": 6,
      "to": 16
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 80,
      "to": 81
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 80,
      "to": 81
    }
  }, {
    "left": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 63,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 68,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 83,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 88,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 116,
      "to": 124
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 116,
      "to": 124
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 17,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 17,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 58,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 63,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 69,
      "to": 70
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 69,
      "to": 70
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 124,
      "to": 125
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 124,
      "to": 125
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 140,
      "to": 141
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 140,
      "to": 141
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 114,
      "to": 115
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 114,
      "to": 115
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 88,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 88,
      "from": 7,
      "to": 17
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 7,
      "to": 17
    }
  }, {
    "left": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 95,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 100,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 44,
      "from": 0,
      "to": 10
    },
    "right": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 49,
      "from": 0,
      "to": 10
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 57,
      "to": 58
    }
  }, {
    "left": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 78,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 83,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 18,
      "to": 31
    },
    "right": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 18,
      "to": 31
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 88,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 44,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 49,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 35,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 40,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 60,
      "to": 67
    },
    "right": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 60,
      "to": 67
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 140,
      "to": 141
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 140,
      "to": 141
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 85,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 90,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 88,
      "from": 74,
      "to": 79
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 74,
      "to": 79
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 23,
      "to": 35
    },
    "right": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 23,
      "to": 35
    }
  }, {
    "left": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 78,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 83,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 5,
      "to": 29
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 5,
      "to": 29
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 47,
      "from": 20,
      "to": 31
    },
    "right": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 52,
      "from": 20,
      "to": 31
    }
  }, {
    "left": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 27,
      "to": 28
    },
    "right": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 27,
      "to": 28
    }
  }, {
    "left": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 39,
      "from": 33,
      "to": 45
    },
    "right": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 44,
      "from": 33,
      "to": 45
    }
  }, {
    "left": {
      "line": "#include <QSplitter>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QSplitter>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 31,
      "to": 40
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 31,
      "to": 40
    }
  }, {
    "left": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 79,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 84,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 41,
      "from": 15,
      "to": 23
    },
    "right": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 46,
      "from": 15,
      "to": 23
    }
  }, {
    "left": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 27
    },
    "right": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 10,
      "to": 27
    }
  }, {
    "left": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 38,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 43,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 67,
      "to": 68
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  return sizes.at(0);",
      "lineIdx": 80,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  return sizes.at(0);",
      "lineIdx": 85,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 84,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 89,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 2,
      "to": 11
    },
    "right": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 2,
      "to": 11
    }
  }, {
    "left": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 78,
      "from": 31,
      "to": 36
    },
    "right": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 83,
      "from": 31,
      "to": 36
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 39,
      "from": 4,
      "to": 8
    },
    "right": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 44,
      "from": 4,
      "to": 8
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 82,
      "to": 83
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 14,
      "to": 17
    },
    "right": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 14,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 68,
      "from": 9,
      "to": 18
    },
    "right": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 73,
      "from": 9,
      "to": 18
    }
  }, {
    "left": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 10,
      "to": 22
    },
    "right": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 10,
      "to": 22
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 72,
      "to": 76
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 72,
      "to": 76
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 48,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 53,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 66,
      "from": 41,
      "to": 42
    },
    "right": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 71,
      "from": 41,
      "to": 42
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 52,
      "to": 60
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 98,
      "from": 52,
      "to": 60
    }
  }, {
    "left": {
      "line": "  return sizes.at(0);",
      "lineIdx": 80,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  return sizes.at(0);",
      "lineIdx": 85,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 6,
      "to": 30
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 6,
      "to": 30
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 39,
      "to": 47
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 39,
      "to": 47
    }
  }, {
    "left": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 41,
      "from": 37,
      "to": 42
    },
    "right": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 46,
      "from": 37,
      "to": 42
    }
  }, {
    "left": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 49,
      "to": 57
    },
    "right": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 49,
      "to": 57
    }
  }, {
    "left": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 27,
      "to": 55
    },
    "right": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 27,
      "to": 55
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 45,
      "to": 51
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 98,
      "from": 45,
      "to": 51
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 85,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 90,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 98,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 76,
      "from": 46,
      "to": 47
    },
    "right": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 81,
      "from": 46,
      "to": 47
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "#include <QTextBlock>",
      "lineIdx": 9,
      "from": 10,
      "to": 20
    },
    "right": {
      "line": "#include <QTextBlock>",
      "lineIdx": 9,
      "from": 10,
      "to": 20
    }
  }, {
    "left": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 83,
      "from": 0,
      "to": 10
    },
    "right": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 88,
      "from": 0,
      "to": 10
    }
  }, {
    "left": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 41,
      "from": 24,
      "to": 29
    },
    "right": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 46,
      "from": 24,
      "to": 29
    }
  }, {
    "left": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 52,
      "to": 53
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 73,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 78,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 53,
      "from": 20,
      "to": 37
    },
    "right": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 58,
      "from": 20,
      "to": 37
    }
  }, {
    "left": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 83,
      "from": 65,
      "to": 70
    },
    "right": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 88,
      "from": 65,
      "to": 70
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 45,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 50,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 79,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 84,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "  switch(aSide) {",
      "lineIdx": 37,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "  switch(aSide) {",
      "lineIdx": 42,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 43,
      "to": 52
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 43,
      "to": 52
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 15,
      "to": 16
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 15,
      "to": 16
    }
  }, {
    "left": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 63,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 68,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 18,
      "to": 26
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 18,
      "to": 26
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  mSplitter.addWidget(&mRightEditor);",
      "lineIdx": 25,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 86,
      "to": 93
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 86,
      "to": 93
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 73,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 78,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 46,
      "from": 26,
      "to": 30
    },
    "right": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 51,
      "from": 26,
      "to": 30
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 32,
      "to": 51
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 32,
      "to": 51
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 50,
      "to": 51
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 50,
      "to": 51
    }
  }, {
    "left": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 44,
      "from": 57,
      "to": 62
    },
    "right": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 49,
      "from": 57,
      "to": 62
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 135,
      "to": 136
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 135,
      "to": 136
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 23,
      "to": 47
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 23,
      "to": 47
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 47,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 52,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 88,
      "from": 19,
      "to": 43
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 19,
      "to": 43
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 65,
      "to": 69
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 65,
      "to": 69
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 66,
      "to": 67
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 66,
      "to": 67
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "  }",
      "lineIdx": 40,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  }",
      "lineIdx": 45,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 13,
      "to": 14
    },
    "right": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 13,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include <QSplitter>",
      "lineIdx": 2,
      "from": 10,
      "to": 19
    },
    "right": {
      "line": "#include <QSplitter>",
      "lineIdx": 2,
      "from": 10,
      "to": 19
    }
  }, {
    "left": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 53,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  mCanvas.setDrawer(aPaintingCallback);",
      "lineIdx": 58,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "#include <QSplitter>",
      "lineIdx": 2,
      "from": 19,
      "to": 20
    },
    "right": {
      "line": "#include <QSplitter>",
      "lineIdx": 2,
      "from": 19,
      "to": 20
    }
  }, {
    "left": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 38,
      "from": 9,
      "to": 17
    },
    "right": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 43,
      "from": 9,
      "to": 17
    }
  }, {
    "left": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 58,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 63,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 2,
      "to": 3
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 2,
      "to": 3
    }
  }, {
    "left": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 58,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 63,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 77,
      "to": 78
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 85,
      "to": 86
    }
  }, {
    "left": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 47,
      "from": 61,
      "to": 62
    },
    "right": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 52,
      "from": 61,
      "to": 62
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 90,
      "to": 96
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 90,
      "to": 96
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 74,
      "to": 75
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 82,
      "to": 83
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 88,
      "from": 45,
      "to": 58
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 45,
      "to": 58
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 47,
      "from": 54,
      "to": 55
    },
    "right": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 52,
      "from": 54,
      "to": 55
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 73,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "  return getEditor(aSide).getRectForLineLC(lineNum);",
      "lineIdx": 78,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "#include <QSplitter>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <QSplitter>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 53,
      "to": 57
    },
    "right": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 53,
      "to": 57
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 98,
      "to": 99
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 98,
      "to": 99
    }
  }, {
    "left": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 38,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 43,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 61,
      "to": 68
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 61,
      "to": 68
    }
  }, {
    "left": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 76,
      "from": 29,
      "to": 30
    },
    "right": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 81,
      "from": 29,
      "to": 30
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 138,
      "to": 139
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 138,
      "to": 139
    }
  }, {
    "left": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 83,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 88,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 79,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 84,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 49,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 54,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 47,
      "from": 45,
      "to": 54
    },
    "right": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 52,
      "from": 45,
      "to": 54
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 66,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 71,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 48,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 53,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"transparentcanvas.h\"",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 39,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 44,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 16,
      "to": 21
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 16,
      "to": 21
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 42,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 47,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 78,
      "to": 79
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 86,
      "to": 87
    }
  }, {
    "left": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 66,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "QString CanvasedDoubleTextEditor::getText(DiffSide aSide) const",
      "lineIdx": 71,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 25,
      "to": 28
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 25,
      "to": 28
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 12,
      "to": 21
    },
    "right": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 12,
      "to": 21
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 77,
      "to": 80
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 77,
      "to": 80
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 48,
      "to": 53
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 48,
      "to": 53
    }
  }, {
    "left": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 0,
      "to": 24
    },
    "right": {
      "line": "CanvasedDoubleTextEditor::CanvasedDoubleTextEditor(QWidget *aParent)",
      "lineIdx": 11,
      "from": 0,
      "to": 24
    }
  }, {
    "left": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 16,
      "to": 19
    },
    "right": {
      "line": ", mLeftEditor(*(new CodeEditor))",
      "lineIdx": 14,
      "from": 16,
      "to": 19
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 89,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 94,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 76,
      "from": 49,
      "to": 54
    },
    "right": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 81,
      "from": 49,
      "to": 54
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 25,
      "to": 31
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 25,
      "to": 31
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mCanvas);",
      "lineIdx": 22,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 79,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 84,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 83,
      "from": 59,
      "to": 60
    },
    "right": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 88,
      "from": 59,
      "to": 60
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "  switch(aSide) {",
      "lineIdx": 37,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  switch(aSide) {",
      "lineIdx": 42,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  switch(aSide) {",
      "lineIdx": 37,
      "from": 2,
      "to": 8
    },
    "right": {
      "line": "  switch(aSide) {",
      "lineIdx": 42,
      "from": 2,
      "to": 8
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 93,
      "to": 94
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 93,
      "to": 94
    }
  }, {
    "left": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 78,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 83,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 46,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 51,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 115,
      "to": 123
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 115,
      "to": 123
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 3,
      "to": 4
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 3,
      "to": 4
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 76,
      "from": 4,
      "to": 28
    },
    "right": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 81,
      "from": 4,
      "to": 28
    }
  }, {
    "left": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 76,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "int CanvasedDoubleTextEditor::getSplitterPosLC() const",
      "lineIdx": 81,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 28,
      "to": 37
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 28,
      "to": 37
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 55,
      "to": 60
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 55,
      "to": 60
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 11,
      "to": 23
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 11,
      "to": 23
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 52,
      "to": 60
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 52,
      "to": 60
    }
  }, {
    "left": {
      "line": ": QWidget(aParent)",
      "lineIdx": 12,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": ": QWidget(aParent)",
      "lineIdx": 12,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 48,
      "from": 32,
      "to": 33
    },
    "right": {
      "line": "  return const_cast<CodeEditor&>(constEditor);",
      "lineIdx": 53,
      "from": 32,
      "to": 33
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 85,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 90,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 126,
      "to": 131
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 126,
      "to": 131
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 85,
      "from": 40,
      "to": 41
    },
    "right": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 90,
      "from": 40,
      "to": 41
    }
  }, {
    "left": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 56,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "QRect CanvasedDoubleTextEditor::getLinePositionInLC(const QTextBlock &line, DiffSide side) const",
      "lineIdx": 61,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 90,
      "from": 39,
      "to": 40
    },
    "right": {
      "line": "  return getEditor(side).visibleBlocks();",
      "lineIdx": 95,
      "from": 39,
      "to": 40
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 85,
      "from": 19,
      "to": 24
    },
    "right": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 90,
      "from": 19,
      "to": 24
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 98,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 47,
      "from": 60,
      "to": 61
    },
    "right": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 52,
      "from": 60,
      "to": 61
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 63,
      "to": 64
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 63,
      "to": 64
    }
  }, {
    "left": {
      "line": "  switch(aSide) {",
      "lineIdx": 37,
      "from": 9,
      "to": 14
    },
    "right": {
      "line": "  switch(aSide) {",
      "lineIdx": 42,
      "from": 9,
      "to": 14
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 20,
      "to": 27
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 20,
      "to": 27
    }
  }, {
    "left": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 41,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 46,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": ": QWidget(aParent)",
      "lineIdx": 12,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": ": QWidget(aParent)",
      "lineIdx": 12,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 47,
      "to": 48
    },
    "right": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 47,
      "to": 48
    }
  }, {
    "left": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 47,
      "from": 34,
      "to": 43
    },
    "right": {
      "line": "  const CodeEditor& constEditor = constThis->getEditor(aSide);",
      "lineIdx": 52,
      "from": 34,
      "to": 43
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 22,
      "to": 23
    },
    "right": {
      "line": "  mSplitter.addWidget(&mLeftEditor);",
      "lineIdx": 24,
      "from": 22,
      "to": 23
    }
  }, {
    "left": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 95,
      "from": 9,
      "to": 18
    },
    "right": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 100,
      "from": 9,
      "to": 18
    }
  }, {
    "left": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 16,
      "to": 33
    },
    "right": {
      "line": ", mCanvas(*(new TransparentCanvas))",
      "lineIdx": 13,
      "from": 16,
      "to": 33
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 136,
      "to": 137
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 136,
      "to": 137
    }
  }, {
    "left": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 2,
      "to": 16
    },
    "right": {
      "line": "  QStackedLayout *stackedLayout = new QStackedLayout(this);",
      "lineIdx": 18,
      "from": 2,
      "to": 16
    }
  }, {
    "left": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 78,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "  QList<int> sizes = mSplitter.sizes();",
      "lineIdx": 83,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 83,
      "from": 61,
      "to": 64
    },
    "right": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 88,
      "from": 61,
      "to": 64
    }
  }, {
    "left": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 14,
      "to": 15
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 35,
      "from": 54,
      "to": 62
    },
    "right": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 40,
      "from": 54,
      "to": 62
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 85,
      "from": 26,
      "to": 33
    },
    "right": {
      "line": "  return getEditor(aSide).getLine(aLine);",
      "lineIdx": 90,
      "from": 26,
      "to": 33
    }
  }, {
    "left": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 83,
      "from": 45,
      "to": 53
    },
    "right": {
      "line": "QTextBlock CanvasedDoubleTextEditor::getLine(DiffSide aSide, int aLine) const",
      "lineIdx": 88,
      "from": 45,
      "to": 53
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 131,
      "to": 132
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 131,
      "to": 132
    }
  }, {
    "left": {
      "line": "#include <QTextBlock>",
      "lineIdx": 9,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "#include <QTextBlock>",
      "lineIdx": 9,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 39,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "    case DiffSide::RIGHT: return mRightEditor;",
      "lineIdx": 44,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 44,
      "from": 12,
      "to": 36
    },
    "right": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 49,
      "from": 12,
      "to": 36
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 62,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 67,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 40,
      "to": 42
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 40,
      "to": 42
    }
  }, {
    "left": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 95,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return getEditor(side).blocks();",
      "lineIdx": 100,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 38,
      "to": 39
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 38,
      "to": 39
    }
  }, {
    "left": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 44,
      "from": 38,
      "to": 47
    },
    "right": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 49,
      "from": 38,
      "to": 47
    }
  }, {
    "left": {
      "line": "}",
      "lineIdx": 54,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "}",
      "lineIdx": 59,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 88,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::visibleBlocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 71,
      "from": 65,
      "to": 66
    },
    "right": {
      "line": "boost::optional<QRect> CanvasedDoubleTextEditor::getRectForLineLC(DiffSide aSide, int lineNum) const",
      "lineIdx": 76,
      "from": 65,
      "to": 66
    }
  }, {
    "left": {
      "line": "  switch(aSide) {",
      "lineIdx": 37,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "  switch(aSide) {",
      "lineIdx": 42,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 41,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  FAIL(\"Stupid compiler needs return/throw\");",
      "lineIdx": 46,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include <QPainter>",
      "lineIdx": 5,
      "from": 10,
      "to": 18
    },
    "right": {
      "line": "#include <QPainter>",
      "lineIdx": 5,
      "from": 10,
      "to": 18
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 133,
      "to": 137
    },
    "right": {
      "line": "  connect(&mRightEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::RIGHT, line); } );",
      "lineIdx": 30,
      "from": 133,
      "to": 137
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 31,
      "to": 38
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 31,
      "to": 38
    }
  }, {
    "left": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 2,
      "to": 14
    },
    "right": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 2,
      "to": 14
    }
  }, {
    "left": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 17,
      "to": 32
    },
    "right": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 17,
      "to": 32
    }
  }, {
    "left": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 38,
      "from": 32,
      "to": 43
    },
    "right": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 43,
      "from": 32,
      "to": 43
    }
  }, {
    "left": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 16,
      "to": 19
    },
    "right": {
      "line": "#include \"../../mix/asserts.h\"",
      "lineIdx": 6,
      "from": 16,
      "to": 19
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 19,
      "to": 43
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 98,
      "from": 19,
      "to": 43
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 49,
      "to": 50
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 49,
      "to": 50
    }
  }, {
    "left": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": ", mSplitter(*(new QSplitter))",
      "lineIdx": 16,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 58,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 63,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 79,
      "from": 15,
      "to": 19
    },
    "right": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 84,
      "from": 15,
      "to": 19
    }
  }, {
    "left": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 44,
      "from": 48,
      "to": 56
    },
    "right": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 49,
      "from": 48,
      "to": 56
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 30,
      "to": 31
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 30,
      "to": 31
    }
  }, {
    "left": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 63,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  getEditor(aSide).setPlainText(text);",
      "lineIdx": 68,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 31,
      "to": 32
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 31,
      "to": 32
    }
  }, {
    "left": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <boost/optional.hpp>",
      "lineIdx": 8,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": ", mRightEditor(*(new CodeEditor))",
      "lineIdx": 15,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": ": QWidget(aParent)",
      "lineIdx": 12,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": ": QWidget(aParent)",
      "lineIdx": 12,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 35,
      "from": 70,
      "to": 75
    },
    "right": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 40,
      "from": 70,
      "to": 75
    }
  }, {
    "left": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 17,
      "to": 26
    },
    "right": {
      "line": "  stackedLayout->addWidget(&mSplitter);",
      "lineIdx": 26,
      "from": 17,
      "to": 26
    }
  }, {
    "left": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 58,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "  return getEditor(side).getRectForTextBlockInLC(line);",
      "lineIdx": 63,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 46,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const auto* constThis = this;",
      "lineIdx": 51,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 24,
      "to": 30
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 24,
      "to": 30
    }
  }, {
    "left": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 68,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  return getEditor(aSide).toPlainText();",
      "lineIdx": 73,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 21,
      "to": 22
    },
    "right": {
      "line": "#include \"codeeditor.h\"",
      "lineIdx": 3,
      "from": 21,
      "to": 22
    }
  }, {
    "left": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 44,
      "from": 62,
      "to": 63
    },
    "right": {
      "line": "CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide)",
      "lineIdx": 49,
      "from": 62,
      "to": 63
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 89,
      "to": 114
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 89,
      "to": 114
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 48,
      "to": 49
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 48,
      "to": 49
    }
  }, {
    "left": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 93,
      "from": 7,
      "to": 17
    },
    "right": {
      "line": "vector<QTextBlock> CanvasedDoubleTextEditor::blocks(DiffSide side) const",
      "lineIdx": 98,
      "from": 7,
      "to": 17
    }
  }, {
    "left": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 79,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "  VERIFY(sizes.size() == 2);",
      "lineIdx": 84,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 35,
      "from": 42,
      "to": 43
    },
    "right": {
      "line": "const CodeEditor& CanvasedDoubleTextEditor::getEditor(DiffSide aSide) const",
      "lineIdx": 40,
      "from": 42,
      "to": 43
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 70,
      "to": 71
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 70,
      "to": 71
    }
  }, {
    "left": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 2,
      "to": 9
    },
    "right": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 2,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include <QStackedLayout>",
      "lineIdx": 1,
      "from": 24,
      "to": 25
    },
    "right": {
      "line": "#include <QStackedLayout>",
      "lineIdx": 1,
      "from": 24,
      "to": 25
    }
  }, {
    "left": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"gui/mix/diffside.h\"",
      "lineIdx": 7,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 51,
      "from": 51,
      "to": 52
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setDrawer(const std::function<void (QPainter &)> &aPaintingCallback)",
      "lineIdx": 56,
      "from": 51,
      "to": 52
    }
  }, {
    "left": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 57,
      "to": 61
    },
    "right": {
      "line": "  mCanvas.setAttribute(Qt::WA_TransparentForMouseEvents, true);",
      "lineIdx": 21,
      "from": 57,
      "to": 61
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 68,
      "to": 71
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 68,
      "to": 71
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 32,
      "from": 73,
      "to": 74
    },
    "right": {
      "line": "  connect(&mLeftEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 33,
      "from": 81,
      "to": 82
    }
  }, {
    "left": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 124,
      "to": 125
    },
    "right": {
      "line": "  connect(&mLeftEditor, &CodeEditor::setManualAlignmentClicked, [this](int line) { this->setManualAlignmentClicked(DiffSide::LEFT, line); } );",
      "lineIdx": 29,
      "from": 124,
      "to": 125
    }
  }, {
    "left": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 61,
      "from": 53,
      "to": 54
    },
    "right": {
      "line": "void CanvasedDoubleTextEditor::setText(DiffSide aSide, const QString& text)",
      "lineIdx": 66,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), &mCanvas, SLOT(update()));",
      "lineIdx": 31,
      "from": 75,
      "to": 76
    },
    "right": {
      "line": "  connect(&mRightEditor, SIGNAL(scrollBarChanged()), this, SIGNAL(scrollBarChanged()));",
      "lineIdx": 32,
      "from": 83,
      "to": 84
    }
  }, {
    "left": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 2,
      "to": 15
    },
    "right": {
      "line": "  stackedLayout->setStackingMode(QStackedLayout::StackAll);",
      "lineIdx": 19,
      "from": 2,
      "to": 15
    }
  }, {
    "left": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 10,
      "to": 34
    },
    "right": {
      "line": "#include \"canvaseddoubletexteditor.h\"",
      "lineIdx": 0,
      "from": 10,
      "to": 34
    }
  }, {
    "left": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 38,
      "from": 25,
      "to": 31
    },
    "right": {
      "line": "    case DiffSide::LEFT: return mLeftEditor;",
      "lineIdx": 43,
      "from": 25,
      "to": 31
    }
  }, {
    "left": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 81,
      "to": 89
    },
    "right": {
      "line": "  //todo possible memory/resource leak: no automatic disconnection: who owns the function object?",
      "lineIdx": 28,
      "from": 81,
      "to": 89
    }
  }]
}