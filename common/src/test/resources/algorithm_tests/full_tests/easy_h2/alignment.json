{
  "matches": [{
    "left": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 52,
      "to": 53
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 53,
      "to": 54
    }
  }, {
    "left": {
      "line": "#define FEATUREEXTRACTOR_H",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#define FEATUREEXTRACTOR_H",
      "lineIdx": 1,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "public:",
      "lineIdx": 13,
      "from": 0,
      "to": 6
    },
    "right": {
      "line": "public:",
      "lineIdx": 13,
      "from": 0,
      "to": 6
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 8,
      "from": 6,
      "to": 9
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 8,
      "from": 6,
      "to": 9
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "#ifndef FEATUREEXTRACTOR_H",
      "lineIdx": 0,
      "from": 1,
      "to": 7
    },
    "right": {
      "line": "#ifndef FEATUREEXTRACTOR_H",
      "lineIdx": 0,
      "from": 1,
      "to": 7
    }
  }, {
    "left": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 37,
      "to": 44
    },
    "right": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 37,
      "to": 44
    }
  }, {
    "left": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 26,
      "to": 36
    },
    "right": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 26,
      "to": 36
    }
  }, {
    "left": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 15,
      "to": 25
    },
    "right": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 15,
      "to": 25
    }
  }, {
    "left": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 33,
      "to": 34
    },
    "right": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 33,
      "to": 34
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 26,
      "to": 27
    },
    "right": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 26,
      "to": 27
    }
  }, {
    "left": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 100,
      "to": 101
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 101,
      "to": 102
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 106,
      "to": 114
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 107,
      "to": 115
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 56,
      "to": 57
    },
    "right": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 56,
      "to": 57
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 8,
      "from": 10,
      "to": 11
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 8,
      "from": 10,
      "to": 11
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 16,
      "from": 1,
      "to": 2
    },
    "right": {
      "line": "};",
      "lineIdx": 17,
      "from": 1,
      "to": 2
    }
  }, {
    "left": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 4,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 4,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 36,
      "to": 43
    },
    "right": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 36,
      "to": 43
    }
  }, {
    "left": {
      "line": "};",
      "lineIdx": 16,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "};",
      "lineIdx": 17,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 2,
      "to": 18
    },
    "right": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 2,
      "to": 18
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 35,
      "to": 36
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 35,
      "to": 36
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 8,
      "to": 14
    },
    "right": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 8,
      "to": 14
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 8,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 4,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 17
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 10,
      "to": 17
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 2,
      "to": 5
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 2,
      "to": 5
    }
  }, {
    "left": {
      "line": "public:",
      "lineIdx": 13,
      "from": 6,
      "to": 7
    },
    "right": {
      "line": "public:",
      "lineIdx": 13,
      "from": 6,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 43,
      "to": 44
    },
    "right": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 43,
      "to": 44
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 26,
      "to": 33
    },
    "right": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 26,
      "to": 33
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 102,
      "to": 105
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 103,
      "to": 106
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 21,
      "to": 28
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 21,
      "to": 28
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 87,
      "to": 88
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 88,
      "to": 89
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 8,
      "from": 11,
      "to": 17
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 8,
      "from": 11,
      "to": 17
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 116,
      "to": 121
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 117,
      "to": 122
    }
  }, {
    "left": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 7,
      "to": 20
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 7,
      "to": 20
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 10,
      "to": 23
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 10,
      "to": 23
    }
  }, {
    "left": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 18,
      "to": 19
    },
    "right": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 18,
      "to": 19
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 27,
      "to": 35
    },
    "right": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 27,
      "to": 35
    }
  }, {
    "left": {
      "line": "#endif // FEATUREEXTRACTOR_H",
      "lineIdx": 18,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#endif // FEATUREEXTRACTOR_H",
      "lineIdx": 19,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 20,
      "to": 21
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 20,
      "to": 21
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 114,
      "to": 115
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 115,
      "to": 116
    }
  }, {
    "left": {
      "line": "#endif // FEATUREEXTRACTOR_H",
      "lineIdx": 18,
      "from": 7,
      "to": 8
    },
    "right": {
      "line": "#endif // FEATUREEXTRACTOR_H",
      "lineIdx": 19,
      "from": 7,
      "to": 8
    }
  }, {
    "left": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 4,
      "from": 16,
      "to": 17
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 4,
      "from": 16,
      "to": 17
    }
  }, {
    "left": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 45,
      "to": 46
    },
    "right": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 45,
      "to": 46
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 28,
      "to": 29
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 28,
      "to": 29
    }
  }, {
    "left": {
      "line": "class FeatureExtractor",
      "lineIdx": 10,
      "from": 6,
      "to": 22
    },
    "right": {
      "line": "class FeatureExtractor",
      "lineIdx": 10,
      "from": 6,
      "to": 22
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 37,
      "to": 52
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 38,
      "to": 53
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 8,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 8,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 1,
      "to": 8
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 18,
      "to": 35
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 18,
      "to": 35
    }
  }, {
    "left": {
      "line": "#endif // FEATUREEXTRACTOR_H",
      "lineIdx": 18,
      "from": 8,
      "to": 9
    },
    "right": {
      "line": "#endif // FEATUREEXTRACTOR_H",
      "lineIdx": 19,
      "from": 8,
      "to": 9
    }
  }, {
    "left": {
      "line": "#endif // FEATUREEXTRACTOR_H",
      "lineIdx": 18,
      "from": 10,
      "to": 28
    },
    "right": {
      "line": "#endif // FEATUREEXTRACTOR_H",
      "lineIdx": 19,
      "from": 10,
      "to": 28
    }
  }, {
    "left": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 37,
      "to": 38
    },
    "right": {
      "line": "#include \"aligner/onetoonealignment.h\"",
      "lineIdx": 5,
      "from": 37,
      "to": 38
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 121,
      "to": 122
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 122,
      "to": 123
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 59,
      "to": 76
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 60,
      "to": 77
    }
  }, {
    "left": {
      "line": "#ifndef FEATUREEXTRACTOR_H",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "#ifndef FEATUREEXTRACTOR_H",
      "lineIdx": 0,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 44,
      "to": 45
    },
    "right": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 44,
      "to": 45
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 76,
      "to": 77
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 77,
      "to": 78
    }
  }, {
    "left": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 36,
      "to": 45
    },
    "right": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 36,
      "to": 45
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 89,
      "to": 92
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 90,
      "to": 93
    }
  }, {
    "left": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 36,
      "to": 37
    },
    "right": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 36,
      "to": 37
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 78,
      "to": 87
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 79,
      "to": 88
    }
  }, {
    "left": {
      "line": "class FeatureExtractor",
      "lineIdx": 10,
      "from": 0,
      "to": 5
    },
    "right": {
      "line": "class FeatureExtractor",
      "lineIdx": 10,
      "from": 0,
      "to": 5
    }
  }, {
    "left": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 47,
      "to": 55
    },
    "right": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 47,
      "to": 55
    }
  }, {
    "left": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 34,
      "to": 35
    },
    "right": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 34,
      "to": 35
    }
  }, {
    "left": {
      "line": "#include <memory>",
      "lineIdx": 4,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "#include <memory>",
      "lineIdx": 4,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 23,
      "to": 24
    },
    "right": {
      "line": "#include <unordered_map>",
      "lineIdx": 3,
      "from": 23,
      "to": 24
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 53,
      "to": 58
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 54,
      "to": 59
    }
  }, {
    "left": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 19,
      "to": 25
    },
    "right": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 19,
      "to": 25
    }
  }, {
    "left": {
      "line": "#ifndef FEATUREEXTRACTOR_H",
      "lineIdx": 0,
      "from": 8,
      "to": 26
    },
    "right": {
      "line": "#ifndef FEATUREEXTRACTOR_H",
      "lineIdx": 0,
      "from": 8,
      "to": 26
    }
  }, {
    "left": {
      "line": "#define FEATUREEXTRACTOR_H",
      "lineIdx": 1,
      "from": 1,
      "to": 7
    },
    "right": {
      "line": "#define FEATUREEXTRACTOR_H",
      "lineIdx": 1,
      "from": 1,
      "to": 7
    }
  }, {
    "left": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 10,
      "to": 16
    },
    "right": {
      "line": "#include <vector>",
      "lineIdx": 2,
      "from": 10,
      "to": 16
    }
  }, {
    "left": {
      "line": "using std::vector;",
      "lineIdx": 8,
      "from": 17,
      "to": 18
    },
    "right": {
      "line": "using std::vector;",
      "lineIdx": 8,
      "from": 17,
      "to": 18
    }
  }, {
    "left": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 2,
      "to": 7
    },
    "right": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 2,
      "to": 7
    }
  }, {
    "left": {
      "line": "#define FEATUREEXTRACTOR_H",
      "lineIdx": 1,
      "from": 8,
      "to": 26
    },
    "right": {
      "line": "#define FEATUREEXTRACTOR_H",
      "lineIdx": 1,
      "from": 8,
      "to": 26
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 93,
      "to": 100
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 94,
      "to": 101
    }
  }, {
    "left": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 55,
      "to": 56
    },
    "right": {
      "line": "  FeatureExtractor(vector<unique_ptr<Feature>> features);",
      "lineIdx": 14,
      "from": 55,
      "to": 56
    }
  }, {
    "left": {
      "line": "#endif // FEATUREEXTRACTOR_H",
      "lineIdx": 18,
      "from": 1,
      "to": 6
    },
    "right": {
      "line": "#endif // FEATUREEXTRACTOR_H",
      "lineIdx": 19,
      "from": 1,
      "to": 6
    }
  }, {
    "left": {
      "line": "  std::unordered_map<QString, float> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 5,
      "to": 6
    },
    "right": {
      "line": "  std::unordered_map<QString, double> computeFeatures(const OneToOneAlignment& alignment, int leftIdx, int rightIdx) const;",
      "lineIdx": 15,
      "from": 5,
      "to": 6
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 18,
      "to": 26
    },
    "right": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 18,
      "to": 26
    }
  }, {
    "left": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 25,
      "to": 26
    },
    "right": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 25,
      "to": 26
    }
  }, {
    "left": {
      "line": "{",
      "lineIdx": 11,
      "from": 0,
      "to": 1
    },
    "right": {
      "line": "{",
      "lineIdx": 11,
      "from": 0,
      "to": 1
    }
  }, {
    "left": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    },
    "right": {
      "line": "#include \"aligner/learning/features/feature.h\"",
      "lineIdx": 6,
      "from": 9,
      "to": 10
    }
  }, {
    "left": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 14,
      "to": 15
    },
    "right": {
      "line": "  const vector<unique_ptr<Feature>> mFeatures;",
      "lineIdx": 12,
      "from": 14,
      "to": 15
    }
  }]
}