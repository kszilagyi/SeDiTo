#include "sensidiff.h"
#include <QApplication>
#include "mix/asserts.h"
#include "mix/exceptionhandler.h"
#include "mix/logger/logger.h"

void printSizes() {
    Logger logger("SizeLogger");
    logger.info("sizeof(char) = " + QString::number(sizeof(char)));
    logger.info("sizeof(short) = " + QString::number(sizeof(short)));
    logger.info("sizeof(int) = " + QString::number(sizeof(int)));
    logger.info("sizeof(long int) = " + QString::number(sizeof(long int)));
    logger.info("sizeof(long long int) = " + QString::number(sizeof(long long int)));
}

void qtMessageHandler(QtMsgType type, const QMessageLogContext&/* context*/, const QString& msg)
{
    static Logger logger("Qt"); //name won't be logged, it was easier this way
    switch ( type ) {
        case QtDebugMsg:
            logger.info(QString("QtDebug: \n") + msg);
            break;
        case QtWarningMsg:
            logger.warn(QString("QtWarning: \n") + msg);
            break;
        case QtCriticalMsg:
        case QtFatalMsg:
            logger.error(QString("QtFatal: \n") + msg);
            VERIFY(false);
    }
}

int main(int argc, char *argv[])
{

  initExceptionHandler();
  printSizes();
  qInstallMessageHandler( qtMessageHandler );
  Logger logger("MainLogger");
  try {
    QApplication app(argc, argv);
    SensiDiff w;
    w.show();

    return app.exec();
  } catch (const std::exception& e) {
    logger.error(QString("std::exception caught, aborting: ") + e.what());
    throw;
  } catch (...) {
    logger.error("Unknow exception, aborting.");
  }
}
