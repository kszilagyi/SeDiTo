# -*- coding: utf-8 -*-

from grid_common import *
from operator import itemgetter
import hashlib
import time
import math

def upload_training_file():
    local_training_file_path = '../../features_output/train_samples.txt'
    with open(local_training_file_path, 'rb') as training_file:
        training_file_content = training_file.read()
        s3.Bucket(bucket_name).put_object(Key = training_file_key, Body = training_file_content)
        return hashlib.md5(training_file_content).hexdigest()

def main():
    #todo purge queue, find out what to do if calculation is in progress
    training_file_md5 = upload_training_file()
    print("Training file uploaded, md5 = " + training_file_md5)
    #c_exp_begin, c_exp_end, c_exp_step = -5,  15,  2
    c_exp_begin, c_exp_end, c_exp_step = -5,  15,  10
    
    #todo this is wrong! 1 c_exps enought for this but we need all of them
    wrong wrong wrong
    c_exps = set(range(c_exp_begin, c_exp_end, c_exp_step))
    for c_exp in c_exps:
        input_queue.send_message(MessageBody= "{0},{1}".format(c_exp, training_file_md5))
    
    received_c_exps = set()
    all_scores = []
    while(c_exps != received_c_exps):
        print("Waiting for messages")
        for message in error_queue.receive_messages():
            print("Received error: " + message.body)
            message.delete()
            
        for message in result_queue.receive_messages():
            print("Received result: " + message.body)
            c_exp, g_exp, f_score, received_md5 = message.body.split(",")
            received_c_exps.add(int(c_exp))
            if(received_md5 == training_file_md5):
                all_scores.append((int(c_exp), int(g_exp), float(f_score)))
            else:
                print("MD5 invalid! Ignoring.")
                
            message.delete()
        
        time.sleep(5)


    valids = list(filter(lambda score: math.isnan(score[2]) == False, all_scores))
    print(valids)
    best = max(valids, key=itemgetter(2)) 
    print("Best c: " + str(2**best[0]))
    print("Best g: " + str(2**best[1]))
    print("Best f validation score: " + str(best[2]))
    
    #todo write up the setup (sample size, feature size, results, speed)
    with open('cross_vaildation_result.txt', 'w') as f:
        f.write(str(best[0]) + "\n")
        f.write(str(best[1]) + "\n")
        f.write(str(best[2]) + "\n")
        
start_time = time.time()
main()  
print("--- %s seconds ---" % (time.time() - start_time))